import { SafeEventEmitter } from "@toruslabs/openlogin-jrpc";
import { ADAPTER_STATUS_TYPE, CustomChainConfig, IAdapter, SafeEventEmitterProvider, UserInfo, WALLET_ADAPTER_TYPE } from "@web3auth/base";
export interface Web3AuthCoreOptions {
    /**
     * custom chain configuration for chainNamespace
     *
     * @defaultValue mainnet config of provided chainNamespace
     */
    chainConfig: Partial<CustomChainConfig> & Pick<CustomChainConfig, "chainNamespace">;
}
export declare class Web3AuthCore extends SafeEventEmitter {
    readonly coreOptions: Web3AuthCoreOptions;
    connectedAdapterName: string | null;
    status: ADAPTER_STATUS_TYPE;
    cachedAdapter: string | null;
    protected walletAdapters: Record<string, IAdapter<unknown>>;
    constructor(options: Web3AuthCoreOptions);
    get provider(): SafeEventEmitterProvider | null;
    set provider(_: SafeEventEmitterProvider | null);
    init(): Promise<void>;
    configureAdapter(adapter: IAdapter<unknown>): Web3AuthCore;
    clearCache(): void;
    /**
     * Connect to a specific wallet adapter
     * @param walletName - Key of the walletAdapter to use.
     */
    connectTo<T>(walletName: WALLET_ADAPTER_TYPE, loginParams?: T): Promise<SafeEventEmitterProvider | null>;
    logout(options?: {
        cleanup: boolean;
    }): Promise<void>;
    getUserInfo(): Promise<Partial<UserInfo>>;
    protected subscribeToAdapterEvents(walletAdapter: IAdapter<unknown>): void;
    protected checkInitRequirements(): void;
    private cacheWallet;
}
