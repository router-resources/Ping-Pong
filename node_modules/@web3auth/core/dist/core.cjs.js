module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("@web3auth/base");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("loglevel");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/defineProperty");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("@toruslabs/openlogin-jrpc");

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "Web3AuthCore", function() { return /* reexport */ core_Web3AuthCore; });

// EXTERNAL MODULE: external "@babel/runtime/helpers/defineProperty"
var defineProperty_ = __webpack_require__(2);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_);

// EXTERNAL MODULE: external "@toruslabs/openlogin-jrpc"
var openlogin_jrpc_ = __webpack_require__(3);

// EXTERNAL MODULE: external "@web3auth/base"
var base_ = __webpack_require__(0);

// EXTERNAL MODULE: external "loglevel"
var external_loglevel_ = __webpack_require__(1);
var external_loglevel_default = /*#__PURE__*/__webpack_require__.n(external_loglevel_);

// CONCATENATED MODULE: ./src/core.ts


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty_default()(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }




const ADAPTER_CACHE_KEY = "Web3Auth-cachedAdapter";
class core_Web3AuthCore extends openlogin_jrpc_["SafeEventEmitter"] {
  constructor(options) {
    var _options$chainConfig, _options$chainConfig2, _options$chainConfig3, _options$chainConfig4;

    super();

    defineProperty_default()(this, "coreOptions", void 0);

    defineProperty_default()(this, "connectedAdapterName", null);

    defineProperty_default()(this, "status", base_["ADAPTER_STATUS"].NOT_READY);

    defineProperty_default()(this, "cachedAdapter", null);

    defineProperty_default()(this, "walletAdapters", {});

    if (!((_options$chainConfig = options.chainConfig) !== null && _options$chainConfig !== void 0 && _options$chainConfig.chainNamespace) || !Object.values(base_["CHAIN_NAMESPACES"]).includes((_options$chainConfig2 = options.chainConfig) === null || _options$chainConfig2 === void 0 ? void 0 : _options$chainConfig2.chainNamespace)) throw base_["WalletInitializationError"].invalidParams("Please provide a valid chainNamespace in chainConfig");
    this.cachedAdapter = Object(base_["storageAvailable"])("sessionStorage") ? window.sessionStorage.getItem(ADAPTER_CACHE_KEY) : null;
    this.coreOptions = _objectSpread(_objectSpread({}, options), {}, {
      chainConfig: _objectSpread(_objectSpread({}, Object(base_["getChainConfig"])((_options$chainConfig3 = options.chainConfig) === null || _options$chainConfig3 === void 0 ? void 0 : _options$chainConfig3.chainNamespace, (_options$chainConfig4 = options.chainConfig) === null || _options$chainConfig4 === void 0 ? void 0 : _options$chainConfig4.chainId)), options.chainConfig)
    });
    this.subscribeToAdapterEvents = this.subscribeToAdapterEvents.bind(this);
  }

  get provider() {
    if (this.status === base_["ADAPTER_STATUS"].CONNECTED && this.connectedAdapterName) {
      const adapter = this.walletAdapters[this.connectedAdapterName];
      return adapter.provider;
    }

    return null;
  }

  set provider(_) {
    throw new Error("Not implemented");
  }

  async init() {
    const initPromises = Object.keys(this.walletAdapters).map(adapterName => {
      this.subscribeToAdapterEvents(this.walletAdapters[adapterName]); // if adapter doesn't have any chain config yet thn set it based on provided namespace and chainId.
      // if no chainNamespace or chainId is being provided, it will connect with mainnet.

      if (!this.walletAdapters[adapterName].chainConfigProxy) {
        const providedChainConfig = this.coreOptions.chainConfig;
        if (!providedChainConfig.chainNamespace) throw base_["WalletInitializationError"].invalidParams("Please provide chainNamespace in chainConfig");

        const chainConfig = _objectSpread(_objectSpread({}, Object(base_["getChainConfig"])(providedChainConfig.chainNamespace, providedChainConfig.chainId)), providedChainConfig);

        this.walletAdapters[adapterName].setChainConfig(chainConfig);
      }

      return this.walletAdapters[adapterName].init({
        autoConnect: this.cachedAdapter === adapterName
      }).catch(e => external_loglevel_default.a.error(e));
    });
    this.status = base_["ADAPTER_STATUS"].READY;
    await Promise.all(initPromises);
  }

  configureAdapter(adapter) {
    this.checkInitRequirements();
    const providedChainConfig = this.coreOptions.chainConfig;
    if (!providedChainConfig.chainNamespace) throw base_["WalletInitializationError"].invalidParams("Please provide chainNamespace in chainConfig");
    const adapterAlreadyExists = this.walletAdapters[adapter.name];
    if (adapterAlreadyExists) throw base_["WalletInitializationError"].duplicateAdapterError("Wallet adapter for ".concat(adapter.name, " already exists"));
    if (adapter.adapterNamespace !== base_["ADAPTER_NAMESPACES"].MULTICHAIN && adapter.adapterNamespace !== providedChainConfig.chainNamespace) throw base_["WalletInitializationError"].incompatibleChainNameSpace("This wallet adapter belongs to ".concat(adapter.adapterNamespace, " which is incompatible with currently used namespace: ").concat(providedChainConfig.chainNamespace));

    if (adapter.adapterNamespace === base_["ADAPTER_NAMESPACES"].MULTICHAIN && adapter.currentChainNamespace && providedChainConfig.chainNamespace !== adapter.currentChainNamespace) {
      // chainConfig checks are already validated in constructor so using typecast is safe here.
      adapter.setChainConfig(providedChainConfig);
    }

    this.walletAdapters[adapter.name] = adapter;
    return this;
  }

  clearCache() {
    if (!Object(base_["storageAvailable"])("sessionStorage")) return;
    window.sessionStorage.removeItem(ADAPTER_CACHE_KEY);
    this.cachedAdapter = null;
  }
  /**
   * Connect to a specific wallet adapter
   * @param walletName - Key of the walletAdapter to use.
   */


  async connectTo(walletName, loginParams) {
    if (!this.walletAdapters[walletName]) throw base_["WalletInitializationError"].notFound("Please add wallet adapter for ".concat(walletName, " wallet, before connecting"));
    return this.walletAdapters[walletName].connect(loginParams);
  }

  async logout() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      cleanup: false
    };
    if (this.status !== base_["ADAPTER_STATUS"].CONNECTED || !this.connectedAdapterName) throw base_["WalletLoginError"].notConnectedError("No wallet is connected");
    await this.walletAdapters[this.connectedAdapterName].disconnect(options);
  }

  async getUserInfo() {
    external_loglevel_default.a.debug("Getting user info", this.status, this.connectedAdapterName);
    if (this.status !== base_["ADAPTER_STATUS"].CONNECTED || !this.connectedAdapterName) throw base_["WalletLoginError"].notConnectedError("No wallet is connected");
    return this.walletAdapters[this.connectedAdapterName].getUserInfo();
  }

  subscribeToAdapterEvents(walletAdapter) {
    walletAdapter.on(base_["ADAPTER_EVENTS"].CONNECTED, data => {
      this.status = base_["ADAPTER_STATUS"].CONNECTED;
      this.connectedAdapterName = data.adapter;
      this.cacheWallet(data.adapter);
      this.emit(base_["ADAPTER_EVENTS"].CONNECTED, _objectSpread({}, data));
      external_loglevel_default.a.debug("connected", this.status, this.connectedAdapterName);
    });
    walletAdapter.on(base_["ADAPTER_EVENTS"].DISCONNECTED, data => {
      // get back to ready state for rehydrating.
      this.status = base_["ADAPTER_STATUS"].READY;
      this.emit(base_["ADAPTER_EVENTS"].DISCONNECTED, data);

      if (Object(base_["storageAvailable"])("sessionStorage")) {
        const cachedAdapter = window.sessionStorage.getItem(ADAPTER_CACHE_KEY);

        if (this.connectedAdapterName === cachedAdapter) {
          this.clearCache();
        }
      }

      external_loglevel_default.a.debug("disconnected", this.status, this.connectedAdapterName);
    });
    walletAdapter.on(base_["ADAPTER_EVENTS"].CONNECTING, data => {
      this.status = base_["ADAPTER_STATUS"].CONNECTING;
      this.emit(base_["ADAPTER_EVENTS"].CONNECTING, data);
      external_loglevel_default.a.debug("connecting", this.status, this.connectedAdapterName);
    });
    walletAdapter.on(base_["ADAPTER_EVENTS"].ERRORED, data => {
      this.status = base_["ADAPTER_STATUS"].ERRORED;
      this.clearCache();
      this.emit(base_["ADAPTER_EVENTS"].ERRORED, data);
      external_loglevel_default.a.debug("errored", this.status, this.connectedAdapterName);
    });
    walletAdapter.on(base_["ADAPTER_EVENTS"].ADAPTER_DATA_UPDATED, data => {
      external_loglevel_default.a.debug("adapter data updated", data);
      this.emit(base_["ADAPTER_EVENTS"].ADAPTER_DATA_UPDATED, data);
    });
  }

  checkInitRequirements() {
    if (this.status === base_["ADAPTER_STATUS"].CONNECTING) throw base_["WalletInitializationError"].notReady("Already pending connection");
    if (this.status === base_["ADAPTER_STATUS"].CONNECTED) throw base_["WalletInitializationError"].notReady("Already connected");
    if (this.status === base_["ADAPTER_STATUS"].READY) throw base_["WalletInitializationError"].notReady("Adapter is already initialized");
  }

  cacheWallet(walletName) {
    if (!Object(base_["storageAvailable"])("sessionStorage")) return;
    window.sessionStorage.setItem(ADAPTER_CACHE_KEY, walletName);
    this.cachedAdapter = walletName;
  }

}
// CONCATENATED MODULE: ./src/index.ts


/***/ })
/******/ ]);
//# sourceMappingURL=core.cjs.js.map