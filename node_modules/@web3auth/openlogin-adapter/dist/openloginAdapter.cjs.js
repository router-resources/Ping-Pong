module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		0: 0
/******/ 	};
/******/
/******/
/******/
/******/ 	// script path function
/******/ 	function jsonpScriptSrc(chunkId) {
/******/ 		return __webpack_require__.p + "" + chunkId + ".openloginAdapter.cjs.js"
/******/ 	}
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	var jsonpArray = window["webpackJsonpOpenloginAdapter"] = window["webpackJsonpOpenloginAdapter"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("@web3auth/base");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/defineProperty");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("@toruslabs/openlogin");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("loglevel");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("lodash.merge");

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "getOpenloginDefaultOptions", function() { return /* reexport */ getOpenloginDefaultOptions; });
__webpack_require__.d(__webpack_exports__, "OpenloginAdapter", function() { return /* reexport */ openloginAdapter_OpenloginAdapter; });

// EXTERNAL MODULE: external "@toruslabs/openlogin"
var openlogin_ = __webpack_require__(2);
var openlogin_default = /*#__PURE__*/__webpack_require__.n(openlogin_);

// EXTERNAL MODULE: external "@web3auth/base"
var base_ = __webpack_require__(0);

// CONCATENATED MODULE: ./src/config.ts


const getOpenloginDefaultOptions = (chainNamespace, chainId) => {
  return {
    adapterSettings: {
      network: openlogin_["OPENLOGIN_NETWORK"].MAINNET,
      clientId: "",
      uxMode: openlogin_["UX_MODE"].POPUP
    },
    chainConfig: chainNamespace ? Object(base_["getChainConfig"])(chainNamespace, chainId) : undefined,
    loginSettings: {
      relogin: true
    }
  };
};
// CONCATENATED MODULE: ./src/interface.ts

// EXTERNAL MODULE: external "@babel/runtime/helpers/defineProperty"
var defineProperty_ = __webpack_require__(1);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_);

// EXTERNAL MODULE: external "lodash.merge"
var external_lodash_merge_ = __webpack_require__(4);
var external_lodash_merge_default = /*#__PURE__*/__webpack_require__.n(external_lodash_merge_);

// EXTERNAL MODULE: external "loglevel"
var external_loglevel_ = __webpack_require__(3);
var external_loglevel_default = /*#__PURE__*/__webpack_require__.n(external_loglevel_);

// CONCATENATED MODULE: ./src/openloginAdapter.ts


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty_default()(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }






class openloginAdapter_OpenloginAdapter extends base_["BaseAdapter"] {
  constructor(params) {
    var _params$chainConfig, _params$chainConfig2, _params$chainConfig3;

    super();

    defineProperty_default()(this, "name", base_["WALLET_ADAPTERS"].OPENLOGIN);

    defineProperty_default()(this, "adapterNamespace", base_["ADAPTER_NAMESPACES"].MULTICHAIN);

    defineProperty_default()(this, "type", base_["ADAPTER_CATEGORY"].IN_APP);

    defineProperty_default()(this, "openloginInstance", null);

    defineProperty_default()(this, "status", base_["ADAPTER_STATUS"].NOT_READY);

    defineProperty_default()(this, "currentChainNamespace", base_["CHAIN_NAMESPACES"].EIP155);

    defineProperty_default()(this, "openloginOptions", void 0);

    defineProperty_default()(this, "loginSettings", {});

    defineProperty_default()(this, "privKeyProvider", null);

    external_loglevel_default.a.debug("const openlogin adapter", params);
    const defaultOptions = getOpenloginDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);
    this.openloginOptions = _objectSpread(_objectSpread({
      clientId: "",
      network: openlogin_["OPENLOGIN_NETWORK"].MAINNET
    }, defaultOptions.adapterSettings), params.adapterSettings || {});
    this.loginSettings = _objectSpread(_objectSpread({}, defaultOptions.loginSettings), params.loginSettings); // if no chainNamespace is passed then chain config should be set before calling init

    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {
      var _params$chainConfig4;

      this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;
      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};
      this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);
      external_loglevel_default.a.debug("const openlogin chainConfig", this.chainConfig);

      if (!this.chainConfig.rpcTarget) {
        throw base_["WalletInitializationError"].invalidParams("rpcTarget is required in chainConfig");
      }
    }
  }

  get chainConfigProxy() {
    return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;
  }

  get provider() {
    var _this$privKeyProvider;

    return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;
  }

  set provider(_) {
    throw new Error("Not implemented");
  }

  async init(options) {
    var _this$openloginOption;

    super.checkInitializationRequirements();
    if (!((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.clientId)) throw base_["WalletInitializationError"].invalidParams("clientId is required before openlogin's initialization");
    if (!this.chainConfig) throw base_["WalletInitializationError"].invalidParams("chainConfig is required before initialization");
    this.openloginInstance = new openlogin_default.a(this.openloginOptions);
    const redirectResult = Object(openlogin_["getHashQueryParams"])();
    let isRedirectResult = true;

    if (Object.keys(redirectResult).length > 0 && redirectResult.result) {
      isRedirectResult = true;
    }

    await this.openloginInstance.init();
    this.status = base_["ADAPTER_STATUS"].READY;
    this.emit(base_["ADAPTER_EVENTS"].READY, base_["WALLET_ADAPTERS"].OPENLOGIN);

    try {
      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true
      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {
        await this.connect();
      }
    } catch (error) {
      external_loglevel_default.a.error("Failed to connect with cached openlogin provider", error);
      this.emit("ERRORED", error);
    }
  }

  async connect(params) {
    super.checkConnectionRequirements();
    this.status = base_["ADAPTER_STATUS"].CONNECTING;
    this.emit(base_["ADAPTER_EVENTS"].CONNECTING, _objectSpread(_objectSpread({}, params), {}, {
      adapter: base_["WALLET_ADAPTERS"].OPENLOGIN
    }));

    try {
      await this.connectWithProvider(params);
      return this.provider;
    } catch (error) {
      external_loglevel_default.a.error("Failed to connect with openlogin provider", error); // ready again to be connected

      this.status = base_["ADAPTER_STATUS"].READY;
      this.emit(base_["ADAPTER_EVENTS"].ERRORED, error);

      if (error !== null && error !== void 0 && error.message.includes("user closed popup")) {
        throw base_["WalletLoginError"].popupClosed();
      }

      throw base_["WalletLoginError"].connectionError("Failed to login with openlogin");
    }
  }

  async disconnect() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      cleanup: false
    };
    if (this.status !== base_["ADAPTER_STATUS"].CONNECTED) throw base_["WalletLoginError"].notConnectedError("Not connected with wallet");
    if (!this.openloginInstance) throw base_["WalletInitializationError"].notReady("openloginInstance is not ready");
    await this.openloginInstance.logout();

    if (options.cleanup) {
      this.status = base_["ADAPTER_STATUS"].NOT_READY;
      this.openloginInstance = null;
      this.privKeyProvider = null;
    } else {
      // ready to be connected again
      this.status = base_["ADAPTER_STATUS"].READY;
    }

    this.emit(base_["ADAPTER_EVENTS"].DISCONNECTED);
  }

  async getUserInfo() {
    if (this.status !== base_["ADAPTER_STATUS"].CONNECTED) throw base_["WalletLoginError"].notConnectedError("Not connected with wallet");
    if (!this.openloginInstance) throw base_["WalletInitializationError"].notReady("openloginInstance is not ready");
    const userInfo = await this.openloginInstance.getUserInfo();
    return userInfo;
  } // should be called only before initialization.


  setAdapterSettings(adapterSettings) {
    if (this.status === base_["ADAPTER_STATUS"].READY) return;
    const defaultOptions = getOpenloginDefaultOptions();
    this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions || {}), adapterSettings);
  } // should be called only before initialization.


  setChainConfig(customChainConfig) {
    super.setChainConfig(customChainConfig);
    this.currentChainNamespace = customChainConfig.chainNamespace;
  }

  async connectWithProvider(params) {
    if (!this.chainConfig) throw base_["WalletInitializationError"].invalidParams("chainConfig is required before initialization");
    if (!this.openloginInstance) throw base_["WalletInitializationError"].notReady("openloginInstance is not ready");

    if (this.currentChainNamespace === base_["CHAIN_NAMESPACES"].SOLANA) {
      const {
        SolanaPrivateKeyProvider
      } = await Promise.resolve(/* import() */).then(__webpack_require__.t.bind(null, 6, 7));
      this.privKeyProvider = new SolanaPrivateKeyProvider({
        config: {
          chainConfig: this.chainConfig
        }
      });
    } else if (this.currentChainNamespace === base_["CHAIN_NAMESPACES"].EIP155) {
      const {
        EthereumPrivateKeyProvider
      } = await Promise.resolve(/* import() */).then(__webpack_require__.t.bind(null, 7, 7));
      this.privKeyProvider = new EthereumPrivateKeyProvider({
        config: {
          chainConfig: this.chainConfig
        }
      });
    } else {
      throw new Error("Invalid chainNamespace: ".concat(this.currentChainNamespace, " found while connecting to wallet"));
    } // if not logged in then login


    if (!this.openloginInstance.privKey && params) {
      await this.openloginInstance.login(external_lodash_merge_default()(this.loginSettings, {
        loginProvider: params.loginProvider
      }, {
        extraLoginOptions: {
          login_hint: params === null || params === void 0 ? void 0 : params.login_hint
        }
      }));
    }

    let finalPrivKey = this.openloginInstance.privKey;

    if (finalPrivKey) {
      if (this.currentChainNamespace === base_["CHAIN_NAMESPACES"].SOLANA) {
        const {
          getED25519Key
        } = await Promise.resolve(/* import() */).then(__webpack_require__.t.bind(null, 8, 7));
        finalPrivKey = getED25519Key(finalPrivKey).sk.toString("hex");
      }

      await this.privKeyProvider.setupProvider(finalPrivKey);
      this.status = base_["ADAPTER_STATUS"].CONNECTED;
      this.emit(base_["ADAPTER_EVENTS"].CONNECTED, {
        adapter: base_["WALLET_ADAPTERS"].OPENLOGIN,
        reconnected: !params
      });
    }
  }

}
// CONCATENATED MODULE: ./src/index.ts




/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("@web3auth/solana-provider");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("@web3auth/ethereum-provider");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("@toruslabs/openlogin-ed25519");

/***/ })
/******/ ]);
//# sourceMappingURL=openloginAdapter.cjs.js.map