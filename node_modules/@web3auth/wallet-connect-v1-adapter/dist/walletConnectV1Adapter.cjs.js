module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("@web3auth/base");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/defineProperty");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("loglevel");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("@walletconnect/client");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("@web3auth/ethereum-provider");

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "WalletConnectV1Adapter", function() { return /* reexport */ walletConnectV1adapter_WalletConnectV1Adapter; });

// CONCATENATED MODULE: ./src/interface.ts

// EXTERNAL MODULE: external "@babel/runtime/helpers/defineProperty"
var defineProperty_ = __webpack_require__(1);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_);

// EXTERNAL MODULE: external "@walletconnect/client"
var client_ = __webpack_require__(3);
var client_default = /*#__PURE__*/__webpack_require__.n(client_);

// EXTERNAL MODULE: external "@web3auth/base"
var base_ = __webpack_require__(0);

// EXTERNAL MODULE: external "@web3auth/ethereum-provider"
var ethereum_provider_ = __webpack_require__(4);

// EXTERNAL MODULE: external "loglevel"
var external_loglevel_ = __webpack_require__(2);
var external_loglevel_default = /*#__PURE__*/__webpack_require__.n(external_loglevel_);

// CONCATENATED MODULE: ./src/walletConnectV1adapter.ts


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty_default()(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }






class walletConnectV1adapter_WalletConnectV1Adapter extends base_["BaseAdapter"] {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super();

    defineProperty_default()(this, "name", base_["WALLET_ADAPTERS"].WALLET_CONNECT_V1);

    defineProperty_default()(this, "adapterNamespace", base_["ADAPTER_NAMESPACES"].EIP155);

    defineProperty_default()(this, "currentChainNamespace", base_["CHAIN_NAMESPACES"].EIP155);

    defineProperty_default()(this, "type", base_["ADAPTER_CATEGORY"].EXTERNAL);

    defineProperty_default()(this, "adapterOptions", void 0);

    defineProperty_default()(this, "status", base_["ADAPTER_STATUS"].NOT_READY);

    defineProperty_default()(this, "adapterData", {
      uri: ""
    });

    defineProperty_default()(this, "connector", null);

    defineProperty_default()(this, "wcProvider", null);

    defineProperty_default()(this, "rehydrated", false);

    this.adapterOptions = _objectSpread({}, options);
    this.chainConfig = options.chainConfig || null;
  }

  get connected() {
    var _this$connector;

    return !!((_this$connector = this.connector) !== null && _this$connector !== void 0 && _this$connector.connected);
  }

  get provider() {
    var _this$wcProvider;

    return ((_this$wcProvider = this.wcProvider) === null || _this$wcProvider === void 0 ? void 0 : _this$wcProvider.provider) || null;
  }

  set provider(_) {
    throw new Error("Not implemented");
  }

  async init() {
    super.checkInitializationRequirements();

    if (!this.chainConfig) {
      this.chainConfig = Object(base_["getChainConfig"])(base_["CHAIN_NAMESPACES"].EIP155, 1);
    } // Create a connector


    this.connector = this.getWalletConnectInstance();
    this.wcProvider = new ethereum_provider_["WalletConnectProvider"]({
      config: {
        chainConfig: this.chainConfig
      }
    });
    this.emit(base_["ADAPTER_EVENTS"].READY, base_["WALLET_ADAPTERS"].WALLET_CONNECT_V1);
    this.status = base_["ADAPTER_STATUS"].READY;

    if (this.connector.connected) {
      this.rehydrated = true;
      await this.onConnectHandler({
        accounts: this.connector.accounts,
        chainId: this.connector.chainId.toString()
      });
    }
  }

  async connect() {
    super.checkConnectionRequirements();
    if (!this.connector) throw base_["WalletInitializationError"].notReady("Wallet adapter is not ready yet");

    if (this.connected) {
      await this.onConnectHandler({
        accounts: this.connector.accounts,
        chainId: this.connector.chainId.toString()
      });
      return this.provider;
    }

    if (this.status !== base_["ADAPTER_STATUS"].CONNECTING) {
      var _this$adapterOptions$;

      // for wallet connect qr code modal we have to create a new connector, coz wallet connect internally does not open
      // modal again on existing instance if connection is pending.
      if ((_this$adapterOptions$ = this.adapterOptions.adapterSettings) !== null && _this$adapterOptions$ !== void 0 && _this$adapterOptions$.qrcodeModal) {
        this.connector = this.getWalletConnectInstance();
      }

      await this.createNewSession();
      this.status = base_["ADAPTER_STATUS"].CONNECTING;
      this.emit(base_["ADAPTER_EVENTS"].CONNECTING, {
        adapter: base_["WALLET_ADAPTERS"].WALLET_CONNECT_V1
      });
    }

    return new Promise((resolve, reject) => {
      if (!this.connector) return reject(base_["WalletInitializationError"].notReady("Wallet adapter is not ready yet")); // for wallet connect default modal.

      this.connector.on("modal_closed", async () => {
        this.status = base_["ADAPTER_STATUS"].READY;
        this.emit(base_["ADAPTER_EVENTS"].READY, base_["WALLET_ADAPTERS"].WALLET_CONNECT_V1);
        return reject(new Error("User closed modal"));
      });

      try {
        // Subscribe to session connection
        this.connector.on("connect", async (error, payload) => {
          if (error) {
            this.emit(base_["ADAPTER_EVENTS"].ERRORED, error);
          }

          await this.onConnectHandler(payload.params[0]);
          return resolve(this.provider);
        });
      } catch (error) {
        external_loglevel_default.a.error("Wallet connect v1 adapter error while connecting", error); // ready again to be connected

        this.status = base_["ADAPTER_STATUS"].READY;
        this.rehydrated = true;
        this.emit(base_["ADAPTER_EVENTS"].ERRORED, error);
        reject(error instanceof base_["Web3AuthError"] ? error : base_["WalletLoginError"].connectionError("Failed to login with wallet connect: ".concat((error === null || error === void 0 ? void 0 : error.message) || "")));
      }
    });
  }

  async getUserInfo() {
    if (!this.connected) throw base_["WalletLoginError"].notConnectedError("Not connected with wallet, Please login/connect first");
    return {};
  }

  async disconnect() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      cleanup: false
    };
    const {
      cleanup
    } = options;
    if (!this.connector || !this.connected) throw base_["WalletLoginError"].notConnectedError("Not connected with wallet");
    await this.connector.killSession();
    this.rehydrated = false;

    if (cleanup) {
      this.connector = null;
      this.status = base_["ADAPTER_STATUS"].NOT_READY;
      this.wcProvider = null;
    } else {
      // ready to connect again
      this.status = base_["ADAPTER_STATUS"].READY;
    }

    this.emit(base_["ADAPTER_EVENTS"].DISCONNECTED);
  }

  async createNewSession() {
    var _this$adapterOptions, _this$adapterOptions$2;

    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      forceNewSession: false
    };
    if (!this.connector) throw base_["WalletInitializationError"].notReady("Wallet adapter is not ready yet");

    if (opts.forceNewSession && this.connector.pending) {
      await this.connector.killSession();
    } // for wallet connect qr modal


    if ((_this$adapterOptions = this.adapterOptions) !== null && _this$adapterOptions !== void 0 && (_this$adapterOptions$2 = _this$adapterOptions.adapterSettings) !== null && _this$adapterOptions$2 !== void 0 && _this$adapterOptions$2.qrcodeModal) {
      var _this$chainConfig;

      await this.connector.createSession({
        chainId: parseInt(((_this$chainConfig = this.chainConfig) === null || _this$chainConfig === void 0 ? void 0 : _this$chainConfig.chainId) || "0x1", 16)
      });
      return;
    } // for web3auth qr code modal


    return new Promise((resolve, reject) => {
      var _this$chainConfig2;

      if (!this.connector) return reject(base_["WalletInitializationError"].notReady("Wallet adapter is not ready yet"));
      external_loglevel_default.a.debug("creating new session for web3auth wallet connect");
      this.connector.on("display_uri", async (err, payload) => {
        var _this$connector2;

        if (err) {
          this.emit(base_["ADAPTER_EVENTS"].ERRORED, base_["WalletLoginError"].connectionError("Failed to display wallet connect qr code"));
          return reject(err);
        }

        const uri = payload.params[0];
        this.updateAdapterData({
          uri
        });
        (_this$connector2 = this.connector) === null || _this$connector2 === void 0 ? void 0 : _this$connector2.off("display_uri");
        return resolve();
      });
      this.connector.createSession({
        chainId: parseInt(((_this$chainConfig2 = this.chainConfig) === null || _this$chainConfig2 === void 0 ? void 0 : _this$chainConfig2.chainId) || "0x1", 16)
      }).catch(error => {
        external_loglevel_default.a.error("error while creating new wallet connect session", error);
        this.emit(base_["ADAPTER_EVENTS"].ERRORED, error);
        return reject(error);
      });
    });
  }

  async onConnectHandler(params) {
    if (!this.connector || !this.wcProvider) throw base_["WalletInitializationError"].notReady("Wallet adapter is not ready yet");
    if (!this.chainConfig) throw base_["WalletInitializationError"].invalidParams("Chain config is not set");
    const {
      chainId
    } = params;
    external_loglevel_default.a.debug("connected chainId", chainId);
    const connectedChainId = parseInt(chainId, Object(base_["isHexStrict"])(chainId) ? 16 : 10);

    if (connectedChainId !== parseInt(this.chainConfig.chainId, 16)) {
      // we need to create a new session since old session is already used and
      // user needs to login again with correct chain with new qr code.
      await this.createNewSession({
        forceNewSession: true
      });
      this.emit(base_["ADAPTER_EVENTS"].ERRORED, base_["WalletInitializationError"].fromCode(5000, "Not connected to correct chainId. Expected: ".concat(this.chainConfig.chainId, ", Current: ").concat(connectedChainId, ", Please switch to correct chain from wallet")));
      return;
    }

    await this.wcProvider.setupProvider(this.connector);
    this.subscribeEvents(this.connector);
    this.status = base_["ADAPTER_STATUS"].CONNECTED;
    this.emit(base_["ADAPTER_EVENTS"].CONNECTED, {
      adapter: base_["WALLET_ADAPTERS"].WALLET_CONNECT_V1,
      reconnected: this.rehydrated
    });
  }

  subscribeEvents(connector) {
    connector.on("session_update", async error => {
      if (error) {
        this.emit(base_["ADAPTER_EVENTS"].ERRORED, error);
      }
    });
  }

  getWalletConnectInstance() {
    const walletConnectOptions = this.adapterOptions.adapterSettings || {};
    walletConnectOptions.bridge = walletConnectOptions.bridge || "https://bridge.walletconnect.org"; // Create a connector

    return new client_default.a(walletConnectOptions);
  }

}


// CONCATENATED MODULE: ./src/index.ts



/***/ })
/******/ ]);
//# sourceMappingURL=walletConnectV1Adapter.cjs.js.map