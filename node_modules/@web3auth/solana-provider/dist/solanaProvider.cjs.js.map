{"version":3,"sources":["webpack://SolanaProvider/webpack/bootstrap","webpack://SolanaProvider/external \"eth-rpc-errors\"","webpack://SolanaProvider/external \"@toruslabs/openlogin-jrpc\"","webpack://SolanaProvider/external \"bs58\"","webpack://SolanaProvider/external \"@web3auth/base\"","webpack://SolanaProvider/external \"@babel/runtime/helpers/defineProperty\"","webpack://SolanaProvider/external \"@solana/web3.js\"","webpack://SolanaProvider/external \"@toruslabs/base-controllers\"","webpack://SolanaProvider/external \"@web3auth/base-provider\"","webpack://SolanaProvider/external \"@toruslabs/tweetnacl-js\"","webpack://SolanaProvider/./src/rpc/solanaRpcMiddlewares.ts","webpack://SolanaProvider/./src/providers/injectedProviders/injectedProviderProxy.ts","webpack://SolanaProvider/./src/providers/injectedProviders/phantom/providerHandlers.ts","webpack://SolanaProvider/./src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","webpack://SolanaProvider/./src/providers/injectedProviders/torus/providerHandlers.ts","webpack://SolanaProvider/./src/providers/injectedProviders/torus/torusInjectedProvider.ts","webpack://SolanaProvider/./src/providers/injectedProviders/index.ts","webpack://SolanaProvider/./src/rpc/JrpcClient.ts","webpack://SolanaProvider/./src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","webpack://SolanaProvider/./src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","webpack://SolanaProvider/./src/providers/index.ts","webpack://SolanaProvider/./src/solanaWallet.ts","webpack://SolanaProvider/./src/index.ts"],"names":["createGetAccountsMiddleware","getAccounts","createAsyncMiddleware","request","response","next","method","Error","accounts","result","undefined","createRequestAccountsMiddleware","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","mergeMiddleware","createChainSwitchMiddleware","addNewChainConfig","switchSolanaChain","createAccountMiddleware","updatePrivatekey","createInjectedProviderProxyMiddleware","provider","req","res","_next","getPhantomHandlers","injectedProvider","publicKey","bs58","encode","toBytes","ethErrors","rpc","methodNotSupported","message","decode","params","txn","Transaction","from","transaction","txRes","signature","length","invalidParams","txns","map","msg","decodedMsg","PhantomInjectedProvider","BaseProvider","constructor","config","state","chainConfig","chainNamespace","CHAIN_NAMESPACES","SOLANA","switchChain","_","Promise","resolve","setupProvider","solanaMiddleware","injectedProviderProxy","engine","JRPCEngine","push","providerFromEngine","updateProviderEngineProxy","lookupNetwork","update","chainId","getTorusHandlers","data","toString","buf","Buffer","sendTx","messages","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","custom","code","connectedChainId","connectedHexChainId","isHexStrict","parseInt","WalletInitializationError","rpcConnectionError","emit","on","configure","createChainIdMiddleware","end","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","getProviderHandlers","privKey","getProviderEngineProxy","transactionGenerator","serializedTx","decodedTx","tx","populate","Message","keyPairGenerator","Keypair","fromSecretKey","keyPair","toBase58","partialSign","signedMsg","nacl","sign","detached","secretKey","_providerEngineProxy","sig","serialize","signedTransactions","SolanaPrivateKeyProvider","enable","privateKey","bind","getChainSwitchMiddleware","getAccountMiddleware","updateAccount","existingKey","getChainConfig","health","chainSwitchHandlers","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","name","displayName","blockExplorer","chainSwitchMiddleware","accountHandlers","providerFactory","SolanaWallet","requireAllSignatures","signedTransaction","transactions","args"],"mappings":"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","file":"solanaProvider.cjs.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","module.exports = require(\"eth-rpc-errors\");","module.exports = require(\"@toruslabs/openlogin-jrpc\");","module.exports = require(\"bs58\");","module.exports = require(\"@web3auth/base\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@solana/web3.js\");","module.exports = require(\"@toruslabs/base-controllers\");","module.exports = require(\"@web3auth/base-provider\");","module.exports = require(\"@toruslabs/tweetnacl-js\");","import type { Transaction } from \"@solana/web3.js\";\nimport { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: string }>) => Promise<Transaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: string[] }>) => Promise<Transaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: string }>) => Promise<{ signature: string }>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey } = providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: string }, Transaction>(\"signTransaction\", signTransaction),\n    createGenericJRPCMiddleware<{ message: string }, { signature: string }>(\"signAndSendTransaction\", signAndSendTransaction),\n    createGenericJRPCMiddleware<{ message: string[] }, Transaction[]>(\"signAllTransactions\", signAllTransactions),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getPhantomHandlers = (injectedProvider: IPhantomWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: string }>): Promise<Transaction> => {\n      const message = bs58.decode(req.params.message);\n      const txn = Transaction.from(message);\n      const transaction = await injectedProvider.signTransaction(txn);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const message = await injectedProvider.request<Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: req.params?.message,\n        },\n      });\n      return message;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: string }>): Promise<{ signature: string }> => {\n      const message = bs58.decode(req.params.message);\n      const txn = Transaction.from(message);\n      const txRes = await injectedProvider.signAndSendTransaction(txn);\n      return { signature: txRes.signature };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: string[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txns = req.params.message.map((msg) => {\n        const decodedMsg = bs58.decode(msg);\n        return Transaction.from(decodedMsg);\n      });\n      const transaction = await injectedProvider.signAllTransactions(txns);\n      return transaction;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getPhantomHandlers } from \"./providerHandlers\";\n\nexport class PhantomInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, IPhantomWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: IPhantomWalletProvider): Promise<void> {\n    const providerHandlers = getPhantomHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork(injectedProvider);\n  }\n\n  protected async lookupNetwork(_: IPhantomWalletProvider): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n    // const genesisHash = await phantomProvider.request<string>({\n    //   method: \"getGenesisHash\",\n    //   params: [],\n    // });\n    // const { chainConfig } = this.config;\n    // if (!genesisHash) throw WalletInitializationError.rpcConnectionError(`Failed to connect with phantom wallet`);\n    // if (chainConfig.chainId !== genesisHash.substring(0, 32))\n    //   throw WalletInitializationError.invalidNetwork(\n    //     `Wallet is connected to wrong network,Please change your network to ${\n    //       SOLANA_NETWORKS[chainConfig.chainId] || chainConfig.displayName\n    //     } from phantom wallet extention.`\n    //   );\n    // return genesisHash.substring(0, 32);\n  }\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { InjectedProvider } from \"../interface\";\n\nexport const getTorusHandlers = (injectedProvider: InjectedProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_accounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const message = await injectedProvider.request<Uint8Array>({\n        method: \"sign_message\",\n        params: {\n          data: req.params?.message,\n        },\n      });\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: string }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = bs58.decode(req.params.message).toString(\"hex\");\n      const response = await injectedProvider.request<string>({\n        method: \"sign_transaction\",\n        params: { message },\n      });\n\n      const buf = Buffer.from(response, \"hex\");\n      const sendTx = Transaction.from(buf);\n      return sendTx;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: string }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = bs58.decode(req.params.message).toString(\"hex\");\n\n      const response = await injectedProvider.request<string>({\n        method: \"send_transaction\",\n        params: { message },\n      });\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: string[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const messages: string[] = [];\n      for (const transaction of req.params.message) {\n        const message = bs58.decode(transaction).toString(\"hex\");\n        messages.push(message);\n      }\n      const response = await injectedProvider.request<Transaction[]>({\n        method: \"sign_all_transactions\",\n        params: { message: messages },\n      });\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { InjectedProvider } from \"../interface\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, InjectedProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: InjectedProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: InjectedProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: InjectedProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","export * from \"./interface\";\nexport * from \"./phantom/phantomInjectedProvider\";\nexport * from \"./torus/torusInjectedProvider\";\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { chainId, rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { Keypair, Message, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const transactionGenerator = (serializedTx: string): Transaction => {\n    const decodedTx = bs58.decode(serializedTx);\n    const tx = Transaction.populate(Message.from(decodedTx));\n    return tx;\n  };\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n\n    signTransaction: async (req: JRPCRequest<{ message: string }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = transactionGenerator(req.params?.message as string);\n      transaction.partialSign(keyPair);\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: string }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = transactionGenerator(req.params?.message as string);\n      transaction.sign(keyPair);\n\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [bs58.encode(transaction.serialize())],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: string[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedTransactions: Transaction[] = [];\n      for (const tx of req.params?.message || []) {\n        const transaction = transactionGenerator(tx);\n        transaction.partialSign(keyPair);\n        signedTransactions.push(transaction);\n      }\n      return signedTransactions;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","export * from \"./injectedProviders\";\nexport * from \"./privateKeyProvider\";\n","import type { Transaction } from \"@solana/web3.js\";\nimport { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nimport { ISolanaWallet } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction(transaction: Transaction): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: bs58.encode(transaction.serialize({ requireAllSignatures: false })),\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const signedTransaction = (await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: bs58.encode(transaction.serialize({ requireAllSignatures: false })),\n      },\n    })) as Transaction;\n    return signedTransaction;\n  }\n\n  public async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const messages = transactions.map((transaction) => {\n      return bs58.encode(transaction.serialize({ requireAllSignatures: false }));\n    });\n    const signedTransaction = (await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: messages,\n      },\n    })) as Transaction[];\n    return signedTransaction;\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","export * from \"./interface\";\nexport * from \"./providers\";\nexport * from \"./solanaWallet\";\n"],"sourceRoot":""}