{"version":3,"sources":["webpack://EthereumProvider/webpack/bootstrap","webpack://EthereumProvider/external \"eth-rpc-errors\"","webpack://EthereumProvider/external \"@toruslabs/openlogin-jrpc\"","webpack://EthereumProvider/external \"loglevel\"","webpack://EthereumProvider/external \"@metamask/eth-sig-util\"","webpack://EthereumProvider/external \"@babel/runtime/helpers/defineProperty\"","webpack://EthereumProvider/external \"@web3auth/base\"","webpack://EthereumProvider/external \"@toruslabs/base-controllers\"","webpack://EthereumProvider/external \"@web3auth/base-provider\"","webpack://EthereumProvider/external \"@ethereumjs/common\"","webpack://EthereumProvider/external \"@ethereumjs/tx\"","webpack://EthereumProvider/external \"ethereumjs-util\"","webpack://EthereumProvider/./src/rpc/walletMidddleware.ts","webpack://EthereumProvider/./src/rpc/ethRpcMiddlewares.ts","webpack://EthereumProvider/./src/rpc/jrpcClient.ts","webpack://EthereumProvider/./src/providers/injectedProviders/walletConnectUtils.ts","webpack://EthereumProvider/./src/providers/injectedProviders/WalletConnectProvider.ts","webpack://EthereumProvider/./src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","webpack://EthereumProvider/./src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts","webpack://EthereumProvider/./src/providers/index.ts"],"names":["resemblesAddress","str","length","createWalletMiddleware","getAccounts","getPrivateKey","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","Error","validateAndNormalizeKeyholder","address","req","accounts","normalizedAccounts","map","_address","toLowerCase","normalizedAddress","includes","ethErrors","rpc","invalidParams","message","lookupAccounts","res","result","lookupDefaultAccount","sendTransaction","methodNotSupported","txParams","params","from","signTransaction","ethSign","extraParams","msgParams","data","signTypedData","version","signTypedDataV3","signTypedDataV4","personalSign","firstParam","secondParam","warning","encryptionPublicKey","decryptMessage","ciphertext","fetchPrivateKey","createScaffoldMiddleware","eth_accounts","createAsyncMiddleware","eth_private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","createEthMiddleware","providerHandlers","ethMiddleware","mergeMiddleware","eth_syncing","createChainSwitchMiddleware","addChain","switchChain","addNewChain","chainParams","undefined","chainId","rpcUrls","nativeCurrency","updateChain","wallet_addEthereumChain","wallet_switchEthereumChain","createAccountMiddleware","updatePrivatekey","updateAccount","accountParams","privateKey","wallet_updateAccount","createChainIdMiddleware","next","end","method","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","getProviderHandlers","connector","_","signMessage","signPersonalMessage","log","debug","WalletConnectProvider","BaseProvider","constructor","config","state","chainConfig","chainNamespace","CHAIN_NAMESPACES","EIP155","enable","provider","custom","code","setupProvider","_providerEngineProxy","request","onConnectorStateUpdate","setupEngine","currentChainConfig","getChainConfig","ticker","tickerName","update","Number","parseInt","name","symbol","networkId","rpcUrl","configure","lookupNetwork","connected","WalletLoginError","notConnectedError","connectedHexChainId","isHexStrict","toString","WalletInitializationError","rpcConnectionError","emit","engine","JRPCEngine","push","providerFromEngine","updateProviderEngineProxy","on","error","payload","connectedChainId","providerFactory","getCommonConfiguration","supportsEIP1559","displayName","hardfork","Hardfork","London","Berlin","customChainParams","Common","privKey","getProviderEngineProxy","privateToAddress","Buffer","providerEngineProxy","common","maxFeePerGas","maxPriorityFeePerGas","unsignedEthTx","TransactionFactory","fromTxData","signedTx","sign","serialize","txHash","rawMessageSig","privKeyBuffer","sig","SignTypedDataVersion","V1","V3","V4","info","getEncryptionPublicKey","stripped","stripHexPrefix","buff","decrypted","decrypt","encryptedData","JSON","parse","EthereumPrivateKeyProvider","bind","chainSwitchMiddleware","getChainSwitchMiddleware","getAccountMiddleware","existingKey","network","chainDisconnected","chainSwitchHandlers","chainName","blockExplorerUrls","blockExplorer","accountHandlers"],"mappings":"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","file":"ethereumProvider.cjs.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","module.exports = require(\"eth-rpc-errors\");","module.exports = require(\"@toruslabs/openlogin-jrpc\");","module.exports = require(\"loglevel\");","module.exports = require(\"@metamask/eth-sig-util\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@web3auth/base\");","module.exports = require(\"@toruslabs/base-controllers\");","module.exports = require(\"@web3auth/base-provider\");","module.exports = require(\"@ethereumjs/common\");","module.exports = require(\"@ethereumjs/tx\");","module.exports = require(\"ethereumjs-util\");","import type { AccessListEIP2930TxData, FeeMarketEIP1559TxData, TxData } from \"@ethereumjs/tx\";\nimport { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { createAsyncMiddleware, createScaffoldMiddleware, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nexport interface ExtendedAccessListEIP2930TxData extends AccessListEIP2930TxData {\n  from: string;\n}\n\nexport interface ExtendedFeeMarketEIP1559Transaction extends FeeMarketEIP1559TxData {\n  from: string;\n}\n\nexport interface ExtendedTxData extends TxData {\n  from: string;\n}\n\nexport type TransactionParams = ExtendedFeeMarketEIP1559Transaction & ExtendedAccessListEIP2930TxData & ExtendedTxData;\n\nexport interface MessageParams<T> {\n  from: string;\n  data: T;\n}\n\nexport interface TypedMessageParams<T> {\n  from: string;\n  version: string;\n  data: T;\n}\n\nfunction resemblesAddress(str: string): boolean {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nexport interface WalletMiddlewareOptions {\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  processDecryptMessage?: (msgParams: MessageParams<string>, req: JRPCRequest<unknown>) => string;\n  processEncryptionPublicKey?: (address: string, req: JRPCRequest<unknown>) => Promise<string>;\n  processEthSignMessage?: (msgParams: MessageParams<string>, req: JRPCRequest<unknown>) => Promise<string>;\n  processPersonalMessage?: (msgParams: MessageParams<string>, req: JRPCRequest<unknown>) => Promise<string>;\n  processTransaction?: (txParams: TransactionParams, req: JRPCRequest<unknown>) => Promise<string>;\n  processSignTransaction?: (txParams: TransactionParams, req: JRPCRequest<unknown>) => Promise<string>;\n  processTypedMessage?: (msgParams: MessageParams<TypedDataV1>, req: JRPCRequest<unknown>, version: string) => Promise<string>;\n  processTypedMessageV3?: (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, req: JRPCRequest<unknown>, version: string) => Promise<string>;\n  processTypedMessageV4?: (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, req: JRPCRequest<unknown>, version: string) => Promise<string>;\n}\n\nexport function createWalletMiddleware({\n  getAccounts,\n  getPrivateKey,\n  processDecryptMessage,\n  processEncryptionPublicKey,\n  processEthSignMessage,\n  processPersonalMessage,\n  processTransaction,\n  processSignTransaction,\n  processTypedMessage,\n  processTypedMessageV3,\n  processTypedMessageV4,\n}: WalletMiddlewareOptions): JRPCMiddleware<string, unknown> {\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  }\n\n  //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n  async function validateAndNormalizeKeyholder(address: string, req: JRPCRequest<unknown>): Promise<string> {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts: string[] = await getAccounts(req);\n      const normalizedAccounts: string[] = accounts.map((_address) => _address.toLowerCase());\n      const normalizedAddress: string = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n    throw ethErrors.rpc.invalidParams({\n      message: `Invalid parameters: must provide an Ethereum address.`,\n    });\n  }\n\n  //\n  // account lookups\n  //\n\n  async function lookupAccounts(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  }\n\n  //\n  // transaction signatures\n  //\n\n  async function sendTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processSignTransaction(txParams, req);\n  }\n\n  //\n  // message signatures\n  //\n\n  async function ethSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: string = (req.params as string[])[1];\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const message: TypedDataV1 = (req.params as TypedDataV1[])[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[1], req);\n    const version = \"V1\";\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<TypedDataV1> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V3\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V4\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    // process normally\n    const firstParam: string = (req.params as string[])[0];\n    const secondParam: string = (req.params as string[])[1];\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n\n    // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n    let address: string, message: string;\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      (res as any).warning = warning;\n\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    // eslint-disable-next-line require-atomic-updates\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[0], req);\n\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const ciphertext: string = (req.params as string)[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[1], req);\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: ciphertext,\n    };\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage),\n  });\n}\n","import {\n  createAsyncMiddleware,\n  createScaffoldMiddleware,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createWalletMiddleware, WalletMiddlewareOptions } from \"./walletMidddleware\";\n\nexport type IProviderHandlers = WalletMiddlewareOptions;\nexport function createEthMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage,\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([\n    createScaffoldMiddleware({\n      eth_syncing: false,\n    }),\n    createWalletMiddleware({\n      getAccounts,\n      getPrivateKey,\n      processTransaction,\n      processEthSignMessage,\n      processTypedMessage,\n      processTypedMessageV3,\n      processTypedMessageV4,\n      processPersonalMessage,\n      processEncryptionPublicKey,\n      processDecryptMessage,\n    }),\n  ]);\n  return ethMiddleware;\n}\n\nexport interface AddEthereumChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addChain: (params: AddEthereumChainParameter) => Promise<void>;\n  switchChain: (params: { chainId: string }) => Promise<void>;\n}\n\nexport function createChainSwitchMiddleware({ addChain, switchChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  async function addNewChain(req: JRPCRequest<AddEthereumChainParameter[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n\n    res.result = await addChain(chainParams);\n  }\n  async function updateChain(req: JRPCRequest<{ chainId: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain),\n  });\n}\n\n// #region account middlewares\nexport interface IAccountHandlers {\n  updatePrivatekey: (params: { privateKey: string }) => Promise<void>;\n}\n\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  async function updateAccount(req: JRPCRequest<{ privateKey: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const accountParams = req.params?.length ? req.params[0] : undefined;\n    if (!accountParams?.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount),\n  });\n}\n\n// #endregion account middlewares\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport type { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: CustomChainConfig): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<CustomChainConfig>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createJsonRpcClient(providerConfig: CustomChainConfig): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { chainId, rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector, ITxData } from \"@walletconnect/types\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport log from \"loglevel\";\n\nimport { IProviderHandlers } from \"../../rpc/ethRpcMiddlewares\";\nimport { MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/walletMidddleware\";\n\nexport function getProviderHandlers({ connector }: { connector: IConnector }): IProviderHandlers {\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async (_: JRPCRequest<unknown>) => {\n      const { accounts } = connector;\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.sendTransaction(txParams as ITxData);\n      return result;\n    },\n    processSignTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTransaction(txParams as ITxData);\n      return result;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async (_: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processTypedMessageV4: async (_: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processEncryptionPublicKey: async (_: string): Promise<string> => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: (_: MessageParams<string>): string => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n  };\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector } from \"@walletconnect/types\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, isHexStrict, WalletInitializationError, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./walletConnectUtils\";\n\nexport interface WalletConnectProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface WalletConnectProviderState extends BaseProviderState {\n  accounts: string[];\n}\n\nexport class WalletConnectProvider extends BaseProvider<BaseProviderConfig, WalletConnectProviderState, IConnector> {\n  private connector: IConnector | null = null;\n\n  constructor({ config, state, connector }: { config: WalletConnectProviderConfig; state?: BaseProviderState; connector?: IConnector }) {\n    super({\n      config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 } },\n      state: { ...(state || {}), chainId: \"loading\", accounts: [] },\n    });\n    this.connector = connector || null;\n  }\n\n  public static getProviderInstance = async (params: {\n    connector: IConnector;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<WalletConnectProvider> => {\n    const providerFactory = new WalletConnectProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.connector);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(connector: IConnector): Promise<void> {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  public async switchChain({ chainId }: { chainId: string }): Promise<void> {\n    const currentChainConfig = this.getChainConfig(chainId);\n    const { ticker, tickerName, rpcTarget } = currentChainConfig;\n    this.update({\n      chainId: \"loading\",\n    });\n    await this.connector.updateChain({\n      chainId: Number.parseInt(chainId, 16),\n      nativeCurrency: {\n        name: tickerName,\n        symbol: ticker,\n      },\n      networkId: Number.parseInt(chainId, 10),\n      rpcUrl: rpcTarget,\n    });\n    this.configure({ chainConfig: currentChainConfig });\n    await this.lookupNetwork(this.connector);\n  }\n\n  protected async lookupNetwork(connector: IConnector): Promise<string> {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : `0x${connector.chainId.toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n\n  private async setupEngine(connector: IConnector): Promise<void> {\n    const providerHandlers = getProviderHandlers({ connector });\n    this.update({\n      accounts: connector.accounts || [],\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork(connector);\n  }\n\n  private async onConnectorStateUpdate(connector: IConnector) {\n    connector.on(\"session_update\", async (error: Error | null, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n      const { accounts, chainId: connectedChainId, rpcUrl } = payload;\n      // Check if accounts changed and trigger event\n      if (accounts?.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts,\n        });\n        // await this.setupEngine(connector);\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n      const connectedHexChainId = isHexStrict(connectedChainId) ? connectedChainId : `0x${connectedChainId.toString(16)}`;\n      // Check if chainId changed and trigger event\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        // Handle rpcUrl update\n        this.configure({\n          chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId, rpcTarget: rpcUrl },\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n}\n","import Common, { Hardfork } from \"@ethereumjs/common\";\nimport { TransactionFactory } from \"@ethereumjs/tx\";\nimport {\n  decrypt,\n  EthEncryptedData,\n  getEncryptionPublicKey,\n  MessageTypes,\n  personalSign,\n  signTypedData,\n  SignTypedDataVersion,\n  TypedDataV1,\n  TypedMessage,\n} from \"@metamask/eth-sig-util\";\nimport { SafeEventEmitterProvider, signMessage } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { privateToAddress, stripHexPrefix } from \"ethereumjs-util\";\nimport log from \"loglevel\";\n\nimport { IProviderHandlers } from \"../../rpc/ethRpcMiddlewares\";\nimport { MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/walletMidddleware\";\n\nasync function getCommonConfiguration(supportsEIP1559: boolean, chainConfig: Partial<CustomChainConfig>) {\n  const { displayName: name, chainId } = chainConfig;\n  const hardfork = supportsEIP1559 ? Hardfork.London : Hardfork.Berlin;\n\n  const customChainParams = {\n    name,\n    chainId: chainId === \"loading\" ? 0 : parseInt(chainId, 16),\n    networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 10),\n    hardfork,\n  };\n\n  return Common.custom(customChainParams);\n}\n\nexport function getProviderHandlers({\n  privKey,\n  chainConfig,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  chainConfig: Partial<CustomChainConfig>;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): IProviderHandlers {\n  return {\n    getAccounts: async (_: JRPCRequest<unknown>) => [`0x${privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\")}`],\n    getPrivateKey: async (_: JRPCRequest<unknown>) => privKey,\n    processTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const common = await getCommonConfiguration(!!txParams.maxFeePerGas && !!txParams.maxPriorityFeePerGas, chainConfig);\n      const unsignedEthTx = TransactionFactory.fromTxData(txParams, { common });\n      const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n      const txHash = await providerEngineProxy.request<string[], string>({\n        method: \"eth_sendRawTransaction\",\n        params: [`0x${signedTx.toString(\"hex\")}`],\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const common = await getCommonConfiguration(!!txParams.maxFeePerGas && !!txParams.maxPriorityFeePerGas, chainConfig);\n      const unsignedEthTx = TransactionFactory.fromTxData(txParams, { common });\n      const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n      return `0x${signedTx.toString(\"hex\")}`;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({ privateKey: privKeyBuffer, data: msgParams.data });\n      return sig;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({ privateKey: privKeyBuffer, data: msgParams.data, version: SignTypedDataVersion.V1 });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({ privateKey: privKeyBuffer, data: msgParams.data, version: SignTypedDataVersion.V3 });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({ privateKey: privKeyBuffer, data: msgParams.data, version: SignTypedDataVersion.V4 });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address: string, _: JRPCRequest<unknown>): Promise<string> => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): string => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({ encryptedData: JSON.parse(buff.toString(\"utf8\")) as EthEncryptedData, privateKey: privKey });\n      return decrypted;\n    },\n  };\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport log from \"loglevel\";\n\nimport {\n  AddEthereumChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createEthMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/ethRpcMiddlewares\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./ethPrivatekeyUtils\";\n\nexport interface EthereumPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface EthereumPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class EthereumPrivateKeyProvider extends BaseProvider<BaseProviderConfig, EthereumPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: EthereumPrivKeyProviderConfig; state?: EthereumPrivKeyProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<EthereumPrivateKeyProvider> => {\n    const providerFactory = new EthereumPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = getProviderHandlers({\n      privKey,\n      chainConfig: this.config.chainConfig,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    // Not a partial anymore because of checks in ctor\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request<string[], string>({\n      method: \"net_version\",\n      params: [],\n    });\n\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(`Invalid network, net_version is: ${network}`);\n    log.debug(\"this provider\", this.provider, chainId, this.state.chainId);\n\n    if (this.state.chainId !== chainId) {\n      this.provider.emit(\"chainChanged\", chainId);\n      this.provider.emit(\"connect\", { chainId });\n    }\n    this.update({ chainId });\n    return network;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addChain: async (params: AddEthereumChainParameter): Promise<void> => {\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n        this.addChain({\n          chainNamespace: \"eip155\",\n          chainId,\n          ticker: nativeCurrency?.symbol || \"ETH\",\n          tickerName: nativeCurrency?.name || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchChain: async (params: { chainId: string }): Promise<void> => {\n        const { chainId } = params;\n        await this.switchChain({ chainId });\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (params: { privateKey: string }): Promise<void> => {\n        const { privateKey } = params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","export * from \"./injectedProviders\";\nexport * from \"./privateKeyProviders\";\n"],"sourceRoot":""}