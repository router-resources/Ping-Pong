import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { createFetchMiddleware, providerFromEngine, signMessage } from '@toruslabs/base-controllers';
import { createScaffoldMiddleware, createAsyncMiddleware, mergeMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';
import { CHAIN_NAMESPACES, WalletLoginError, isHexStrict, WalletInitializationError } from '@web3auth/base';
import { BaseProvider } from '@web3auth/base-provider';
import { ethErrors } from 'eth-rpc-errors';
import log from 'loglevel';
import Common, { Hardfork } from '@ethereumjs/common';
import { TransactionFactory } from '@ethereumjs/tx';
import { personalSign, signTypedData, SignTypedDataVersion, getEncryptionPublicKey, decrypt } from '@metamask/eth-sig-util';
import { privateToAddress, stripHexPrefix } from 'ethereumjs-util';

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function resemblesAddress(str) {
  // hex prefix 2 + 20 bytes
  return str.length === 2 + 20 * 2;
}

function createWalletMiddleware(_ref) {
  let {
    getAccounts,
    getPrivateKey,
    processDecryptMessage,
    processEncryptionPublicKey,
    processEthSignMessage,
    processPersonalMessage,
    processTransaction,
    processSignTransaction,
    processTypedMessage,
    processTypedMessageV3,
    processTypedMessageV4
  } = _ref;

  if (!getAccounts) {
    throw new Error("opts.getAccounts is required");
  } //
  // utility
  //

  /**
   * Validates the keyholder address, and returns a normalized (i.e. lowercase)
   * copy of it.
   *
   * an error
   */


  async function validateAndNormalizeKeyholder(address, req) {
    if (typeof address === "string" && address.length > 0) {
      // ensure address is included in provided accounts
      const accounts = await getAccounts(req);
      const normalizedAccounts = accounts.map(_address => _address.toLowerCase());
      const normalizedAddress = address.toLowerCase();

      if (normalizedAccounts.includes(normalizedAddress)) {
        return normalizedAddress;
      }
    }

    throw ethErrors.rpc.invalidParams({
      message: "Invalid parameters: must provide an Ethereum address."
    });
  } //
  // account lookups
  //


  async function lookupAccounts(req, res) {
    res.result = await getAccounts(req);
  }

  async function lookupDefaultAccount(req, res) {
    const accounts = await getAccounts(req);
    res.result = accounts[0] || null;
  } //
  // transaction signatures
  //


  async function sendTransaction(req, res) {
    if (!processTransaction) {
      throw ethErrors.rpc.methodNotSupported();
    }

    const txParams = req.params[0] || {
      from: ""
    };
    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);
    res.result = await processTransaction(txParams, req);
  }

  async function signTransaction(req, res) {
    if (!processSignTransaction) {
      throw ethErrors.rpc.methodNotSupported();
    }

    const txParams = req.params[0] || {
      from: ""
    };
    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);
    res.result = await processSignTransaction(txParams, req);
  } //
  // message signatures
  //


  async function ethSign(req, res) {
    if (!processEthSignMessage) {
      throw ethErrors.rpc.methodNotSupported();
    }

    const address = await validateAndNormalizeKeyholder(req.params[0], req);
    const message = req.params[1];
    const extraParams = req.params[2] || {};

    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {
      from: address,
      data: message
    });

    res.result = await processEthSignMessage(msgParams, req);
  }

  async function signTypedData(req, res) {
    if (!processTypedMessage) {
      throw ethErrors.rpc.methodNotSupported();
    }

    const message = req.params[0];
    const address = await validateAndNormalizeKeyholder(req.params[1], req);
    const version = "V1";
    const extraParams = req.params[2] || {};

    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {
      from: address,
      data: message
    });

    res.result = await processTypedMessage(msgParams, req, version);
  }

  async function signTypedDataV3(req, res) {
    if (!processTypedMessageV3) {
      throw ethErrors.rpc.methodNotSupported();
    }

    const address = await validateAndNormalizeKeyholder(req.params[0], req);
    const message = req.params[1];
    const version = "V3";
    const msgParams = {
      data: message,
      from: address,
      version
    };
    res.result = await processTypedMessageV3(msgParams, req, version);
  }

  async function signTypedDataV4(req, res) {
    if (!processTypedMessageV4) {
      throw ethErrors.rpc.methodNotSupported();
    }

    const address = await validateAndNormalizeKeyholder(req.params[0], req);
    const message = req.params[1];
    const version = "V4";
    const msgParams = {
      data: message,
      from: address,
      version
    };
    res.result = await processTypedMessageV4(msgParams, req, version);
  }

  async function personalSign(req, res) {
    if (!processPersonalMessage) {
      throw ethErrors.rpc.methodNotSupported();
    } // process normally


    const firstParam = req.params[0];
    const secondParam = req.params[1]; // non-standard "extraParams" to be appended to our "msgParams" obj

    const extraParams = req.params[2] || {}; // We initially incorrectly ordered these parameters.
    // To gracefully respect users who adopted this API early,
    // we are currently gracefully recovering from the wrong param order
    // when it is clearly identifiable.
    //
    // That means when the first param is definitely an address,
    // and the second param is definitely not, but is hex.

    let address, message;

    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {
      let warning = "The eth_personalSign method requires params ordered ";
      warning += "[message, address]. This was previously handled incorrectly, ";
      warning += "and has been corrected automatically. ";
      warning += "Please switch this param order for smooth behavior in the future.";
      res.warning = warning;
      address = firstParam;
      message = secondParam;
    } else {
      message = firstParam;
      address = secondParam;
    }

    address = await validateAndNormalizeKeyholder(address, req);

    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {
      from: address,
      data: message
    }); // eslint-disable-next-line require-atomic-updates


    res.result = await processPersonalMessage(msgParams, req);
  }

  async function encryptionPublicKey(req, res) {
    if (!processEncryptionPublicKey) {
      throw ethErrors.rpc.methodNotSupported();
    }

    const address = await validateAndNormalizeKeyholder(req.params[0], req);
    res.result = await processEncryptionPublicKey(address, req);
  }

  async function decryptMessage(req, res) {
    if (!processDecryptMessage) {
      throw ethErrors.rpc.methodNotSupported();
    }

    const ciphertext = req.params[0];
    const address = await validateAndNormalizeKeyholder(req.params[1], req);
    const extraParams = req.params[2] || {};

    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {
      from: address,
      data: ciphertext
    });

    res.result = processDecryptMessage(msgParams, req);
  }

  async function fetchPrivateKey(req, res) {
    if (!getPrivateKey) {
      throw ethErrors.rpc.methodNotSupported();
    }

    res.result = getPrivateKey(req);
  }

  return createScaffoldMiddleware({
    // account lookups
    eth_accounts: createAsyncMiddleware(lookupAccounts),
    eth_private_key: createAsyncMiddleware(fetchPrivateKey),
    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),
    // tx signatures
    eth_sendTransaction: createAsyncMiddleware(sendTransaction),
    eth_signTransaction: createAsyncMiddleware(signTransaction),
    // message signatures
    eth_sign: createAsyncMiddleware(ethSign),
    eth_signTypedData: createAsyncMiddleware(signTypedData),
    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),
    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),
    personal_sign: createAsyncMiddleware(personalSign),
    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),
    eth_decrypt: createAsyncMiddleware(decryptMessage)
  });
}

function createEthMiddleware(providerHandlers) {
  const {
    getAccounts,
    getPrivateKey,
    processTransaction,
    processEthSignMessage,
    processTypedMessage,
    processTypedMessageV3,
    processTypedMessageV4,
    processPersonalMessage,
    processEncryptionPublicKey,
    processDecryptMessage
  } = providerHandlers;
  const ethMiddleware = mergeMiddleware([createScaffoldMiddleware({
    eth_syncing: false
  }), createWalletMiddleware({
    getAccounts,
    getPrivateKey,
    processTransaction,
    processEthSignMessage,
    processTypedMessage,
    processTypedMessageV3,
    processTypedMessageV4,
    processPersonalMessage,
    processEncryptionPublicKey,
    processDecryptMessage
  })]);
  return ethMiddleware;
}
function createChainSwitchMiddleware(_ref) {
  let {
    addChain,
    switchChain
  } = _ref;

  async function addNewChain(req, res) {
    var _req$params;

    const chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;
    if (!chainParams) throw ethErrors.rpc.invalidParams("Missing chain params");
    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams("Missing chainId in chainParams");
    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams("Missing rpcUrls in chainParams");
    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams("Missing nativeCurrency in chainParams");
    res.result = await addChain(chainParams);
  }

  async function updateChain(req, res) {
    var _req$params2;

    const chainParams = (_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.length ? req.params[0] : undefined;
    if (!chainParams) throw ethErrors.rpc.invalidParams("Missing chainId");
    res.result = await switchChain(chainParams);
  }

  return createScaffoldMiddleware({
    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),
    wallet_switchEthereumChain: createAsyncMiddleware(updateChain)
  });
}
function createAccountMiddleware(_ref2) {
  let {
    updatePrivatekey
  } = _ref2;

  async function updateAccount(req, res) {
    var _req$params3;

    const accountParams = (_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.length ? req.params[0] : undefined;
    if (!(accountParams !== null && accountParams !== void 0 && accountParams.privateKey)) throw ethErrors.rpc.invalidParams("Missing privateKey");
    res.result = await updatePrivatekey(accountParams);
  }

  return createScaffoldMiddleware({
    wallet_updateAccount: createAsyncMiddleware(updateAccount)
  });
} // #endregion account middlewares

function createChainIdMiddleware(chainId) {
  return (req, res, next, end) => {
    if (req.method === "eth_chainId") {
      res.result = chainId;
      return end();
    }

    return next();
  };
}
function createProviderConfigMiddleware(providerConfig) {
  return (req, res, next, end) => {
    if (req.method === "eth_provider_config") {
      res.result = providerConfig;
      return end();
    }

    return next();
  };
}
function createJsonRpcClient(providerConfig) {
  const {
    chainId,
    rpcTarget
  } = providerConfig;
  const fetchMiddleware = createFetchMiddleware({
    rpcTarget
  });
  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);
  return {
    networkMiddleware,
    fetchMiddleware
  };
}

function getProviderHandlers$1(_ref) {
  let {
    connector
  } = _ref;
  return {
    getPrivateKey: async () => {
      throw ethErrors.rpc.methodNotSupported();
    },
    getAccounts: async _ => {
      const {
        accounts
      } = connector;

      if (accounts && accounts.length) {
        return accounts;
      }

      throw new Error("Failed to get accounts");
    },
    processTransaction: async (txParams, _) => {
      const result = await connector.sendTransaction(txParams);
      return result;
    },
    processSignTransaction: async (txParams, _) => {
      const result = await connector.signTransaction(txParams);
      return result;
    },
    processEthSignMessage: async (msgParams, _) => {
      const result = await connector.signMessage([msgParams.from, msgParams.data]);
      return result;
    },
    processPersonalMessage: async (msgParams, _) => {
      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);
      return result;
    },
    processTypedMessage: async (msgParams, _) => {
      log.debug("processTypedMessage", msgParams);
      const result = await connector.signTypedData([msgParams.from, msgParams.data]);
      return result;
    },
    processTypedMessageV3: async _ => {
      throw ethErrors.rpc.methodNotSupported();
    },
    processTypedMessageV4: async _ => {
      throw ethErrors.rpc.methodNotSupported();
    },
    processEncryptionPublicKey: async _ => {
      throw ethErrors.rpc.methodNotSupported();
    },
    processDecryptMessage: _ => {
      throw ethErrors.rpc.methodNotSupported();
    }
  };
}

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class WalletConnectProvider extends BaseProvider {
  constructor(_ref) {
    let {
      config,
      state,
      connector
    } = _ref;
    super({
      config: {
        chainConfig: _objectSpread$1(_objectSpread$1({}, config.chainConfig), {}, {
          chainNamespace: CHAIN_NAMESPACES.EIP155
        })
      },
      state: _objectSpread$1(_objectSpread$1({}, state || {}), {}, {
        chainId: "loading",
        accounts: []
      })
    });

    _defineProperty(this, "connector", null);

    this.connector = connector || null;
  }

  async enable() {
    if (!this.connector) throw ethErrors.provider.custom({
      message: "Connector is not initialized, pass wallet connect connector in constructor",
      code: 4902
    });
    await this.setupProvider(this.connector);
    return this._providerEngineProxy.request({
      method: "eth_accounts"
    });
  }

  async setupProvider(connector) {
    this.onConnectorStateUpdate(connector);
    await this.setupEngine(connector);
  }

  async switchChain(_ref2) {
    let {
      chainId
    } = _ref2;
    const currentChainConfig = this.getChainConfig(chainId);
    const {
      ticker,
      tickerName,
      rpcTarget
    } = currentChainConfig;
    this.update({
      chainId: "loading"
    });
    await this.connector.updateChain({
      chainId: Number.parseInt(chainId, 16),
      nativeCurrency: {
        name: tickerName,
        symbol: ticker
      },
      networkId: Number.parseInt(chainId, 10),
      rpcUrl: rpcTarget
    });
    this.configure({
      chainConfig: currentChainConfig
    });
    await this.lookupNetwork(this.connector);
  }

  async lookupNetwork(connector) {
    if (!connector.connected) throw WalletLoginError.notConnectedError("Wallet connect connector is not connected");
    if (!this.provider) throw ethErrors.provider.custom({
      message: "Provider is not initialized",
      code: 4902
    });
    const {
      chainId
    } = this.config.chainConfig;
    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : "0x".concat(connector.chainId.toString(16));
    if (chainId !== connectedHexChainId) throw WalletInitializationError.rpcConnectionError("Invalid network, net_version is: ".concat(connectedHexChainId, ", expected: ").concat(chainId));
    this.update({
      chainId: connectedHexChainId
    });
    this.provider.emit("connect", {
      chainId
    });
    this.provider.emit("chainChanged", this.state.chainId);
    return connectedHexChainId;
  }

  async setupEngine(connector) {
    const providerHandlers = getProviderHandlers$1({
      connector
    });
    this.update({
      accounts: connector.accounts || []
    });
    const ethMiddleware = createEthMiddleware(providerHandlers);
    const engine = new JRPCEngine();
    const {
      networkMiddleware
    } = createJsonRpcClient(this.config.chainConfig);
    engine.push(ethMiddleware);
    engine.push(networkMiddleware);
    const provider = providerFromEngine(engine);
    this.updateProviderEngineProxy(provider);
    await this.lookupNetwork(connector);
  }

  async onConnectorStateUpdate(connector) {
    connector.on("session_update", async (error, payload) => {
      if (!this.provider) throw WalletLoginError.notConnectedError("Wallet connect connector is not connected");

      if (error) {
        this.provider.emit("error", error);
        return;
      }

      const {
        accounts,
        chainId: connectedChainId,
        rpcUrl
      } = payload; // Check if accounts changed and trigger event

      if (accounts !== null && accounts !== void 0 && accounts.length && this.state.accounts[0] !== accounts[0]) {
        this.update({
          accounts
        }); // await this.setupEngine(connector);

        this.provider.emit("accountsChanged", accounts);
      }

      const connectedHexChainId = isHexStrict(connectedChainId) ? connectedChainId : "0x".concat(connectedChainId.toString(16)); // Check if chainId changed and trigger event

      if (connectedChainId && this.state.chainId !== connectedHexChainId) {
        // Handle rpcUrl update
        this.configure({
          chainConfig: _objectSpread$1(_objectSpread$1({}, this.config.chainConfig), {}, {
            chainId: connectedHexChainId,
            rpcTarget: rpcUrl
          })
        });
        await this.setupEngine(connector);
      }
    });
  }

}

_defineProperty(WalletConnectProvider, "getProviderInstance", async params => {
  const providerFactory = new WalletConnectProvider({
    config: {
      chainConfig: params.chainConfig
    }
  });
  await providerFactory.setupProvider(params.connector);
  return providerFactory;
});

async function getCommonConfiguration(supportsEIP1559, chainConfig) {
  const {
    displayName: name,
    chainId
  } = chainConfig;
  const hardfork = supportsEIP1559 ? Hardfork.London : Hardfork.Berlin;
  const customChainParams = {
    name,
    chainId: chainId === "loading" ? 0 : parseInt(chainId, 16),
    networkId: chainId === "loading" ? 0 : Number.parseInt(chainId, 10),
    hardfork
  };
  return Common.custom(customChainParams);
}

function getProviderHandlers(_ref) {
  let {
    privKey,
    chainConfig,
    getProviderEngineProxy
  } = _ref;
  return {
    getAccounts: async _ => ["0x".concat(privateToAddress(Buffer.from(privKey, "hex")).toString("hex"))],
    getPrivateKey: async _ => privKey,
    processTransaction: async (txParams, _) => {
      const providerEngineProxy = getProviderEngineProxy();
      if (!providerEngineProxy) throw ethErrors.provider.custom({
        message: "Provider is not initialized",
        code: 4902
      });
      const common = await getCommonConfiguration(!!txParams.maxFeePerGas && !!txParams.maxPriorityFeePerGas, chainConfig);
      const unsignedEthTx = TransactionFactory.fromTxData(txParams, {
        common
      });
      const signedTx = unsignedEthTx.sign(Buffer.from(privKey, "hex")).serialize();
      const txHash = await providerEngineProxy.request({
        method: "eth_sendRawTransaction",
        params: ["0x".concat(signedTx.toString("hex"))]
      });
      return txHash;
    },
    processSignTransaction: async (txParams, _) => {
      const common = await getCommonConfiguration(!!txParams.maxFeePerGas && !!txParams.maxPriorityFeePerGas, chainConfig);
      const unsignedEthTx = TransactionFactory.fromTxData(txParams, {
        common
      });
      const signedTx = unsignedEthTx.sign(Buffer.from(privKey, "hex")).serialize();
      return "0x".concat(signedTx.toString("hex"));
    },
    processEthSignMessage: async (msgParams, _) => {
      const rawMessageSig = signMessage(privKey, msgParams.data);
      return rawMessageSig;
    },
    processPersonalMessage: async (msgParams, _) => {
      const privKeyBuffer = Buffer.from(privKey, "hex");
      const sig = personalSign({
        privateKey: privKeyBuffer,
        data: msgParams.data
      });
      return sig;
    },
    processTypedMessage: async (msgParams, _) => {
      log.debug("processTypedMessage", msgParams);
      const privKeyBuffer = Buffer.from(privKey, "hex");
      const sig = signTypedData({
        privateKey: privKeyBuffer,
        data: msgParams.data,
        version: SignTypedDataVersion.V1
      });
      return sig;
    },
    processTypedMessageV3: async (msgParams, _) => {
      log.debug("processTypedMessageV3", msgParams);
      const privKeyBuffer = Buffer.from(privKey, "hex");
      const sig = signTypedData({
        privateKey: privKeyBuffer,
        data: msgParams.data,
        version: SignTypedDataVersion.V3
      });
      return sig;
    },
    processTypedMessageV4: async (msgParams, _) => {
      log.debug("processTypedMessageV4", msgParams);
      const privKeyBuffer = Buffer.from(privKey, "hex");
      const sig = signTypedData({
        privateKey: privKeyBuffer,
        data: msgParams.data,
        version: SignTypedDataVersion.V4
      });
      return sig;
    },
    processEncryptionPublicKey: async (address, _) => {
      log.info("processEncryptionPublicKey", address);
      return getEncryptionPublicKey(privKey);
    },
    processDecryptMessage: (msgParams, _) => {
      log.info("processDecryptMessage", msgParams);
      const stripped = stripHexPrefix(msgParams.data);
      const buff = Buffer.from(stripped, "hex");
      const decrypted = decrypt({
        encryptedData: JSON.parse(buff.toString("utf8")),
        privateKey: privKey
      });
      return decrypted;
    }
  };
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class EthereumPrivateKeyProvider extends BaseProvider {
  constructor(_ref) {
    let {
      config,
      state
    } = _ref;
    super({
      config: {
        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {
          chainNamespace: CHAIN_NAMESPACES.EIP155
        })
      },
      state
    });
  }

  async enable() {
    if (!this.state.privateKey) throw ethErrors.provider.custom({
      message: "Private key is not found in state, plz pass it in constructor state param",
      code: 4902
    });
    await this.setupProvider(this.state.privateKey);
    return this._providerEngineProxy.request({
      method: "eth_accounts"
    });
  }

  async setupProvider(privKey) {
    const providerHandlers = getProviderHandlers({
      privKey,
      chainConfig: this.config.chainConfig,
      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)
    });
    const ethMiddleware = createEthMiddleware(providerHandlers);
    const chainSwitchMiddleware = this.getChainSwitchMiddleware();
    const engine = new JRPCEngine(); // Not a partial anymore because of checks in ctor

    const {
      networkMiddleware
    } = createJsonRpcClient(this.config.chainConfig);
    engine.push(ethMiddleware);
    engine.push(chainSwitchMiddleware);
    engine.push(this.getAccountMiddleware());
    engine.push(networkMiddleware);
    const provider = providerFromEngine(engine);
    this.updateProviderEngineProxy(provider);
    await this.lookupNetwork();
  }

  async updateAccount(params) {
    if (!this._providerEngineProxy) throw ethErrors.provider.custom({
      message: "Provider is not initialized",
      code: 4902
    });
    const existingKey = await this._providerEngineProxy.request({
      method: "eth_private_key"
    });

    if (existingKey !== params.privateKey) {
      await this.setupProvider(params.privateKey);

      this._providerEngineProxy.emit("accountsChanged", {
        accounts: await this._providerEngineProxy.request({
          method: "eth_accounts"
        })
      });
    }
  }

  async switchChain(params) {
    if (!this._providerEngineProxy) throw ethErrors.provider.custom({
      message: "Provider is not initialized",
      code: 4902
    });
    const chainConfig = this.getChainConfig(params.chainId);
    this.update({
      chainId: "loading"
    });
    this.configure({
      chainConfig
    });
    const privKey = await this._providerEngineProxy.request({
      method: "eth_private_key"
    });
    await this.setupProvider(privKey);
  }

  async lookupNetwork() {
    if (!this.provider) throw ethErrors.provider.custom({
      message: "Provider is not initialized",
      code: 4902
    });
    const {
      chainId
    } = this.config.chainConfig;
    if (!chainId) throw ethErrors.rpc.invalidParams("chainId is required while lookupNetwork");
    const network = await this._providerEngineProxy.request({
      method: "net_version",
      params: []
    });
    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected("Invalid network, net_version is: ".concat(network));
    log.debug("this provider", this.provider, chainId, this.state.chainId);

    if (this.state.chainId !== chainId) {
      this.provider.emit("chainChanged", chainId);
      this.provider.emit("connect", {
        chainId
      });
    }

    this.update({
      chainId
    });
    return network;
  }

  getChainSwitchMiddleware() {
    const chainSwitchHandlers = {
      addChain: async params => {
        const {
          chainId,
          chainName,
          rpcUrls,
          blockExplorerUrls,
          nativeCurrency
        } = params;
        this.addChain({
          chainNamespace: "eip155",
          chainId,
          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || "ETH",
          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || "Ether",
          displayName: chainName,
          rpcTarget: rpcUrls[0],
          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || ""
        });
      },
      switchChain: async params => {
        const {
          chainId
        } = params;
        await this.switchChain({
          chainId
        });
      }
    };
    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);
    return chainSwitchMiddleware;
  }

  getAccountMiddleware() {
    const accountHandlers = {
      updatePrivatekey: async params => {
        const {
          privateKey
        } = params;
        await this.updateAccount({
          privateKey
        });
      }
    };
    return createAccountMiddleware(accountHandlers);
  }

}

_defineProperty(EthereumPrivateKeyProvider, "getProviderInstance", async params => {
  const providerFactory = new EthereumPrivateKeyProvider({
    config: {
      chainConfig: params.chainConfig
    }
  });
  await providerFactory.setupProvider(params.privKey);
  return providerFactory;
});

export { EthereumPrivateKeyProvider, WalletConnectProvider };
//# sourceMappingURL=ethereumProvider.esm.js.map
