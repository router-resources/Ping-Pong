module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("@web3auth/base");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/defineProperty");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("@metamask/detect-provider");

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "MetamaskAdapter", function() { return /* reexport */ metamaskAdapter_MetamaskAdapter; });

// EXTERNAL MODULE: external "@babel/runtime/helpers/defineProperty"
var defineProperty_ = __webpack_require__(1);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_);

// EXTERNAL MODULE: external "@metamask/detect-provider"
var detect_provider_ = __webpack_require__(2);
var detect_provider_default = /*#__PURE__*/__webpack_require__.n(detect_provider_);

// EXTERNAL MODULE: external "@web3auth/base"
var base_ = __webpack_require__(0);

// CONCATENATED MODULE: ./src/metamaskAdapter.ts




class metamaskAdapter_MetamaskAdapter extends base_["BaseAdapter"] {
  constructor() {
    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super();

    defineProperty_default()(this, "adapterNamespace", base_["ADAPTER_NAMESPACES"].EIP155);

    defineProperty_default()(this, "currentChainNamespace", base_["CHAIN_NAMESPACES"].EIP155);

    defineProperty_default()(this, "type", base_["ADAPTER_CATEGORY"].EXTERNAL);

    defineProperty_default()(this, "name", base_["WALLET_ADAPTERS"].METAMASK);

    defineProperty_default()(this, "status", base_["ADAPTER_STATUS"].NOT_READY);

    defineProperty_default()(this, "rehydrated", false);

    defineProperty_default()(this, "metamaskProvider", null);

    this.chainConfig = adapterOptions.chainConfig || null;
  }

  get provider() {
    if (this.status === base_["ADAPTER_STATUS"].CONNECTED && this.metamaskProvider) {
      return this.metamaskProvider;
    }

    return null;
  }

  set provider(_) {
    throw new Error("Not implemented");
  }

  async init(options) {
    super.checkInitializationRequirements();
    this.metamaskProvider = await detect_provider_default()({
      mustBeMetaMask: true
    });
    if (!this.metamaskProvider) throw base_["WalletInitializationError"].notInstalled("Metamask extension is not installed");
    this.status = base_["ADAPTER_STATUS"].READY;
    this.emit(base_["ADAPTER_EVENTS"].READY, base_["WALLET_ADAPTERS"].METAMASK);

    try {
      if (options.autoConnect) {
        this.rehydrated = true;
        await this.connect();
      }
    } catch (error) {
      this.emit(base_["ADAPTER_EVENTS"].ERRORED, error);
    }
  }

  setAdapterSettings(_) {}

  async connect() {
    super.checkConnectionRequirements(); // set default to mainnet

    if (!this.chainConfig) this.chainConfig = Object(base_["getChainConfig"])(base_["CHAIN_NAMESPACES"].EIP155, 1);
    this.status = base_["ADAPTER_STATUS"].CONNECTING;
    this.emit(base_["ADAPTER_EVENTS"].CONNECTING, {
      adapter: base_["WALLET_ADAPTERS"].METAMASK
    });
    if (!this.metamaskProvider) throw base_["WalletLoginError"].notConnectedError("Not able to connect with metamask");

    try {
      await this.metamaskProvider.request({
        method: "eth_requestAccounts"
      });
      const {
        chainId
      } = this.metamaskProvider;

      if (chainId !== this.chainConfig.chainId) {
        await this.switchChain(this.chainConfig);
      }

      this.status = base_["ADAPTER_STATUS"].CONNECTED;
      if (!this.provider) throw base_["WalletLoginError"].notConnectedError("Failed to connect with provider");
      this.provider.once("disconnect", () => {
        // ready to be connected again
        this.disconnect();
      });
      this.emit(base_["ADAPTER_EVENTS"].CONNECTED, {
        adapter: base_["WALLET_ADAPTERS"].METAMASK,
        reconnected: this.rehydrated
      });
      return this.provider;
    } catch (error) {
      // ready again to be connected
      this.status = base_["ADAPTER_STATUS"].READY;
      this.rehydrated = false;
      this.emit(base_["ADAPTER_EVENTS"].ERRORED, error);
      throw base_["WalletLoginError"].connectionError("Failed to login with metamask wallet");
    }
  }

  async disconnect() {
    var _this$provider;

    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      cleanup: false
    };
    if (this.status !== base_["ADAPTER_STATUS"].CONNECTED) throw base_["WalletLoginError"].disconnectionError("Not connected with wallet");
    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();

    if (options.cleanup) {
      this.status = base_["ADAPTER_STATUS"].NOT_READY;
      this.metamaskProvider = null;
    } else {
      // ready to be connected again
      this.status = base_["ADAPTER_STATUS"].READY;
    }

    this.rehydrated = false;
    this.emit(base_["ADAPTER_EVENTS"].DISCONNECTED);
  }

  async getUserInfo() {
    if (this.status !== base_["ADAPTER_STATUS"].CONNECTED) throw base_["WalletLoginError"].notConnectedError("Not connected with wallet, Please login/connect first");
    return {};
  }

  async switchChain(chainConfig) {
    if (!this.metamaskProvider) throw base_["WalletLoginError"].notConnectedError("Not connected with wallet");

    try {
      await this.metamaskProvider.request({
        method: "wallet_switchEthereumChain",
        params: [{
          chainId: chainConfig.chainId
        }]
      });
    } catch (switchError) {
      // This error code indicates that the chain has not been added to MetaMask.
      if (switchError.code === 4902) {
        await this.metamaskProvider.request({
          method: "wallet_addEthereumChain",
          params: [{
            chainId: chainConfig.chainId,
            chainName: chainConfig.displayName,
            rpcUrls: [chainConfig.rpcTarget]
          }]
        });
      } else {
        throw switchError;
      }
    }
  }

}


// CONCATENATED MODULE: ./src/index.ts


/***/ })
/******/ ]);
//# sourceMappingURL=metamaskAdapter.cjs.js.map