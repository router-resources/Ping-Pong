{"ast":null,"code":"var BufferUtil = require('../utils/buffer');\nvar Polynomial = require('./polynomial');\nvar Buffer = require('buffer').Buffer;\nfunction ReedSolomonEncoder(degree) {\n  this.genPoly = undefined;\n  this.degree = degree;\n  if (this.degree) this.initialize(this.degree);\n}\n\n/**\n * Initialize the encoder.\n * The input param should correspond to the number of error correction codewords.\n *\n * @param  {Number} degree\n */\nReedSolomonEncoder.prototype.initialize = function initialize(degree) {\n  // create an irreducible generator polynomial\n  this.degree = degree;\n  this.genPoly = Polynomial.generateECPolynomial(this.degree);\n};\n\n/**\n * Encodes a chunk of data\n *\n * @param  {Buffer} data Buffer containing input data\n * @return {Buffer}      Buffer containing encoded data\n */\nReedSolomonEncoder.prototype.encode = function encode(data) {\n  if (!this.genPoly) {\n    throw new Error('Encoder not initialized');\n  }\n\n  // Calculate EC for this data block\n  // extends data size to data+genPoly size\n  var pad = BufferUtil.alloc(this.degree);\n  var paddedData = Buffer.concat([data, pad], data.length + this.degree);\n\n  // The error correction codewords are the remainder after dividing the data codewords\n  // by a generator polynomial\n  var remainder = Polynomial.mod(paddedData, this.genPoly);\n\n  // return EC data blocks (last n byte, where n is the degree of genPoly)\n  // If coefficients number in remainder are less than genPoly degree,\n  // pad with 0s to the left to reach the needed number of coefficients\n  var start = this.degree - remainder.length;\n  if (start > 0) {\n    var buff = BufferUtil.alloc(this.degree);\n    remainder.copy(buff, start);\n    return buff;\n  }\n  return remainder;\n};\nmodule.exports = ReedSolomonEncoder;","map":{"version":3,"names":["BufferUtil","require","Polynomial","Buffer","ReedSolomonEncoder","degree","genPoly","undefined","initialize","prototype","generateECPolynomial","encode","data","Error","pad","alloc","paddedData","concat","length","remainder","mod","start","buff","copy","module","exports"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/qrcode/lib/core/reed-solomon-encoder.js"],"sourcesContent":["var BufferUtil = require('../utils/buffer')\nvar Polynomial = require('./polynomial')\nvar Buffer = require('buffer').Buffer\n\nfunction ReedSolomonEncoder (degree) {\n  this.genPoly = undefined\n  this.degree = degree\n\n  if (this.degree) this.initialize(this.degree)\n}\n\n/**\n * Initialize the encoder.\n * The input param should correspond to the number of error correction codewords.\n *\n * @param  {Number} degree\n */\nReedSolomonEncoder.prototype.initialize = function initialize (degree) {\n  // create an irreducible generator polynomial\n  this.degree = degree\n  this.genPoly = Polynomial.generateECPolynomial(this.degree)\n}\n\n/**\n * Encodes a chunk of data\n *\n * @param  {Buffer} data Buffer containing input data\n * @return {Buffer}      Buffer containing encoded data\n */\nReedSolomonEncoder.prototype.encode = function encode (data) {\n  if (!this.genPoly) {\n    throw new Error('Encoder not initialized')\n  }\n\n  // Calculate EC for this data block\n  // extends data size to data+genPoly size\n  var pad = BufferUtil.alloc(this.degree)\n  var paddedData = Buffer.concat([data, pad], data.length + this.degree)\n\n  // The error correction codewords are the remainder after dividing the data codewords\n  // by a generator polynomial\n  var remainder = Polynomial.mod(paddedData, this.genPoly)\n\n  // return EC data blocks (last n byte, where n is the degree of genPoly)\n  // If coefficients number in remainder are less than genPoly degree,\n  // pad with 0s to the left to reach the needed number of coefficients\n  var start = this.degree - remainder.length\n  if (start > 0) {\n    var buff = BufferUtil.alloc(this.degree)\n    remainder.copy(buff, start)\n\n    return buff\n  }\n\n  return remainder\n}\n\nmodule.exports = ReedSolomonEncoder\n"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC3C,IAAIC,UAAU,GAAGD,OAAO,CAAC,cAAc,CAAC;AACxC,IAAIE,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC,CAACE,MAAM;AAErC,SAASC,kBAAkB,CAAEC,MAAM,EAAE;EACnC,IAAI,CAACC,OAAO,GAAGC,SAAS;EACxB,IAAI,CAACF,MAAM,GAAGA,MAAM;EAEpB,IAAI,IAAI,CAACA,MAAM,EAAE,IAAI,CAACG,UAAU,CAAC,IAAI,CAACH,MAAM,CAAC;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAD,kBAAkB,CAACK,SAAS,CAACD,UAAU,GAAG,SAASA,UAAU,CAAEH,MAAM,EAAE;EACrE;EACA,IAAI,CAACA,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACC,OAAO,GAAGJ,UAAU,CAACQ,oBAAoB,CAAC,IAAI,CAACL,MAAM,CAAC;AAC7D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAD,kBAAkB,CAACK,SAAS,CAACE,MAAM,GAAG,SAASA,MAAM,CAAEC,IAAI,EAAE;EAC3D,IAAI,CAAC,IAAI,CAACN,OAAO,EAAE;IACjB,MAAM,IAAIO,KAAK,CAAC,yBAAyB,CAAC;EAC5C;;EAEA;EACA;EACA,IAAIC,GAAG,GAAGd,UAAU,CAACe,KAAK,CAAC,IAAI,CAACV,MAAM,CAAC;EACvC,IAAIW,UAAU,GAAGb,MAAM,CAACc,MAAM,CAAC,CAACL,IAAI,EAAEE,GAAG,CAAC,EAAEF,IAAI,CAACM,MAAM,GAAG,IAAI,CAACb,MAAM,CAAC;;EAEtE;EACA;EACA,IAAIc,SAAS,GAAGjB,UAAU,CAACkB,GAAG,CAACJ,UAAU,EAAE,IAAI,CAACV,OAAO,CAAC;;EAExD;EACA;EACA;EACA,IAAIe,KAAK,GAAG,IAAI,CAAChB,MAAM,GAAGc,SAAS,CAACD,MAAM;EAC1C,IAAIG,KAAK,GAAG,CAAC,EAAE;IACb,IAAIC,IAAI,GAAGtB,UAAU,CAACe,KAAK,CAAC,IAAI,CAACV,MAAM,CAAC;IACxCc,SAAS,CAACI,IAAI,CAACD,IAAI,EAAED,KAAK,CAAC;IAE3B,OAAOC,IAAI;EACb;EAEA,OAAOH,SAAS;AAClB,CAAC;AAEDK,MAAM,CAACC,OAAO,GAAGrB,kBAAkB"},"metadata":{},"sourceType":"script"}