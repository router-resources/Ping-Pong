{"ast":null,"code":"const EthQuery = require('eth-query');\nconst pify = require('pify');\nconst SafeEventEmitter = require('safe-event-emitter');\nconst sec = 1000;\nconst calculateSum = (accumulator, currentValue) => accumulator + currentValue;\nconst blockTrackerEvents = ['sync', 'latest'];\nclass BaseBlockTracker extends SafeEventEmitter {\n  //\n  // public\n  //\n\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    // config\n    this._blockResetDuration = opts.blockResetDuration || 20 * sec;\n    // state\n    this._blockResetTimeout;\n    this._currentBlock = null;\n    this._isRunning = false;\n    // bind functions for internal use\n    this._onNewListener = this._onNewListener.bind(this);\n    this._onRemoveListener = this._onRemoveListener.bind(this);\n    this._resetCurrentBlock = this._resetCurrentBlock.bind(this);\n    // listen for handler changes\n    this._setupInternalEvents();\n  }\n  isRunning() {\n    return this._isRunning;\n  }\n  getCurrentBlock() {\n    return this._currentBlock;\n  }\n  async getLatestBlock() {\n    // return if available\n    if (this._currentBlock) return this._currentBlock;\n    // wait for a new latest block\n    const latestBlock = await new Promise(resolve => this.once('latest', resolve));\n    // return newly set current block\n    return latestBlock;\n  }\n\n  // dont allow module consumer to remove our internal event listeners\n  removeAllListeners(eventName) {\n    // perform default behavior, preserve fn arity\n    if (eventName) {\n      super.removeAllListeners(eventName);\n    } else {\n      super.removeAllListeners();\n    }\n    // re-add internal events\n    this._setupInternalEvents();\n    // trigger stop check just in case\n    this._onRemoveListener();\n  }\n\n  //\n  // to be implemented in subclass\n  //\n\n  _start() {\n    // default behavior is noop\n  }\n  _end() {\n    // default behavior is noop\n  }\n\n  //\n  // private\n  //\n\n  _setupInternalEvents() {\n    // first remove listeners for idempotence\n    this.removeListener('newListener', this._onNewListener);\n    this.removeListener('removeListener', this._onRemoveListener);\n    // then add them\n    this.on('newListener', this._onNewListener);\n    this.on('removeListener', this._onRemoveListener);\n  }\n  _onNewListener(eventName, handler) {\n    // `newListener` is called *before* the listener is added\n    if (!blockTrackerEvents.includes(eventName)) return;\n    this._maybeStart();\n  }\n  _onRemoveListener(eventName, handler) {\n    // `removeListener` is called *after* the listener is removed\n    if (this._getBlockTrackerEventCount() > 0) return;\n    this._maybeEnd();\n  }\n  _maybeStart() {\n    if (this._isRunning) return;\n    this._isRunning = true;\n    // cancel setting latest block to stale\n    this._cancelBlockResetTimeout();\n    this._start();\n  }\n  _maybeEnd() {\n    if (!this._isRunning) return;\n    this._isRunning = false;\n    this._setupBlockResetTimeout();\n    this._end();\n  }\n  _getBlockTrackerEventCount() {\n    return blockTrackerEvents.map(eventName => this.listenerCount(eventName)).reduce(calculateSum);\n  }\n  _newPotentialLatest(newBlock) {\n    const currentBlock = this._currentBlock;\n    // only update if blok number is higher\n    if (currentBlock && hexToInt(newBlock) <= hexToInt(currentBlock)) return;\n    this._setCurrentBlock(newBlock);\n  }\n  _setCurrentBlock(newBlock) {\n    const oldBlock = this._currentBlock;\n    this._currentBlock = newBlock;\n    this.emit('latest', newBlock);\n    this.emit('sync', {\n      oldBlock,\n      newBlock\n    });\n  }\n  _setupBlockResetTimeout() {\n    // clear any existing timeout\n    this._cancelBlockResetTimeout();\n    // clear latest block when stale\n    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration);\n    // nodejs - dont hold process open\n    if (this._blockResetTimeout.unref) {\n      this._blockResetTimeout.unref();\n    }\n  }\n  _cancelBlockResetTimeout() {\n    clearTimeout(this._blockResetTimeout);\n  }\n  _resetCurrentBlock() {\n    this._currentBlock = null;\n  }\n}\nmodule.exports = BaseBlockTracker;\nfunction hexToInt(hexInt) {\n  return Number.parseInt(hexInt, 16);\n}","map":{"version":3,"names":["EthQuery","require","pify","SafeEventEmitter","sec","calculateSum","accumulator","currentValue","blockTrackerEvents","BaseBlockTracker","constructor","opts","_blockResetDuration","blockResetDuration","_blockResetTimeout","_currentBlock","_isRunning","_onNewListener","bind","_onRemoveListener","_resetCurrentBlock","_setupInternalEvents","isRunning","getCurrentBlock","getLatestBlock","latestBlock","Promise","resolve","once","removeAllListeners","eventName","_start","_end","removeListener","on","handler","includes","_maybeStart","_getBlockTrackerEventCount","_maybeEnd","_cancelBlockResetTimeout","_setupBlockResetTimeout","map","listenerCount","reduce","_newPotentialLatest","newBlock","currentBlock","hexToInt","_setCurrentBlock","oldBlock","emit","setTimeout","unref","clearTimeout","module","exports","hexInt","Number","parseInt"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/eth-block-tracker/src/base.js"],"sourcesContent":["const EthQuery = require('eth-query')\nconst pify = require('pify')\nconst SafeEventEmitter = require('safe-event-emitter')\n\nconst sec = 1000\n\nconst calculateSum = (accumulator, currentValue) => accumulator + currentValue\nconst blockTrackerEvents = ['sync', 'latest']\n\nclass BaseBlockTracker extends SafeEventEmitter {\n\n  //\n  // public\n  //\n\n  constructor (opts = {}) {\n    super()\n    // config\n    this._blockResetDuration = opts.blockResetDuration || 20 * sec\n    // state\n    this._blockResetTimeout\n    this._currentBlock = null\n    this._isRunning = false\n    // bind functions for internal use\n    this._onNewListener = this._onNewListener.bind(this)\n    this._onRemoveListener = this._onRemoveListener.bind(this)\n    this._resetCurrentBlock = this._resetCurrentBlock.bind(this)\n    // listen for handler changes\n    this._setupInternalEvents()\n  }\n\n  isRunning () {\n    return this._isRunning\n  }\n\n  getCurrentBlock () {\n    return this._currentBlock\n  }\n\n  async getLatestBlock () {\n    // return if available\n    if (this._currentBlock) return this._currentBlock\n    // wait for a new latest block\n    const latestBlock = await new Promise(resolve => this.once('latest', resolve))\n    // return newly set current block\n    return latestBlock\n  }\n\n  // dont allow module consumer to remove our internal event listeners\n  removeAllListeners (eventName) {\n    // perform default behavior, preserve fn arity\n    if (eventName) {\n      super.removeAllListeners(eventName)\n    } else {\n      super.removeAllListeners()\n    }\n    // re-add internal events\n    this._setupInternalEvents()\n    // trigger stop check just in case\n    this._onRemoveListener()\n  }\n\n  //\n  // to be implemented in subclass\n  //\n\n  _start () {\n    // default behavior is noop\n  }\n\n  _end () {\n    // default behavior is noop\n  }\n\n  //\n  // private\n  //\n\n  _setupInternalEvents () {\n    // first remove listeners for idempotence\n    this.removeListener('newListener', this._onNewListener)\n    this.removeListener('removeListener', this._onRemoveListener)\n    // then add them\n    this.on('newListener', this._onNewListener)\n    this.on('removeListener', this._onRemoveListener)\n  }\n\n  _onNewListener (eventName, handler) {\n    // `newListener` is called *before* the listener is added\n    if (!blockTrackerEvents.includes(eventName)) return\n    this._maybeStart()\n  }\n\n  _onRemoveListener (eventName, handler) {\n    // `removeListener` is called *after* the listener is removed\n    if (this._getBlockTrackerEventCount() > 0) return\n    this._maybeEnd()\n  }\n\n  _maybeStart () {\n    if (this._isRunning) return\n    this._isRunning = true\n    // cancel setting latest block to stale\n    this._cancelBlockResetTimeout()\n    this._start()\n  }\n\n  _maybeEnd () {\n    if (!this._isRunning) return\n    this._isRunning = false\n    this._setupBlockResetTimeout()\n    this._end()\n  }\n\n  _getBlockTrackerEventCount () {\n    return blockTrackerEvents\n      .map(eventName => this.listenerCount(eventName))\n      .reduce(calculateSum)\n  }\n\n  _newPotentialLatest (newBlock) {\n    const currentBlock = this._currentBlock\n    // only update if blok number is higher\n    if (currentBlock && (hexToInt(newBlock) <= hexToInt(currentBlock))) return\n    this._setCurrentBlock(newBlock)\n  }\n\n  _setCurrentBlock (newBlock) {\n    const oldBlock = this._currentBlock\n    this._currentBlock = newBlock\n    this.emit('latest', newBlock)\n    this.emit('sync', { oldBlock, newBlock })\n  }\n\n  _setupBlockResetTimeout () {\n    // clear any existing timeout\n    this._cancelBlockResetTimeout()\n    // clear latest block when stale\n    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration)\n    // nodejs - dont hold process open\n    if (this._blockResetTimeout.unref) {\n      this._blockResetTimeout.unref()\n    }\n  }\n\n  _cancelBlockResetTimeout () {\n    clearTimeout(this._blockResetTimeout)\n  }\n\n  _resetCurrentBlock () {\n    this._currentBlock = null\n  }\n\n}\n\nmodule.exports = BaseBlockTracker\n\nfunction hexToInt(hexInt) {\n  return Number.parseInt(hexInt, 16)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}