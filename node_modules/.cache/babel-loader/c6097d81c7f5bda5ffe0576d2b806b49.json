{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\nvar externals_1 = require(\"./externals\");\nvar internal_1 = require(\"./internal\");\nvar helpers_1 = require(\"./helpers\");\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nvar intToHex = function (i) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(\"Received an invalid integer type: \".concat(i));\n  }\n  return \"0x\".concat(i.toString(16));\n};\nexports.intToHex = intToHex;\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nvar intToBuffer = function (i) {\n  var hex = (0, exports.intToHex)(i);\n  return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\nexports.intToBuffer = intToBuffer;\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nvar zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\nexports.zeros = zeros;\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nvar setLength = function (msg, length, right) {\n  var buf = (0, exports.zeros)(length);\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n    return msg.slice(-length);\n  }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nvar setLengthLeft = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, false);\n};\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nvar setLengthRight = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, true);\n};\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nvar stripZeros = function (a) {\n  var first = a[0];\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n  return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nvar unpadBuffer = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return stripZeros(a);\n};\nexports.unpadBuffer = unpadBuffer;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nvar unpadArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return stripZeros(a);\n};\nexports.unpadArray = unpadArray;\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nvar unpadHexString = function (a) {\n  (0, helpers_1.assertIsHexString)(a);\n  a = (0, internal_1.stripHexPrefix)(a);\n  return stripZeros(a);\n};\nexports.unpadHexString = unpadHexString;\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nvar toBuffer = function (v) {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0);\n  }\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v);\n  }\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v);\n  }\n  if (typeof v === 'string') {\n    if (!(0, internal_1.isHexString)(v)) {\n      throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \".concat(v));\n    }\n    return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n  }\n  if (typeof v === 'number') {\n    return (0, exports.intToBuffer)(v);\n  }\n  if (externals_1.BN.isBN(v)) {\n    if (v.isNeg()) {\n      throw new Error(\"Cannot convert negative BN to buffer. Given: \".concat(v));\n    }\n    return v.toArrayLike(Buffer);\n  }\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray());\n  }\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer());\n  }\n  throw new Error('invalid type');\n};\nexports.toBuffer = toBuffer;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nvar bufferToInt = function (buf) {\n  return new externals_1.BN((0, exports.toBuffer)(buf)).toNumber();\n};\nexports.bufferToInt = bufferToInt;\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nvar bufferToHex = function (buf) {\n  buf = (0, exports.toBuffer)(buf);\n  return '0x' + buf.toString('hex');\n};\nexports.bufferToHex = bufferToHex;\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nvar fromSigned = function (num) {\n  return new externals_1.BN(num).fromTwos(256);\n};\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nvar toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray());\n};\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nvar addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\nexports.addHexPrefix = addHexPrefix;\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nvar toUtf8 = function (hex) {\n  var zerosRegexp = /^(00)+|(00)+$/g;\n  hex = (0, internal_1.stripHexPrefix)(hex);\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided');\n  }\n  var bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n  return bufferVal.toString('utf8');\n};\nexports.toUtf8 = toUtf8;\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nvar baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return \"0x\".concat(ba.toString('hex'));\n  } else if (ba instanceof Array) {\n    var array = [];\n    for (var i = 0; i < ba.length; i++) {\n      array.push((0, exports.baToJSON)(ba[i]));\n    }\n    return array;\n  }\n};\nexports.baToJSON = baToJSON;\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\nvar validateNoLeadingZeroes = function (values) {\n  var e_1, _a;\n  try {\n    for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = __read(_c.value, 2),\n        k = _d[0],\n        v = _d[1];\n      if (v !== undefined && v.length > 0 && v[0] === 0) {\n        throw new Error(\"\".concat(k, \" cannot have leading zeroes, received: \").concat(v.toString('hex')));\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n};\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\nfunction arrToBufArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Buffer.from(arr);\n  }\n  return arr.map(function (a) {\n    return arrToBufArr(a);\n  });\n}\nexports.arrToBufArr = arrToBufArr;\nfunction bufArrToArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);\n  }\n  return arr.map(function (a) {\n    return bufArrToArr(a);\n  });\n}\nexports.bufArrToArr = bufArrToArr;","map":{"version":3,"mappings":"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","names":["intToHex","i","Number","isSafeInteger","Error","toString","exports","intToBuffer","hex","Buffer","from","slice","zeros","bytes","allocUnsafe","fill","setLength","msg","length","right","buf","copy","setLengthLeft","setLengthRight","stripZeros","a","first","unpadBuffer","unpadArray","unpadHexString","toBuffer","v","undefined","isBuffer","Array","isArray","Uint8Array","externals_1","isBN","isNeg","toArrayLike","toArray","bufferToInt","toNumber","bufferToHex","fromSigned","num","fromTwos","toUnsigned","toTwos","addHexPrefix","str","toUtf8","zerosRegexp","bufferVal","replace","baToJSON","ba","array","push","validateNoLeadingZeroes","values","entries","k","arrToBufArr","arr","map","bufArrToArr"],"sourceRoot":"","sources":["../src/bytes.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}