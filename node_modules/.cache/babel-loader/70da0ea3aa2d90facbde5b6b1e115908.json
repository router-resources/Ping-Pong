{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { BaseController, createEventEmitterProxy } from '@toruslabs/base-controllers';\nimport { WalletInitializationError } from '@web3auth/base';\nimport { ethErrors } from 'eth-rpc-errors';\nimport getCreateRandomId from 'json-rpc-random-id';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass BaseProvider extends BaseController {\n  // should be Assigned in setupProvider\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    _defineProperty(this, \"_providerEngineProxy\", null);\n    if (!config.chainConfig) throw WalletInitializationError.invalidProviderConfigError(\"Please provide chainConfig\");\n    if (!config.chainConfig.chainId) throw WalletInitializationError.invalidProviderConfigError(\"Please provide chainId inside chainConfig\");\n    if (!config.chainConfig.rpcTarget) throw WalletInitializationError.invalidProviderConfigError(\"Please provide rpcTarget inside chainConfig\");\n    this.defaultState = {\n      chainId: \"loading\"\n    };\n    this.defaultConfig = {\n      chainConfig: config.chainConfig,\n      networks: {\n        [config.chainConfig.chainId]: config.chainConfig\n      }\n    };\n    super.initialize();\n  }\n  get provider() {\n    return this._providerEngineProxy;\n  }\n  set provider(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n  addChain(chainConfig) {\n    if (!chainConfig.chainId) throw ethErrors.rpc.invalidParams(\"chainId is required\");\n    if (!chainConfig.rpcTarget) throw ethErrors.rpc.invalidParams(\"chainId is required\");\n    this.configure({\n      networks: _objectSpread(_objectSpread({}, this.config.networks), {}, {\n        [chainConfig.chainId]: chainConfig\n      })\n    });\n  }\n  getChainConfig(chainId) {\n    var _this$config$networks;\n    const chainConfig = (_this$config$networks = this.config.networks) === null || _this$config$networks === void 0 ? void 0 : _this$config$networks[chainId];\n    if (!chainConfig) throw ethErrors.rpc.invalidRequest(\"Chain \".concat(chainId, \" is not supported, please add chainConfig for it\"));\n    return chainConfig;\n  }\n  getProviderEngineProxy() {\n    return this._providerEngineProxy;\n  }\n  updateProviderEngineProxy(providerEngineProxy) {\n    if (this._providerEngineProxy) {\n      this._providerEngineProxy.setTarget(providerEngineProxy);\n    } else {\n      this._providerEngineProxy = createEventEmitterProxy(providerEngineProxy);\n    }\n  }\n}\nconst createRandomId = getCreateRandomId();\nexport { BaseProvider, createRandomId };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;MAesBA,qBACZC;EAGR;EAGAC;QAAY;MAAEC,MAAF;MAAUC;IAAV;IACV,MAAM;MAAED,MAAF;MAAUC;IAAV,CAAN;kDAH6D;IAI7D,IAAI,CAACD,MAAM,CAACE,WAAZ,EAAyB,MAAMC,yBAAyB,CAACC,0BAA1B,CAAqD,4BAArD,CAAN;IACzB,IAAI,CAACJ,MAAM,CAACE,WAAP,CAAmBG,OAAxB,EAAiC,MAAMF,yBAAyB,CAACC,0BAA1B,CAAqD,2CAArD,CAAN;IACjC,IAAI,CAACJ,MAAM,CAACE,WAAP,CAAmBI,SAAxB,EAAmC,MAAMH,yBAAyB,CAACC,0BAA1B,CAAqD,6CAArD,CAAN;IACnC,KAAKG,YAAL,GAAoB;MAClBF,OAAO,EAAE;IADS,CAApB;IAGA,KAAKG,aAAL,GAAqB;MACnBN,WAAW,EAAEF,MAAM,CAACE,WADD;MAEnBO,QAAQ,EAAE;QAAE,CAACT,MAAM,CAACE,WAAP,CAAmBG,OAApB,GAA8BL,MAAM,CAACE;MAAvC;IAFS,CAArB;IAIA,MAAMQ,UAAN;EACD;EAEW,IAARC,QAAQ;IACV,OAAO,KAAKC,oBAAZ;EACD;EAEW,IAARD,QAAQ,CAACE,CAAD;IACV,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;EACD;EAEMC,QAAQ,CAACb,WAAD;IACb,IAAI,CAACA,WAAW,CAACG,OAAjB,EAA0B,MAAMW,SAAS,CAACC,GAAV,CAAcC,aAAd,CAA4B,qBAA5B,CAAN;IAC1B,IAAI,CAAChB,WAAW,CAACI,SAAjB,EAA4B,MAAMU,SAAS,CAACC,GAAV,CAAcC,aAAd,CAA4B,qBAA5B,CAAN;IAC5B,KAAKC,SAAL,CAAe;MACbV,QAAQ,kCAAO,KAAKT,MAAL,CAAYS,QAAnB;QAA6B,CAACP,WAAW,CAACG,OAAb,GAAuBH;MAApD;IADK,CAAf;EAGD;EAEMkB,cAAc,CAACf,OAAD;;IACnB,MAAMH,WAAW,4BAAG,KAAKF,MAAL,CAAYS,QAAf,0DAAGY,sBAAuBhB,OAAvB,CAApB;IACA,IAAI,CAACH,WAAL,EAAkB,MAAMc,SAAS,CAACC,GAAV,CAAcK,cAAd,iBAAsCjB,OAAtC,sDAAN;IAClB,OAAOH,WAAP;EACD;EAESqB,sBAAsB;IAC9B,OAAO,KAAKX,oBAAZ;EACD;EAESY,yBAAyB,CAACC,mBAAD;IACjC,IAAI,KAAKb,oBAAT,EAA+B;MAC5B,KAAKA,oBAAL,CAAkCc,SAAlC,CAA4CD,mBAA5C;IACF,CAFD,MAEO;MACL,KAAKb,oBAAL,GAA4Be,uBAAuB,CAA2BF,mBAA3B,CAAnD;IACD;EACF;;MCpEUG,cAAc,GAAGC,iBAAiB","names":["BaseProvider","BaseController","constructor","config","state","chainConfig","WalletInitializationError","invalidProviderConfigError","chainId","rpcTarget","defaultState","defaultConfig","networks","initialize","provider","_providerEngineProxy","_","Error","addChain","ethErrors","rpc","invalidParams","configure","getChainConfig","_this$config$networks","invalidRequest","getProviderEngineProxy","updateProviderEngineProxy","providerEngineProxy","setTarget","createEventEmitterProxy","createRandomId","getCreateRandomId"],"sources":["../src/baseProvider.ts","../src/utils.ts"],"sourcesContent":[null,null]},"metadata":{},"sourceType":"module"}