{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeHexLeadingZeros = exports.sanitizeHex = exports.addHexPrefix = exports.removeHexPrefix = exports.padRight = exports.padLeft = exports.sanitizeBytes = exports.swapHex = exports.swapBytes = exports.splitBytes = exports.calcByteLength = exports.trimRight = exports.trimLeft = exports.concatArrays = exports.concatBuffers = exports.getEncoding = exports.getType = exports.isArrayBuffer = exports.isTypedArray = exports.isBuffer = exports.isHexString = exports.isBinaryString = exports.binaryToNumber = exports.binaryToUtf8 = exports.binaryToHex = exports.binaryToArray = exports.binaryToBuffer = exports.numberToBinary = exports.numberToUtf8 = exports.numberToHex = exports.numberToArray = exports.numberToBuffer = exports.utf8ToBinary = exports.utf8ToNumber = exports.utf8ToHex = exports.utf8ToArray = exports.utf8ToBuffer = exports.hexToBinary = exports.hexToNumber = exports.hexToUtf8 = exports.hexToArray = exports.hexToBuffer = exports.arrayToBinary = exports.arrayToNumber = exports.arrayToUtf8 = exports.arrayToHex = exports.arrayToBuffer = exports.bufferToBinary = exports.bufferToNumber = exports.bufferToUtf8 = exports.bufferToHex = exports.bufferToArray = void 0;\nconst is_typedarray_1 = __importDefault(require(\"is-typedarray\"));\nconst typedarray_to_buffer_1 = __importDefault(require(\"typedarray-to-buffer\"));\nconst ENC_HEX = \"hex\";\nconst ENC_UTF8 = \"utf8\";\nconst ENC_BIN = \"binary\";\nconst TYPE_BUFFER = \"buffer\";\nconst TYPE_ARRAY = \"array\";\nconst TYPE_TYPED_ARRAY = \"typed-array\";\nconst TYPE_ARRAY_BUFFER = \"array-buffer\";\nconst STRING_ZERO = \"0\";\nfunction bufferToArray(buf) {\n  return new Uint8Array(buf);\n}\nexports.bufferToArray = bufferToArray;\nfunction bufferToHex(buf) {\n  let prefixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const hex = buf.toString(ENC_HEX);\n  return prefixed ? addHexPrefix(hex) : hex;\n}\nexports.bufferToHex = bufferToHex;\nfunction bufferToUtf8(buf) {\n  return buf.toString(ENC_UTF8);\n}\nexports.bufferToUtf8 = bufferToUtf8;\nfunction bufferToNumber(buf) {\n  return buf.readUIntBE(0, buf.length);\n}\nexports.bufferToNumber = bufferToNumber;\nfunction bufferToBinary(buf) {\n  return arrayToBinary(bufferToArray(buf));\n}\nexports.bufferToBinary = bufferToBinary;\nfunction arrayToBuffer(arr) {\n  return typedarray_to_buffer_1.default(arr);\n}\nexports.arrayToBuffer = arrayToBuffer;\nfunction arrayToHex(arr) {\n  let prefixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return bufferToHex(arrayToBuffer(arr), prefixed);\n}\nexports.arrayToHex = arrayToHex;\nfunction arrayToUtf8(arr) {\n  return bufferToUtf8(arrayToBuffer(arr));\n}\nexports.arrayToUtf8 = arrayToUtf8;\nfunction arrayToNumber(arr) {\n  return bufferToNumber(arrayToBuffer(arr));\n}\nexports.arrayToNumber = arrayToNumber;\nfunction arrayToBinary(arr) {\n  return Array.from(arr).map(numberToBinary).join(\"\");\n}\nexports.arrayToBinary = arrayToBinary;\nfunction hexToBuffer(hex) {\n  return Buffer.from(removeHexPrefix(hex), ENC_HEX);\n}\nexports.hexToBuffer = hexToBuffer;\nfunction hexToArray(hex) {\n  return bufferToArray(hexToBuffer(hex));\n}\nexports.hexToArray = hexToArray;\nfunction hexToUtf8(hex) {\n  return bufferToUtf8(hexToBuffer(hex));\n}\nexports.hexToUtf8 = hexToUtf8;\nfunction hexToNumber(hex) {\n  return arrayToNumber(hexToArray(hex));\n}\nexports.hexToNumber = hexToNumber;\nfunction hexToBinary(hex) {\n  return arrayToBinary(hexToArray(hex));\n}\nexports.hexToBinary = hexToBinary;\nfunction utf8ToBuffer(utf8) {\n  return Buffer.from(utf8, ENC_UTF8);\n}\nexports.utf8ToBuffer = utf8ToBuffer;\nfunction utf8ToArray(utf8) {\n  return bufferToArray(utf8ToBuffer(utf8));\n}\nexports.utf8ToArray = utf8ToArray;\nfunction utf8ToHex(utf8) {\n  let prefixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return bufferToHex(utf8ToBuffer(utf8), prefixed);\n}\nexports.utf8ToHex = utf8ToHex;\nfunction utf8ToNumber(utf8) {\n  const num = parseInt(utf8, 10);\n  assert(isDefined(num), \"Number can only safely store up to 53 bits\");\n  return num;\n}\nexports.utf8ToNumber = utf8ToNumber;\nfunction utf8ToBinary(utf8) {\n  return arrayToBinary(utf8ToArray(utf8));\n}\nexports.utf8ToBinary = utf8ToBinary;\nfunction numberToBuffer(num) {\n  return binaryToBuffer(numberToBinary(num));\n}\nexports.numberToBuffer = numberToBuffer;\nfunction numberToArray(num) {\n  return binaryToArray(numberToBinary(num));\n}\nexports.numberToArray = numberToArray;\nfunction numberToHex(num, prefixed) {\n  return binaryToHex(numberToBinary(num), prefixed);\n}\nexports.numberToHex = numberToHex;\nfunction numberToUtf8(num) {\n  return `${num}`;\n}\nexports.numberToUtf8 = numberToUtf8;\nfunction numberToBinary(num) {\n  const bin = (num >>> 0).toString(2);\n  return sanitizeBytes(bin);\n}\nexports.numberToBinary = numberToBinary;\nfunction binaryToBuffer(bin) {\n  return arrayToBuffer(binaryToArray(bin));\n}\nexports.binaryToBuffer = binaryToBuffer;\nfunction binaryToArray(bin) {\n  return new Uint8Array(splitBytes(bin).map(x => parseInt(x, 2)));\n}\nexports.binaryToArray = binaryToArray;\nfunction binaryToHex(bin, prefixed) {\n  return arrayToHex(binaryToArray(bin), prefixed);\n}\nexports.binaryToHex = binaryToHex;\nfunction binaryToUtf8(bin) {\n  return arrayToUtf8(binaryToArray(bin));\n}\nexports.binaryToUtf8 = binaryToUtf8;\nfunction binaryToNumber(bin) {\n  return arrayToNumber(binaryToArray(bin));\n}\nexports.binaryToNumber = binaryToNumber;\nfunction isBinaryString(str) {\n  if (typeof str !== \"string\" || !new RegExp(/^[01]+$/).test(str)) {\n    return false;\n  }\n  if (str.length % 8 !== 0) {\n    return false;\n  }\n  return true;\n}\nexports.isBinaryString = isBinaryString;\nfunction isHexString(str, length) {\n  if (typeof str !== \"string\" || !str.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (length && str.length !== 2 + 2 * length) {\n    return false;\n  }\n  return true;\n}\nexports.isHexString = isHexString;\nfunction isBuffer(val) {\n  return Buffer.isBuffer(val);\n}\nexports.isBuffer = isBuffer;\nfunction isTypedArray(val) {\n  return is_typedarray_1.default.strict(val) && !isBuffer(val);\n}\nexports.isTypedArray = isTypedArray;\nfunction isArrayBuffer(val) {\n  return !isTypedArray(val) && !isBuffer(val) && typeof val.byteLength !== \"undefined\";\n}\nexports.isArrayBuffer = isArrayBuffer;\nfunction getType(val) {\n  if (isBuffer(val)) {\n    return TYPE_BUFFER;\n  } else if (isTypedArray(val)) {\n    return TYPE_TYPED_ARRAY;\n  } else if (isArrayBuffer(val)) {\n    return TYPE_ARRAY_BUFFER;\n  } else if (Array.isArray(val)) {\n    return TYPE_ARRAY;\n  } else {\n    return typeof val;\n  }\n}\nexports.getType = getType;\nfunction getEncoding(str) {\n  if (isBinaryString(str)) {\n    return ENC_BIN;\n  }\n  if (isHexString(str)) {\n    return ENC_HEX;\n  }\n  return ENC_UTF8;\n}\nexports.getEncoding = getEncoding;\nfunction concatBuffers() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  const result = Buffer.concat(args);\n  return result;\n}\nexports.concatBuffers = concatBuffers;\nfunction concatArrays() {\n  let result = [];\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  args.forEach(arg => result = result.concat(Array.from(arg)));\n  return new Uint8Array([...result]);\n}\nexports.concatArrays = concatArrays;\nfunction trimLeft(data, length) {\n  const diff = data.length - length;\n  if (diff > 0) {\n    data = data.slice(diff);\n  }\n  return data;\n}\nexports.trimLeft = trimLeft;\nfunction trimRight(data, length) {\n  return data.slice(0, length);\n}\nexports.trimRight = trimRight;\nfunction calcByteLength(length) {\n  let byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  const remainder = length % byteSize;\n  return remainder ? (length - remainder) / byteSize * byteSize + byteSize : length;\n}\nexports.calcByteLength = calcByteLength;\nfunction splitBytes(str) {\n  let byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  const bytes = sanitizeBytes(str).match(new RegExp(`.{${byteSize}}`, \"gi\"));\n  return Array.from(bytes || []);\n}\nexports.splitBytes = splitBytes;\nfunction swapBytes(str) {\n  return splitBytes(str).map(reverseString).join(\"\");\n}\nexports.swapBytes = swapBytes;\nfunction swapHex(str) {\n  return binaryToHex(swapBytes(hexToBinary(str)));\n}\nexports.swapHex = swapHex;\nfunction sanitizeBytes(str) {\n  let byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  let padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STRING_ZERO;\n  return padLeft(str, calcByteLength(str.length, byteSize), padding);\n}\nexports.sanitizeBytes = sanitizeBytes;\nfunction padLeft(str, length) {\n  let padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STRING_ZERO;\n  return padString(str, length, true, padding);\n}\nexports.padLeft = padLeft;\nfunction padRight(str, length) {\n  let padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STRING_ZERO;\n  return padString(str, length, false, padding);\n}\nexports.padRight = padRight;\nfunction removeHexPrefix(hex) {\n  return hex.replace(/^0x/, \"\");\n}\nexports.removeHexPrefix = removeHexPrefix;\nfunction addHexPrefix(hex) {\n  return hex.startsWith(\"0x\") ? hex : `0x${hex}`;\n}\nexports.addHexPrefix = addHexPrefix;\nfunction sanitizeHex(hex) {\n  hex = removeHexPrefix(hex);\n  hex = sanitizeBytes(hex, 2);\n  if (hex) {\n    hex = addHexPrefix(hex);\n  }\n  return hex;\n}\nexports.sanitizeHex = sanitizeHex;\nfunction removeHexLeadingZeros(hex) {\n  const prefixed = hex.startsWith(\"0x\");\n  hex = removeHexPrefix(hex);\n  hex = hex.startsWith(STRING_ZERO) ? hex.substring(1) : hex;\n  return prefixed ? addHexPrefix(hex) : hex;\n}\nexports.removeHexLeadingZeros = removeHexLeadingZeros;\nfunction isUndefined(value) {\n  return typeof value === \"undefined\";\n}\nfunction isDefined(value) {\n  return !isUndefined(value);\n}\nfunction assert(assertion, errorMessage) {\n  if (!assertion) {\n    throw new Error(errorMessage);\n  }\n}\nfunction reverseString(str) {\n  return str.split(\"\").reverse().join(\"\");\n}\nfunction padString(str, length, left) {\n  let padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : STRING_ZERO;\n  const diff = length - str.length;\n  let result = str;\n  if (diff > 0) {\n    const pad = padding.repeat(diff);\n    result = left ? pad + str : str + pad;\n  }\n  return result;\n}","map":{"version":3,"mappings":"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","names":["ENC_HEX","ENC_UTF8","ENC_BIN","TYPE_BUFFER","TYPE_ARRAY","TYPE_TYPED_ARRAY","TYPE_ARRAY_BUFFER","STRING_ZERO","bufferToArray","buf","Uint8Array","exports","bufferToHex","prefixed","hex","toString","addHexPrefix","bufferToUtf8","bufferToNumber","readUIntBE","length","bufferToBinary","arrayToBinary","arrayToBuffer","arr","typedarray_to_buffer_1","arrayToHex","arrayToUtf8","arrayToNumber","Array","from","map","numberToBinary","join","hexToBuffer","Buffer","removeHexPrefix","hexToArray","hexToUtf8","hexToNumber","hexToBinary","utf8ToBuffer","utf8","utf8ToArray","utf8ToHex","utf8ToNumber","num","parseInt","assert","isDefined","utf8ToBinary","numberToBuffer","binaryToBuffer","numberToArray","binaryToArray","numberToHex","binaryToHex","numberToUtf8","bin","sanitizeBytes","splitBytes","x","binaryToUtf8","binaryToNumber","isBinaryString","str","RegExp","test","isHexString","match","isBuffer","val","isTypedArray","is_typedarray_1","strict","isArrayBuffer","byteLength","getType","isArray","getEncoding","concatBuffers","args","result","concat","concatArrays","forEach","arg","trimLeft","data","diff","slice","trimRight","calcByteLength","byteSize","remainder","bytes","swapBytes","reverseString","swapHex","padding","padLeft","padString","padRight","replace","startsWith","sanitizeHex","removeHexLeadingZeros","substring","isUndefined","value","assertion","errorMessage","Error","split","reverse","left","pad","repeat"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}