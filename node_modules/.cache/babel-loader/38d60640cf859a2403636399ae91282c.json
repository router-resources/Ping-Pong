{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file jsonrpc.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Aaron Kumavis <aaron@kumavis.me>\n * @date 2015\n */\n\"use strict\";\n\n// Initialize Jsonrpc as a simple object with utility functions.\nvar Jsonrpc = {\n  messageId: 0\n};\n/**\n * Should be called to valid json create payload object\n *\n * @method toPayload\n * @param {Function} method of jsonrpc call, required\n * @param {Array} params, an array of method params, optional\n * @returns {Object} valid jsonrpc payload object\n */\nJsonrpc.toPayload = function (method, params) {\n  if (!method) {\n    throw new Error('JSONRPC method should be specified for params: \"' + JSON.stringify(params) + '\"!');\n  }\n  // advance message ID\n  Jsonrpc.messageId++;\n  return {\n    jsonrpc: '2.0',\n    id: Jsonrpc.messageId,\n    method: method,\n    params: params || []\n  };\n};\n/**\n * Should be called to check if jsonrpc response is valid\n *\n * @method isValidResponse\n * @param {Object}\n * @returns {Boolean} true if response is valid, otherwise false\n */\nJsonrpc.isValidResponse = function (response) {\n  return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);\n  function validateSingleMessage(message) {\n    return !!message && !message.error && message.jsonrpc === '2.0' && (typeof message.id === 'number' || typeof message.id === 'string') && message.result !== undefined; // only undefined is not valid json object\n  }\n};\n/**\n * Should be called to create batch payload object\n *\n * @method toBatchPayload\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields\n * @returns {Array} batch payload\n */\nJsonrpc.toBatchPayload = function (messages) {\n  return messages.map(function (message) {\n    return Jsonrpc.toPayload(message.method, message.params);\n  });\n};\nmodule.exports = Jsonrpc;","map":{"version":3,"names":["Jsonrpc","messageId","toPayload","method","params","Error","JSON","stringify","jsonrpc","id","isValidResponse","response","Array","isArray","every","validateSingleMessage","message","error","result","undefined","toBatchPayload","messages","map","module","exports"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/web3-core-requestmanager/lib/jsonrpc.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file jsonrpc.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Aaron Kumavis <aaron@kumavis.me>\n * @date 2015\n */\n\"use strict\";\n// Initialize Jsonrpc as a simple object with utility functions.\nvar Jsonrpc = {\n    messageId: 0\n};\n/**\n * Should be called to valid json create payload object\n *\n * @method toPayload\n * @param {Function} method of jsonrpc call, required\n * @param {Array} params, an array of method params, optional\n * @returns {Object} valid jsonrpc payload object\n */\nJsonrpc.toPayload = function (method, params) {\n    if (!method) {\n        throw new Error('JSONRPC method should be specified for params: \"' + JSON.stringify(params) + '\"!');\n    }\n    // advance message ID\n    Jsonrpc.messageId++;\n    return {\n        jsonrpc: '2.0',\n        id: Jsonrpc.messageId,\n        method: method,\n        params: params || []\n    };\n};\n/**\n * Should be called to check if jsonrpc response is valid\n *\n * @method isValidResponse\n * @param {Object}\n * @returns {Boolean} true if response is valid, otherwise false\n */\nJsonrpc.isValidResponse = function (response) {\n    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);\n    function validateSingleMessage(message) {\n        return !!message &&\n            !message.error &&\n            message.jsonrpc === '2.0' &&\n            (typeof message.id === 'number' || typeof message.id === 'string') &&\n            message.result !== undefined; // only undefined is not valid json object\n    }\n};\n/**\n * Should be called to create batch payload object\n *\n * @method toBatchPayload\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields\n * @returns {Array} batch payload\n */\nJsonrpc.toBatchPayload = function (messages) {\n    return messages.map(function (message) {\n        return Jsonrpc.toPayload(message.method, message.params);\n    });\n};\nmodule.exports = Jsonrpc;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AACZ;AACA,IAAIA,OAAO,GAAG;EACVC,SAAS,EAAE;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,OAAO,CAACE,SAAS,GAAG,UAAUC,MAAM,EAAEC,MAAM,EAAE;EAC1C,IAAI,CAACD,MAAM,EAAE;IACT,MAAM,IAAIE,KAAK,CAAC,kDAAkD,GAAGC,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC,GAAG,IAAI,CAAC;EACvG;EACA;EACAJ,OAAO,CAACC,SAAS,EAAE;EACnB,OAAO;IACHO,OAAO,EAAE,KAAK;IACdC,EAAE,EAAET,OAAO,CAACC,SAAS;IACrBE,MAAM,EAAEA,MAAM;IACdC,MAAM,EAAEA,MAAM,IAAI;EACtB,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,OAAO,CAACU,eAAe,GAAG,UAAUC,QAAQ,EAAE;EAC1C,OAAOC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,GAAGA,QAAQ,CAACG,KAAK,CAACC,qBAAqB,CAAC,GAAGA,qBAAqB,CAACJ,QAAQ,CAAC;EACxG,SAASI,qBAAqB,CAACC,OAAO,EAAE;IACpC,OAAO,CAAC,CAACA,OAAO,IACZ,CAACA,OAAO,CAACC,KAAK,IACdD,OAAO,CAACR,OAAO,KAAK,KAAK,KACxB,OAAOQ,OAAO,CAACP,EAAE,KAAK,QAAQ,IAAI,OAAOO,OAAO,CAACP,EAAE,KAAK,QAAQ,CAAC,IAClEO,OAAO,CAACE,MAAM,KAAKC,SAAS,CAAC,CAAC;EACtC;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACAnB,OAAO,CAACoB,cAAc,GAAG,UAAUC,QAAQ,EAAE;EACzC,OAAOA,QAAQ,CAACC,GAAG,CAAC,UAAUN,OAAO,EAAE;IACnC,OAAOhB,OAAO,CAACE,SAAS,CAACc,OAAO,CAACb,MAAM,EAAEa,OAAO,CAACZ,MAAM,CAAC;EAC5D,CAAC,CAAC;AACN,CAAC;AACDmB,MAAM,CAACC,OAAO,GAAGxB,OAAO"},"metadata":{},"sourceType":"script"}