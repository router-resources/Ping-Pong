{"ast":null,"code":"\"use strict\";\n\n// This file is imported from secp256k1 v3\n// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([\n// begin\n0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,\n// private key\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n// middle\n0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,\n// public key\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\nvar EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([\n// begin\n0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,\n// private key\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n// middle\n0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0e, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,\n// public key\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\nexports.privateKeyExport = function (privateKey, publicKey, compressed) {\n  if (compressed === void 0) {\n    compressed = true;\n  }\n  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);\n  privateKey.copy(result, compressed ? 8 : 9);\n  publicKey.copy(result, compressed ? 181 : 214);\n  return result;\n};\nexports.privateKeyImport = function (privateKey) {\n  var length = privateKey.length;\n  // sequence header\n  var index = 0;\n  if (length < index + 1 || privateKey[index] !== 0x30) return null;\n  index += 1;\n  // sequence length constructor\n  if (length < index + 1 || !(privateKey[index] & 0x80)) return null;\n  var lenb = privateKey[index] & 0x7f;\n  index += 1;\n  if (lenb < 1 || lenb > 2) return null;\n  if (length < index + lenb) return null;\n  // sequence length\n  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);\n  index += lenb;\n  if (length < index + len) return null;\n  // sequence element 0: version number (=1)\n  if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {\n    return null;\n  }\n  index += 3;\n  // sequence element 1: octet string, up to 32 bytes\n  if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {\n    return null;\n  }\n  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);\n};\nexports.signatureImportLax = function (signature) {\n  var r = Buffer.alloc(32, 0);\n  var s = Buffer.alloc(32, 0);\n  var length = signature.length;\n  var index = 0;\n  // sequence tag byte\n  if (signature[index++] !== 0x30) {\n    return null;\n  }\n  // sequence length byte\n  var lenbyte = signature[index++];\n  if (lenbyte & 0x80) {\n    index += lenbyte - 0x80;\n    if (index > length) {\n      return null;\n    }\n  }\n  // sequence tag byte for r\n  if (signature[index++] !== 0x02) {\n    return null;\n  }\n  // length for r\n  var rlen = signature[index++];\n  if (rlen & 0x80) {\n    lenbyte = rlen - 0x80;\n    if (index + lenbyte > length) {\n      return null;\n    }\n    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1);\n    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + signature[index];\n  }\n  if (rlen > length - index) {\n    return null;\n  }\n  var rindex = index;\n  index += rlen;\n  // sequence tag byte for s\n  if (signature[index++] !== 0x02) {\n    return null;\n  }\n  // length for s\n  var slen = signature[index++];\n  if (slen & 0x80) {\n    lenbyte = slen - 0x80;\n    if (index + lenbyte > length) {\n      return null;\n    }\n    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1);\n    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + signature[index];\n  }\n  if (slen > length - index) {\n    return null;\n  }\n  var sindex = index;\n  index += slen;\n  // ignore leading zeros in r\n  for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1);\n  // copy r value\n  if (rlen > 32) {\n    return null;\n  }\n  var rvalue = signature.slice(rindex, rindex + rlen);\n  rvalue.copy(r, 32 - rvalue.length);\n  // ignore leading zeros in s\n  for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1);\n  // copy s value\n  if (slen > 32) {\n    return null;\n  }\n  var svalue = signature.slice(sindex, sindex + slen);\n  svalue.copy(s, 32 - svalue.length);\n  return {\n    r: r,\n    s: s\n  };\n};","map":{"version":3,"mappings":"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","names":["EC_PRIVKEY_EXPORT_DER_COMPRESSED","Buffer","from","EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED","exports","privateKeyExport","privateKey","publicKey","compressed","result","copy","privateKeyImport","length","index","lenb","len","slice","signatureImportLax","signature","r","alloc","s","lenbyte","rlen","rindex","slen","sindex","rvalue","svalue"],"sourceRoot":"","sources":["../../src/secp256k1v3-lib/der.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}