{"ast":null,"code":"/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file index.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@frozeman.de>\n * @date 2018\n */\nvar Buffer = require('buffer').Buffer;\nvar utils = require('web3-utils');\nvar EthersAbiCoder = require('@ethersproject/abi').AbiCoder;\nvar ParamType = require('@ethersproject/abi').ParamType;\nvar ethersAbiCoder = new EthersAbiCoder(function (type, value) {\n  if (type.match(/^u?int/) && !Array.isArray(value) && (!(!!value && typeof value === 'object') || value.constructor.name !== 'BN')) {\n    return value.toString();\n  }\n  return value;\n});\n// result method\nfunction Result() {}\n/**\n * ABICoder prototype should be used to encode/decode solidity params of any type\n */\nvar ABICoder = function () {};\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeFunctionSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\nABICoder.prototype.encodeFunctionSignature = function (functionName) {\n  if (typeof functionName === 'function' || typeof functionName === 'object' && functionName) {\n    functionName = utils._jsonInterfaceMethodToString(functionName);\n  }\n  return utils.sha3(functionName).slice(0, 10);\n};\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeEventSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\nABICoder.prototype.encodeEventSignature = function (functionName) {\n  if (typeof functionName === 'function' || typeof functionName === 'object' && functionName) {\n    functionName = utils._jsonInterfaceMethodToString(functionName);\n  }\n  return utils.sha3(functionName);\n};\n/**\n * Should be used to encode plain param\n *\n * @method encodeParameter\n *\n * @param {String|Object} type\n * @param {any} param\n *\n * @return {String} encoded plain param\n */\nABICoder.prototype.encodeParameter = function (type, param) {\n  return this.encodeParameters([type], [param]);\n};\n/**\n * Should be used to encode list of params\n *\n * @method encodeParameters\n *\n * @param {Array<String|Object>} types\n * @param {Array<any>} params\n *\n * @return {String} encoded list of params\n */\nABICoder.prototype.encodeParameters = function (types, params) {\n  var self = this;\n  types = self.mapTypes(types);\n  params = params.map(function (param, index) {\n    let type = types[index];\n    if (typeof type === 'object' && type.type) {\n      // We may get a named type of shape {name, type}\n      type = type.type;\n    }\n    param = self.formatParam(type, param);\n    // Format params for tuples\n    if (typeof type === 'string' && type.includes('tuple')) {\n      const coder = ethersAbiCoder._getCoder(ParamType.from(type));\n      const modifyParams = (coder, param) => {\n        if (coder.name === 'array') {\n          return param.map(p => modifyParams(ethersAbiCoder._getCoder(ParamType.from(coder.type.replace('[]', ''))), p));\n        }\n        coder.coders.forEach((c, i) => {\n          if (c.name === 'tuple') {\n            modifyParams(c, param[i]);\n          } else {\n            param[i] = self.formatParam(c.name, param[i]);\n          }\n        });\n      };\n      modifyParams(coder, param);\n    }\n    return param;\n  });\n  return ethersAbiCoder.encode(types, params);\n};\n/**\n * Map types if simplified format is used\n *\n * @method mapTypes\n * @param {Array} types\n * @return {Array}\n */\nABICoder.prototype.mapTypes = function (types) {\n  var self = this;\n  var mappedTypes = [];\n  types.forEach(function (type) {\n    // Remap `function` type params to bytes24 since Ethers does not\n    // recognize former type. Solidity docs say `Function` is a bytes24\n    // encoding the contract address followed by the function selector hash.\n    if (typeof type === 'object' && type.type === 'function') {\n      type = Object.assign({}, type, {\n        type: \"bytes24\"\n      });\n    }\n    if (self.isSimplifiedStructFormat(type)) {\n      var structName = Object.keys(type)[0];\n      mappedTypes.push(Object.assign(self.mapStructNameAndType(structName), {\n        components: self.mapStructToCoderFormat(type[structName])\n      }));\n      return;\n    }\n    mappedTypes.push(type);\n  });\n  return mappedTypes;\n};\n/**\n * Check if type is simplified struct format\n *\n * @method isSimplifiedStructFormat\n * @param {string | Object} type\n * @returns {boolean}\n */\nABICoder.prototype.isSimplifiedStructFormat = function (type) {\n  return typeof type === 'object' && typeof type.components === 'undefined' && typeof type.name === 'undefined';\n};\n/**\n * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used\n *\n * @method mapStructNameAndType\n * @param {string} structName\n * @return {{type: string, name: *}}\n */\nABICoder.prototype.mapStructNameAndType = function (structName) {\n  var type = 'tuple';\n  if (structName.indexOf('[]') > -1) {\n    type = 'tuple[]';\n    structName = structName.slice(0, -2);\n  }\n  return {\n    type: type,\n    name: structName\n  };\n};\n/**\n * Maps the simplified format in to the expected format of the ABICoder\n *\n * @method mapStructToCoderFormat\n * @param {Object} struct\n * @return {Array}\n */\nABICoder.prototype.mapStructToCoderFormat = function (struct) {\n  var self = this;\n  var components = [];\n  Object.keys(struct).forEach(function (key) {\n    if (typeof struct[key] === 'object') {\n      components.push(Object.assign(self.mapStructNameAndType(key), {\n        components: self.mapStructToCoderFormat(struct[key])\n      }));\n      return;\n    }\n    components.push({\n      name: key,\n      type: struct[key]\n    });\n  });\n  return components;\n};\n/**\n * Handle some formatting of params for backwards compatability with Ethers V4\n *\n * @method formatParam\n * @param {String} - type\n * @param {any} - param\n * @return {any} - The formatted param\n */\nABICoder.prototype.formatParam = function (type, param) {\n  const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\n  const paramTypeBytesArray = new RegExp(/^bytes([0-9]*)\\[\\]$/);\n  const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n  const paramTypeNumberArray = new RegExp(/^(u?int)([0-9]*)\\[\\]$/);\n  // Format BN to string\n  if (utils.isBN(param) || utils.isBigNumber(param)) {\n    return param.toString(10);\n  }\n  if (type.match(paramTypeBytesArray) || type.match(paramTypeNumberArray)) {\n    return param.map(p => this.formatParam(type.replace('[]', ''), p));\n  }\n  // Format correct width for u?int[0-9]*\n  let match = type.match(paramTypeNumber);\n  if (match) {\n    let size = parseInt(match[2] || \"256\");\n    if (size / 8 < param.length) {\n      // pad to correct bit width\n      param = utils.leftPad(param, size);\n    }\n  }\n  // Format correct length for bytes[0-9]+\n  match = type.match(paramTypeBytes);\n  if (match) {\n    if (Buffer.isBuffer(param)) {\n      param = utils.toHex(param);\n    }\n    // format to correct length\n    let size = parseInt(match[1]);\n    if (size) {\n      let maxSize = size * 2;\n      if (param.substring(0, 2) === '0x') {\n        maxSize += 2;\n      }\n      if (param.length < maxSize) {\n        // pad to correct length\n        param = utils.rightPad(param, size * 2);\n      }\n    }\n    // format odd-length bytes to even-length\n    if (param.length % 2 === 1) {\n      param = '0x0' + param.substring(2);\n    }\n  }\n  return param;\n};\n/**\n * Encodes a function call from its json interface and parameters.\n *\n * @method encodeFunctionCall\n * @param {Array} jsonInterface\n * @param {Array} params\n * @return {String} The encoded ABI for this function call\n */\nABICoder.prototype.encodeFunctionCall = function (jsonInterface, params) {\n  return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace('0x', '');\n};\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParameter\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\nABICoder.prototype.decodeParameter = function (type, bytes) {\n  return this.decodeParameters([type], bytes)[0];\n};\n/**\n * Should be used to decode list of params\n *\n * @method decodeParameter\n * @param {Array} outputs\n * @param {String} bytes\n * @return {Array} array of plain params\n */\nABICoder.prototype.decodeParameters = function (outputs, bytes) {\n  return this.decodeParametersWith(outputs, bytes, false);\n};\n/**\n * Should be used to decode list of params\n *\n * @method decodeParameter\n * @param {Array} outputs\n * @param {String} bytes\n * @param {Boolean} loose\n * @return {Array} array of plain params\n */\nABICoder.prototype.decodeParametersWith = function (outputs, bytes, loose) {\n  if (outputs.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {\n    throw new Error('Returned values aren\\'t valid, did it run Out of Gas? ' + 'You might also see this error if you are not using the ' + 'correct ABI for the contract you are retrieving data from, ' + 'requesting data from a block number that does not exist, ' + 'or querying a node which is not fully synced.');\n  }\n  var res = ethersAbiCoder.decode(this.mapTypes(outputs), '0x' + bytes.replace(/0x/i, ''), loose);\n  var returnValue = new Result();\n  returnValue.__length__ = 0;\n  outputs.forEach(function (output, i) {\n    var decodedValue = res[returnValue.__length__];\n    const isStringObject = typeof output === 'object' && output.type && output.type === 'string';\n    const isStringType = typeof output === 'string' && output === 'string';\n    // only convert `0x` to null if it's not string value\n    decodedValue = decodedValue === '0x' && !isStringObject && !isStringType ? null : decodedValue;\n    returnValue[i] = decodedValue;\n    if ((typeof output === 'function' || !!output && typeof output === 'object') && output.name) {\n      returnValue[output.name] = decodedValue;\n    }\n    returnValue.__length__++;\n  });\n  return returnValue;\n};\n/**\n * Decodes events non- and indexed parameters.\n *\n * @method decodeLog\n * @param {Object} inputs\n * @param {String} data\n * @param {Array} topics\n * @return {Array} array of plain params\n */\nABICoder.prototype.decodeLog = function (inputs, data, topics) {\n  var _this = this;\n  topics = Array.isArray(topics) ? topics : [topics];\n  data = data || '';\n  var notIndexedInputs = [];\n  var indexedParams = [];\n  var topicCount = 0;\n  // TODO check for anonymous logs?\n  inputs.forEach(function (input, i) {\n    if (input.indexed) {\n      indexedParams[i] = ['bool', 'int', 'uint', 'address', 'fixed', 'ufixed'].find(function (staticType) {\n        return input.type.indexOf(staticType) !== -1;\n      }) ? _this.decodeParameter(input.type, topics[topicCount]) : topics[topicCount];\n      topicCount++;\n    } else {\n      notIndexedInputs[i] = input;\n    }\n  });\n  var nonIndexedData = data;\n  var notIndexedParams = nonIndexedData ? this.decodeParametersWith(notIndexedInputs, nonIndexedData, true) : [];\n  var returnValue = new Result();\n  returnValue.__length__ = 0;\n  inputs.forEach(function (res, i) {\n    returnValue[i] = res.type === 'string' ? '' : null;\n    if (typeof notIndexedParams[i] !== 'undefined') {\n      returnValue[i] = notIndexedParams[i];\n    }\n    if (typeof indexedParams[i] !== 'undefined') {\n      returnValue[i] = indexedParams[i];\n    }\n    if (res.name) {\n      returnValue[res.name] = returnValue[i];\n    }\n    returnValue.__length__++;\n  });\n  return returnValue;\n};\nvar coder = new ABICoder();\nmodule.exports = coder;","map":{"version":3,"names":["Buffer","require","utils","EthersAbiCoder","AbiCoder","ParamType","ethersAbiCoder","type","value","match","Array","isArray","constructor","name","toString","Result","ABICoder","prototype","encodeFunctionSignature","functionName","_jsonInterfaceMethodToString","sha3","slice","encodeEventSignature","encodeParameter","param","encodeParameters","types","params","self","mapTypes","map","index","formatParam","includes","coder","_getCoder","from","modifyParams","p","replace","coders","forEach","c","i","encode","mappedTypes","Object","assign","isSimplifiedStructFormat","structName","keys","push","mapStructNameAndType","components","mapStructToCoderFormat","indexOf","struct","key","paramTypeBytes","RegExp","paramTypeBytesArray","paramTypeNumber","paramTypeNumberArray","isBN","isBigNumber","size","parseInt","length","leftPad","isBuffer","toHex","maxSize","substring","rightPad","encodeFunctionCall","jsonInterface","inputs","decodeParameter","bytes","decodeParameters","outputs","decodeParametersWith","loose","Error","res","decode","returnValue","__length__","output","decodedValue","isStringObject","isStringType","decodeLog","data","topics","_this","notIndexedInputs","indexedParams","topicCount","input","indexed","find","staticType","nonIndexedData","notIndexedParams","module","exports"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/web3-eth-abi/lib/index.js"],"sourcesContent":["/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file index.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@frozeman.de>\n * @date 2018\n */\nvar Buffer = require('buffer').Buffer;\nvar utils = require('web3-utils');\nvar EthersAbiCoder = require('@ethersproject/abi').AbiCoder;\nvar ParamType = require('@ethersproject/abi').ParamType;\nvar ethersAbiCoder = new EthersAbiCoder(function (type, value) {\n    if (type.match(/^u?int/) && !Array.isArray(value) && (!(!!value && typeof value === 'object') || value.constructor.name !== 'BN')) {\n        return value.toString();\n    }\n    return value;\n});\n// result method\nfunction Result() {\n}\n/**\n * ABICoder prototype should be used to encode/decode solidity params of any type\n */\nvar ABICoder = function () {\n};\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeFunctionSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\nABICoder.prototype.encodeFunctionSignature = function (functionName) {\n    if (typeof functionName === 'function' || typeof functionName === 'object' && functionName) {\n        functionName = utils._jsonInterfaceMethodToString(functionName);\n    }\n    return utils.sha3(functionName).slice(0, 10);\n};\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeEventSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\nABICoder.prototype.encodeEventSignature = function (functionName) {\n    if (typeof functionName === 'function' || typeof functionName === 'object' && functionName) {\n        functionName = utils._jsonInterfaceMethodToString(functionName);\n    }\n    return utils.sha3(functionName);\n};\n/**\n * Should be used to encode plain param\n *\n * @method encodeParameter\n *\n * @param {String|Object} type\n * @param {any} param\n *\n * @return {String} encoded plain param\n */\nABICoder.prototype.encodeParameter = function (type, param) {\n    return this.encodeParameters([type], [param]);\n};\n/**\n * Should be used to encode list of params\n *\n * @method encodeParameters\n *\n * @param {Array<String|Object>} types\n * @param {Array<any>} params\n *\n * @return {String} encoded list of params\n */\nABICoder.prototype.encodeParameters = function (types, params) {\n    var self = this;\n    types = self.mapTypes(types);\n    params = params.map(function (param, index) {\n        let type = types[index];\n        if (typeof type === 'object' && type.type) {\n            // We may get a named type of shape {name, type}\n            type = type.type;\n        }\n        param = self.formatParam(type, param);\n        // Format params for tuples\n        if (typeof type === 'string' && type.includes('tuple')) {\n            const coder = ethersAbiCoder._getCoder(ParamType.from(type));\n            const modifyParams = (coder, param) => {\n                if (coder.name === 'array') {\n                    return param.map(p => modifyParams(ethersAbiCoder._getCoder(ParamType.from(coder.type.replace('[]', ''))), p));\n                }\n                coder.coders.forEach((c, i) => {\n                    if (c.name === 'tuple') {\n                        modifyParams(c, param[i]);\n                    }\n                    else {\n                        param[i] = self.formatParam(c.name, param[i]);\n                    }\n                });\n            };\n            modifyParams(coder, param);\n        }\n        return param;\n    });\n    return ethersAbiCoder.encode(types, params);\n};\n/**\n * Map types if simplified format is used\n *\n * @method mapTypes\n * @param {Array} types\n * @return {Array}\n */\nABICoder.prototype.mapTypes = function (types) {\n    var self = this;\n    var mappedTypes = [];\n    types.forEach(function (type) {\n        // Remap `function` type params to bytes24 since Ethers does not\n        // recognize former type. Solidity docs say `Function` is a bytes24\n        // encoding the contract address followed by the function selector hash.\n        if (typeof type === 'object' && type.type === 'function') {\n            type = Object.assign({}, type, { type: \"bytes24\" });\n        }\n        if (self.isSimplifiedStructFormat(type)) {\n            var structName = Object.keys(type)[0];\n            mappedTypes.push(Object.assign(self.mapStructNameAndType(structName), {\n                components: self.mapStructToCoderFormat(type[structName])\n            }));\n            return;\n        }\n        mappedTypes.push(type);\n    });\n    return mappedTypes;\n};\n/**\n * Check if type is simplified struct format\n *\n * @method isSimplifiedStructFormat\n * @param {string | Object} type\n * @returns {boolean}\n */\nABICoder.prototype.isSimplifiedStructFormat = function (type) {\n    return typeof type === 'object' && typeof type.components === 'undefined' && typeof type.name === 'undefined';\n};\n/**\n * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used\n *\n * @method mapStructNameAndType\n * @param {string} structName\n * @return {{type: string, name: *}}\n */\nABICoder.prototype.mapStructNameAndType = function (structName) {\n    var type = 'tuple';\n    if (structName.indexOf('[]') > -1) {\n        type = 'tuple[]';\n        structName = structName.slice(0, -2);\n    }\n    return { type: type, name: structName };\n};\n/**\n * Maps the simplified format in to the expected format of the ABICoder\n *\n * @method mapStructToCoderFormat\n * @param {Object} struct\n * @return {Array}\n */\nABICoder.prototype.mapStructToCoderFormat = function (struct) {\n    var self = this;\n    var components = [];\n    Object.keys(struct).forEach(function (key) {\n        if (typeof struct[key] === 'object') {\n            components.push(Object.assign(self.mapStructNameAndType(key), {\n                components: self.mapStructToCoderFormat(struct[key])\n            }));\n            return;\n        }\n        components.push({\n            name: key,\n            type: struct[key]\n        });\n    });\n    return components;\n};\n/**\n * Handle some formatting of params for backwards compatability with Ethers V4\n *\n * @method formatParam\n * @param {String} - type\n * @param {any} - param\n * @return {any} - The formatted param\n */\nABICoder.prototype.formatParam = function (type, param) {\n    const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\n    const paramTypeBytesArray = new RegExp(/^bytes([0-9]*)\\[\\]$/);\n    const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n    const paramTypeNumberArray = new RegExp(/^(u?int)([0-9]*)\\[\\]$/);\n    // Format BN to string\n    if (utils.isBN(param) || utils.isBigNumber(param)) {\n        return param.toString(10);\n    }\n    if (type.match(paramTypeBytesArray) || type.match(paramTypeNumberArray)) {\n        return param.map(p => this.formatParam(type.replace('[]', ''), p));\n    }\n    // Format correct width for u?int[0-9]*\n    let match = type.match(paramTypeNumber);\n    if (match) {\n        let size = parseInt(match[2] || \"256\");\n        if (size / 8 < param.length) {\n            // pad to correct bit width\n            param = utils.leftPad(param, size);\n        }\n    }\n    // Format correct length for bytes[0-9]+\n    match = type.match(paramTypeBytes);\n    if (match) {\n        if (Buffer.isBuffer(param)) {\n            param = utils.toHex(param);\n        }\n        // format to correct length\n        let size = parseInt(match[1]);\n        if (size) {\n            let maxSize = size * 2;\n            if (param.substring(0, 2) === '0x') {\n                maxSize += 2;\n            }\n            if (param.length < maxSize) {\n                // pad to correct length\n                param = utils.rightPad(param, size * 2);\n            }\n        }\n        // format odd-length bytes to even-length\n        if (param.length % 2 === 1) {\n            param = '0x0' + param.substring(2);\n        }\n    }\n    return param;\n};\n/**\n * Encodes a function call from its json interface and parameters.\n *\n * @method encodeFunctionCall\n * @param {Array} jsonInterface\n * @param {Array} params\n * @return {String} The encoded ABI for this function call\n */\nABICoder.prototype.encodeFunctionCall = function (jsonInterface, params) {\n    return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace('0x', '');\n};\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParameter\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\nABICoder.prototype.decodeParameter = function (type, bytes) {\n    return this.decodeParameters([type], bytes)[0];\n};\n/**\n * Should be used to decode list of params\n *\n * @method decodeParameter\n * @param {Array} outputs\n * @param {String} bytes\n * @return {Array} array of plain params\n */\nABICoder.prototype.decodeParameters = function (outputs, bytes) {\n    return this.decodeParametersWith(outputs, bytes, false);\n};\n/**\n * Should be used to decode list of params\n *\n * @method decodeParameter\n * @param {Array} outputs\n * @param {String} bytes\n * @param {Boolean} loose\n * @return {Array} array of plain params\n */\nABICoder.prototype.decodeParametersWith = function (outputs, bytes, loose) {\n    if (outputs.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {\n        throw new Error('Returned values aren\\'t valid, did it run Out of Gas? ' +\n            'You might also see this error if you are not using the ' +\n            'correct ABI for the contract you are retrieving data from, ' +\n            'requesting data from a block number that does not exist, ' +\n            'or querying a node which is not fully synced.');\n    }\n    var res = ethersAbiCoder.decode(this.mapTypes(outputs), '0x' + bytes.replace(/0x/i, ''), loose);\n    var returnValue = new Result();\n    returnValue.__length__ = 0;\n    outputs.forEach(function (output, i) {\n        var decodedValue = res[returnValue.__length__];\n        const isStringObject = typeof output === 'object' && output.type && output.type === 'string';\n        const isStringType = typeof output === 'string' && output === 'string';\n        // only convert `0x` to null if it's not string value\n        decodedValue = (decodedValue === '0x' && !isStringObject && !isStringType) ? null : decodedValue;\n        returnValue[i] = decodedValue;\n        if ((typeof output === 'function' || !!output && typeof output === 'object') && output.name) {\n            returnValue[output.name] = decodedValue;\n        }\n        returnValue.__length__++;\n    });\n    return returnValue;\n};\n/**\n * Decodes events non- and indexed parameters.\n *\n * @method decodeLog\n * @param {Object} inputs\n * @param {String} data\n * @param {Array} topics\n * @return {Array} array of plain params\n */\nABICoder.prototype.decodeLog = function (inputs, data, topics) {\n    var _this = this;\n    topics = Array.isArray(topics) ? topics : [topics];\n    data = data || '';\n    var notIndexedInputs = [];\n    var indexedParams = [];\n    var topicCount = 0;\n    // TODO check for anonymous logs?\n    inputs.forEach(function (input, i) {\n        if (input.indexed) {\n            indexedParams[i] = (['bool', 'int', 'uint', 'address', 'fixed', 'ufixed'].find(function (staticType) {\n                return input.type.indexOf(staticType) !== -1;\n            })) ? _this.decodeParameter(input.type, topics[topicCount]) : topics[topicCount];\n            topicCount++;\n        }\n        else {\n            notIndexedInputs[i] = input;\n        }\n    });\n    var nonIndexedData = data;\n    var notIndexedParams = (nonIndexedData) ? this.decodeParametersWith(notIndexedInputs, nonIndexedData, true) : [];\n    var returnValue = new Result();\n    returnValue.__length__ = 0;\n    inputs.forEach(function (res, i) {\n        returnValue[i] = (res.type === 'string') ? '' : null;\n        if (typeof notIndexedParams[i] !== 'undefined') {\n            returnValue[i] = notIndexedParams[i];\n        }\n        if (typeof indexedParams[i] !== 'undefined') {\n            returnValue[i] = indexedParams[i];\n        }\n        if (res.name) {\n            returnValue[res.name] = returnValue[i];\n        }\n        returnValue.__length__++;\n    });\n    return returnValue;\n};\nvar coder = new ABICoder();\nmodule.exports = coder;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}