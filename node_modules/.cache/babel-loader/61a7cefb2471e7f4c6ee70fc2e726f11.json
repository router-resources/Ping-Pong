{"ast":null,"code":"import { INTERNAL_ERROR, SERVER_ERROR_CODE_RANGE, RESERVED_ERROR_CODES, STANDARD_ERROR_MAP } from \"./constants\";\nexport function isServerErrorCode(code) {\n  return code <= SERVER_ERROR_CODE_RANGE[0] && code >= SERVER_ERROR_CODE_RANGE[1];\n}\nexport function isReservedErrorCode(code) {\n  return RESERVED_ERROR_CODES.includes(code);\n}\nexport function isValidErrorCode(code) {\n  return typeof code === \"number\";\n}\nexport function getError(type) {\n  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {\n    return STANDARD_ERROR_MAP[INTERNAL_ERROR];\n  }\n  return STANDARD_ERROR_MAP[type];\n}\nexport function getErrorByCode(code) {\n  const match = Object.values(STANDARD_ERROR_MAP).find(e => e.code === code);\n  if (!match) {\n    return STANDARD_ERROR_MAP[INTERNAL_ERROR];\n  }\n  return match;\n}\nexport function validateJsonRpcError(response) {\n  if (typeof response.error.code === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing code for JSON-RPC error\"\n    };\n  }\n  if (typeof response.error.message === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing message for JSON-RPC error\"\n    };\n  }\n  if (!isValidErrorCode(response.error.code)) {\n    return {\n      valid: false,\n      error: `Invalid error code type for JSON-RPC: ${response.error.code}`\n    };\n  }\n  if (isReservedErrorCode(response.error.code)) {\n    const error = getErrorByCode(response.error.code);\n    if (error.message !== STANDARD_ERROR_MAP[INTERNAL_ERROR].message && response.error.message === error.message) {\n      return {\n        valid: false,\n        error: `Invalid error code message for JSON-RPC: ${response.error.code}`\n      };\n    }\n  }\n  return {\n    valid: true\n  };\n}\nexport function parseConnectionError(e, url, type) {\n  return e.message.includes(\"getaddrinfo ENOTFOUND\") || e.message.includes(\"connect ECONNREFUSED\") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e;\n}","map":{"version":3,"mappings":"AACA,SACEA,cAAc,EACdC,uBAAuB,EACvBC,oBAAoB,EACpBC,kBAAkB,QACb,aAAa;AAGpB,OAAM,SAAUC,iBAAiB,CAACC,IAAY;EAC5C,OAAOA,IAAI,IAAIJ,uBAAuB,CAAC,CAAC,CAAC,IAAII,IAAI,IAAIJ,uBAAuB,CAAC,CAAC,CAAC;AACjF;AAEA,OAAM,SAAUK,mBAAmB,CAACD,IAAY;EAC9C,OAAOH,oBAAoB,CAACK,QAAQ,CAACF,IAAI,CAAC;AAC5C;AAEA,OAAM,SAAUG,gBAAgB,CAACH,IAAY;EAC3C,OAAO,OAAOA,IAAI,KAAK,QAAQ;AACjC;AAEA,OAAM,SAAUI,QAAQ,CAACC,IAAY;EACnC,IAAI,CAACC,MAAM,CAACC,IAAI,CAACT,kBAAkB,CAAC,CAACI,QAAQ,CAACG,IAAI,CAAC,EAAE;IACnD,OAAOP,kBAAkB,CAACH,cAAc,CAAC;;EAE3C,OAAOG,kBAAkB,CAACO,IAAI,CAAC;AACjC;AAEA,OAAM,SAAUG,cAAc,CAACR,IAAY;EACzC,MAAMS,KAAK,GAAGH,MAAM,CAACI,MAAM,CAACZ,kBAAkB,CAAC,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACZ,IAAI,KAAKA,IAAI,CAAC;EAC1E,IAAI,CAACS,KAAK,EAAE;IACV,OAAOX,kBAAkB,CAACH,cAAc,CAAC;;EAE3C,OAAOc,KAAK;AACd;AAEA,OAAM,SAAUI,oBAAoB,CAACC,QAAsB;EACzD,IAAI,OAAOA,QAAQ,CAACC,KAAK,CAACf,IAAI,KAAK,WAAW,EAAE;IAC9C,OAAO;MAAEgB,KAAK,EAAE,KAAK;MAAED,KAAK,EAAE;IAAiC,CAAE;;EAEnE,IAAI,OAAOD,QAAQ,CAACC,KAAK,CAACE,OAAO,KAAK,WAAW,EAAE;IACjD,OAAO;MAAED,KAAK,EAAE,KAAK;MAAED,KAAK,EAAE;IAAoC,CAAE;;EAEtE,IAAI,CAACZ,gBAAgB,CAACW,QAAQ,CAACC,KAAK,CAACf,IAAI,CAAC,EAAE;IAC1C,OAAO;MACLgB,KAAK,EAAE,KAAK;MACZD,KAAK,EAAE,yCAAyCD,QAAQ,CAACC,KAAK,CAACf,IAAI;KACpE;;EAEH,IAAIC,mBAAmB,CAACa,QAAQ,CAACC,KAAK,CAACf,IAAI,CAAC,EAAE;IAC5C,MAAMe,KAAK,GAAGP,cAAc,CAACM,QAAQ,CAACC,KAAK,CAACf,IAAI,CAAC;IACjD,IACEe,KAAK,CAACE,OAAO,KAAKnB,kBAAkB,CAACH,cAAc,CAAC,CAACsB,OAAO,IAC5DH,QAAQ,CAACC,KAAK,CAACE,OAAO,KAAKF,KAAK,CAACE,OAAO,EACxC;MACA,OAAO;QACLD,KAAK,EAAE,KAAK;QACZD,KAAK,EAAE,4CAA4CD,QAAQ,CAACC,KAAK,CAACf,IAAI;OACvE;;;EAGL,OAAO;IAAEgB,KAAK,EAAE;EAAI,CAAE;AACxB;AAEA,OAAM,SAAUE,oBAAoB,CAACN,CAAQ,EAAEO,GAAW,EAAEd,IAAY;EACtE,OAAOO,CAAC,CAACK,OAAO,CAACf,QAAQ,CAAC,uBAAuB,CAAC,IAAIU,CAAC,CAACK,OAAO,CAACf,QAAQ,CAAC,sBAAsB,CAAC,GAC5F,IAAIkB,KAAK,CAAC,eAAef,IAAI,eAAec,GAAG,EAAE,CAAC,GAClDP,CAAC;AACP","names":["INTERNAL_ERROR","SERVER_ERROR_CODE_RANGE","RESERVED_ERROR_CODES","STANDARD_ERROR_MAP","isServerErrorCode","code","isReservedErrorCode","includes","isValidErrorCode","getError","type","Object","keys","getErrorByCode","match","values","find","e","validateJsonRpcError","response","error","valid","message","parseConnectionError","url","Error"],"sourceRoot":"","sources":["../../src/error.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}