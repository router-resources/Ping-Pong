{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recoverTypedSignature = exports.signTypedData = exports.typedSignatureHash = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = exports.SignTypedDataVersion = void 0;\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst ethereumjs_abi_1 = require(\"ethereumjs-abi\");\nconst utils_1 = require(\"./utils\");\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\nvar SignTypedDataVersion;\n(function (SignTypedDataVersion) {\n  SignTypedDataVersion[\"V1\"] = \"V1\";\n  SignTypedDataVersion[\"V3\"] = \"V3\";\n  SignTypedDataVersion[\"V4\"] = \"V4\";\n})(SignTypedDataVersion = exports.SignTypedDataVersion || (exports.SignTypedDataVersion = {}));\nexports.TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            type: {\n              type: 'string',\n              enum: getSolidityTypes()\n            }\n          },\n          required: ['name', 'type']\n        }\n      }\n    },\n    primaryType: {\n      type: 'string'\n    },\n    domain: {\n      type: 'object'\n    },\n    message: {\n      type: 'object'\n    }\n  },\n  required: ['types', 'primaryType', 'domain', 'message']\n};\n/**\n * Get a list of all Solidity types.\n *\n * @returns A list of all Solidity types.\n */\nfunction getSolidityTypes() {\n  const types = ['bool', 'address', 'string', 'bytes'];\n  const ints = Array.from(new Array(32)).map((_, index) => `int${(index + 1) * 8}`);\n  const uints = Array.from(new Array(32)).map((_, index) => `uint${(index + 1) * 8}`);\n  const bytes = Array.from(new Array(32)).map((_, index) => `bytes${index + 1}`);\n  return [...types, ...ints, ...uints, ...bytes];\n}\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\nfunction validateVersion(version, allowedVersions) {\n  if (!Object.keys(SignTypedDataVersion).includes(version)) {\n    throw new Error(`Invalid version: '${version}'`);\n  } else if (allowedVersions && !allowedVersions.includes(version)) {\n    throw new Error(`SignTypedDataVersion not allowed: '${version}'. Allowed versions are: ${allowedVersions.join(', ')}`);\n  }\n}\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\nfunction encodeField(types, name, type, value, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  if (types[type] !== undefined) {\n    return ['bytes32', version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n    ? '0x0000000000000000000000000000000000000000000000000000000000000000' : ethereumjs_util_1.keccak(encodeData(type, value, types, version))];\n  }\n  if (value === undefined) {\n    throw new Error(`missing value for field ${name} of type ${type}`);\n  }\n  if (type === 'bytes') {\n    return ['bytes32', ethereumjs_util_1.keccak(value)];\n  }\n  if (type === 'string') {\n    // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n    if (typeof value === 'string') {\n      value = Buffer.from(value, 'utf8');\n    }\n    return ['bytes32', ethereumjs_util_1.keccak(value)];\n  }\n  if (type.lastIndexOf(']') === type.length - 1) {\n    if (version === SignTypedDataVersion.V3) {\n      throw new Error('Arrays are unimplemented in encodeData; use V4 extension');\n    }\n    const parsedType = type.slice(0, type.lastIndexOf('['));\n    const typeValuePairs = value.map(item => encodeField(types, name, parsedType, item, version));\n    return ['bytes32', ethereumjs_util_1.keccak(ethereumjs_abi_1.rawEncode(typeValuePairs.map(_ref => {\n      let [t] = _ref;\n      return t;\n    }), typeValuePairs.map(_ref2 => {\n      let [, v] = _ref2;\n      return v;\n    })))];\n  }\n  return [type, value];\n}\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\nfunction encodeData(primaryType, data, types, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  const encodedTypes = ['bytes32'];\n  const encodedValues = [hashType(primaryType, types)];\n  for (const field of types[primaryType]) {\n    if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n      continue;\n    }\n    const [type, value] = encodeField(types, field.name, field.type, data[field.name], version);\n    encodedTypes.push(type);\n    encodedValues.push(value);\n  }\n  return ethereumjs_abi_1.rawEncode(encodedTypes, encodedValues);\n}\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\nfunction encodeType(primaryType, types) {\n  let result = '';\n  const unsortedDeps = findTypeDependencies(primaryType, types);\n  unsortedDeps.delete(primaryType);\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n  for (const type of deps) {\n    const children = types[type];\n    if (!children) {\n      throw new Error(`No type definition specified: ${type}`);\n    }\n    result += `${type}(${types[type].map(_ref3 => {\n      let {\n        name,\n        type: t\n      } = _ref3;\n      return `${t} ${name}`;\n    }).join(',')})`;\n  }\n  return result;\n}\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\nfunction findTypeDependencies(primaryType, types) {\n  let results = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n  [primaryType] = primaryType.match(/^\\w*/u);\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n  results.add(primaryType);\n  for (const field of types[primaryType]) {\n    findTypeDependencies(field.type, types, results);\n  }\n  return results;\n}\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\nfunction hashStruct(primaryType, data, types, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  return ethereumjs_util_1.keccak(encodeData(primaryType, data, types, version));\n}\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\nfunction hashType(primaryType, types) {\n  return ethereumjs_util_1.keccak(encodeType(primaryType, types));\n}\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\nfunction sanitizeData(data) {\n  const sanitizedData = {};\n  for (const key in exports.TYPED_MESSAGE_SCHEMA.properties) {\n    if (data[key]) {\n      sanitizedData[key] = data[key];\n    }\n  }\n  if ('types' in sanitizedData) {\n    sanitizedData.types = Object.assign({\n      EIP712Domain: []\n    }, sanitizedData.types);\n  }\n  return sanitizedData;\n}\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\nfunction eip712Hash(typedData, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  const sanitizedData = sanitizeData(typedData);\n  const parts = [Buffer.from('1901', 'hex')];\n  parts.push(hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, version));\n  if (sanitizedData.primaryType !== 'EIP712Domain') {\n    parts.push(hashStruct(\n    // TODO: Validate that this is a string, so this type cast can be removed.\n    sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, version));\n  }\n  return ethereumjs_util_1.keccak(Buffer.concat(parts));\n}\n/**\n * A collection of utility functions used for signing typed data.\n */\nexports.TypedDataUtils = {\n  encodeData,\n  encodeType,\n  findTypeDependencies,\n  hashStruct,\n  hashType,\n  sanitizeData,\n  eip712Hash\n};\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\nfunction typedSignatureHash(typedData) {\n  const hashBuffer = _typedSignatureHash(typedData);\n  return ethereumjs_util_1.bufferToHex(hashBuffer);\n}\nexports.typedSignatureHash = typedSignatureHash;\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\nfunction _typedSignatureHash(typedData) {\n  const error = new Error('Expect argument to be non-empty array');\n  if (typeof typedData !== 'object' || !('length' in typedData) || !typedData.length) {\n    throw error;\n  }\n  const data = typedData.map(function (e) {\n    if (e.type !== 'bytes') {\n      return e.value;\n    }\n    return utils_1.legacyToBuffer(e.value);\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n    return `${e.type} ${e.name}`;\n  });\n  return ethereumjs_abi_1.soliditySHA3(['bytes32', 'bytes32'], [ethereumjs_abi_1.soliditySHA3(new Array(typedData.length).fill('string'), schema), ethereumjs_abi_1.soliditySHA3(types, data)]);\n}\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nfunction signTypedData(_ref4) {\n  let {\n    privateKey,\n    data,\n    version\n  } = _ref4;\n  validateVersion(version);\n  if (utils_1.isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (utils_1.isNullish(privateKey)) {\n    throw new Error('Missing private key parameter');\n  }\n  const messageHash = version === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version);\n  const sig = ethereumjs_util_1.ecsign(messageHash, privateKey);\n  return utils_1.concatSig(ethereumjs_util_1.toBuffer(sig.v), sig.r, sig.s);\n}\nexports.signTypedData = signTypedData;\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\nfunction recoverTypedSignature(_ref5) {\n  let {\n    data,\n    signature,\n    version\n  } = _ref5;\n  validateVersion(version);\n  if (utils_1.isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (utils_1.isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n  const messageHash = version === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version);\n  const publicKey = utils_1.recoverPublicKey(messageHash, signature);\n  const sender = ethereumjs_util_1.publicToAddress(publicKey);\n  return ethereumjs_util_1.bufferToHex(sender);\n}\nexports.recoverTypedSignature = recoverTypedSignature;","map":{"version":3,"mappings":"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","names":["SignTypedDataVersion","exports","type","properties","types","additionalProperties","items","name","enum","getSolidityTypes","required","primaryType","domain","message","ints","Array","from","map","_","index","uints","bytes","validateVersion","version","allowedVersions","Object","keys","includes","Error","join","encodeField","value","V3","V4","undefined","ethereumjs_util_1","encodeData","Buffer","lastIndexOf","length","parsedType","slice","typeValuePairs","item","ethereumjs_abi_1","t","v","data","encodedTypes","encodedValues","hashType","field","push","encodeType","result","unsortedDeps","findTypeDependencies","delete","deps","sort","children","results","Set","match","has","add","hashStruct","sanitizeData","sanitizedData","key","EIP712Domain","eip712Hash","typedData","parts","concat","typedSignatureHash","hashBuffer","_typedSignatureHash","error","e","utils_1","schema","fill","signTypedData","privateKey","messageHash","V1","sig","r","s","recoverTypedSignature","signature","publicKey","sender"],"sourceRoot":"","sources":["../src/sign-typed-data.ts"],"sourcesContent":["import {\n  bufferToHex,\n  ecsign,\n  keccak,\n  publicToAddress,\n  toBuffer,\n} from 'ethereumjs-util';\nimport { rawEncode, soliditySHA3 } from 'ethereumjs-abi';\n\nimport {\n  concatSig,\n  isNullish,\n  legacyToBuffer,\n  recoverPublicKey,\n} from './utils';\n\n/**\n * This is the message format used for `V1` of `signTypedData`.\n */\nexport type TypedDataV1 = TypedDataV1Field[];\n\n/**\n * This represents a single field in a `V1` `signTypedData` message.\n *\n * @property name - The name of the field.\n * @property type - The type of a field (must be a supported Solidity type).\n * @property value - The value of the field.\n */\nexport interface TypedDataV1Field {\n  name: string;\n  type: string;\n  value: any;\n}\n\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\nexport enum SignTypedDataVersion {\n  V1 = 'V1',\n  V3 = 'V3',\n  V4 = 'V4',\n}\n\nexport interface MessageTypeProperty {\n  name: string;\n  type: string;\n}\n\nexport interface MessageTypes {\n  EIP712Domain: MessageTypeProperty[];\n  [additionalProperties: string]: MessageTypeProperty[];\n}\n\n/**\n * This is the message format used for `signTypeData`, for all versions\n * except `V1`.\n *\n * @template T - The custom types used by this message.\n * @property types - The custom types used by this message.\n * @property primaryType - The type of the message.\n * @property domain - Signing domain metadata. The signing domain is the intended context for the\n * signature (e.g. the dapp, protocol, etc. that it's intended for). This data is used to\n * construct the domain seperator of the message.\n * @property domain.name - The name of the signing domain.\n * @property domain.version - The current major version of the signing domain.\n * @property domain.chainId - The chain ID of the signing domain.\n * @property domain.verifyingContract - The address of the contract that can verify the signature.\n * @property domain.salt - A disambiguating salt for the protocol.\n * @property message - The message to be signed.\n */\nexport interface TypedMessage<T extends MessageTypes> {\n  types: T;\n  primaryType: keyof T;\n  domain: {\n    name?: string;\n    version?: string;\n    chainId?: number;\n    verifyingContract?: string;\n    salt?: ArrayBuffer;\n  };\n  message: Record<string, unknown>;\n}\n\nexport const TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: { type: 'string' },\n            type: { type: 'string', enum: getSolidityTypes() },\n          },\n          required: ['name', 'type'],\n        },\n      },\n    },\n    primaryType: { type: 'string' },\n    domain: { type: 'object' },\n    message: { type: 'object' },\n  },\n  required: ['types', 'primaryType', 'domain', 'message'],\n};\n\n/**\n * Get a list of all Solidity types.\n *\n * @returns A list of all Solidity types.\n */\nfunction getSolidityTypes() {\n  const types = ['bool', 'address', 'string', 'bytes'];\n  const ints = Array.from(new Array(32)).map(\n    (_, index) => `int${(index + 1) * 8}`,\n  );\n  const uints = Array.from(new Array(32)).map(\n    (_, index) => `uint${(index + 1) * 8}`,\n  );\n  const bytes = Array.from(new Array(32)).map(\n    (_, index) => `bytes${index + 1}`,\n  );\n\n  return [...types, ...ints, ...uints, ...bytes];\n}\n\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\nfunction validateVersion(\n  version: SignTypedDataVersion,\n  allowedVersions?: SignTypedDataVersion[],\n) {\n  if (!Object.keys(SignTypedDataVersion).includes(version)) {\n    throw new Error(`Invalid version: '${version}'`);\n  } else if (allowedVersions && !allowedVersions.includes(version)) {\n    throw new Error(\n      `SignTypedDataVersion not allowed: '${version}'. Allowed versions are: ${allowedVersions.join(\n        ', ',\n      )}`,\n    );\n  }\n}\n\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\nfunction encodeField(\n  types: Record<string, MessageTypeProperty[]>,\n  name: string,\n  type: string,\n  value: any,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): [type: string, value: any] {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  if (types[type] !== undefined) {\n    return [\n      'bytes32',\n      version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n        ? '0x0000000000000000000000000000000000000000000000000000000000000000'\n        : keccak(encodeData(type, value, types, version)),\n    ];\n  }\n\n  if (value === undefined) {\n    throw new Error(`missing value for field ${name} of type ${type}`);\n  }\n\n  if (type === 'bytes') {\n    return ['bytes32', keccak(value)];\n  }\n\n  if (type === 'string') {\n    // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n    if (typeof value === 'string') {\n      value = Buffer.from(value, 'utf8');\n    }\n    return ['bytes32', keccak(value)];\n  }\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    if (version === SignTypedDataVersion.V3) {\n      throw new Error(\n        'Arrays are unimplemented in encodeData; use V4 extension',\n      );\n    }\n    const parsedType = type.slice(0, type.lastIndexOf('['));\n    const typeValuePairs = value.map((item) =>\n      encodeField(types, name, parsedType, item, version),\n    );\n    return [\n      'bytes32',\n      keccak(\n        rawEncode(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ];\n  }\n\n  return [type, value];\n}\n\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\nfunction encodeData(\n  primaryType: string,\n  data: Record<string, unknown>,\n  types: Record<string, MessageTypeProperty[]>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const encodedTypes = ['bytes32'];\n  const encodedValues: unknown[] = [hashType(primaryType, types)];\n\n  for (const field of types[primaryType]) {\n    if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n      continue;\n    }\n    const [type, value] = encodeField(\n      types,\n      field.name,\n      field.type,\n      data[field.name],\n      version,\n    );\n    encodedTypes.push(type);\n    encodedValues.push(value);\n  }\n\n  return rawEncode(encodedTypes, encodedValues);\n}\n\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\nfunction encodeType(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n): string {\n  let result = '';\n  const unsortedDeps = findTypeDependencies(primaryType, types);\n  unsortedDeps.delete(primaryType);\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n  for (const type of deps) {\n    const children = types[type];\n    if (!children) {\n      throw new Error(`No type definition specified: ${type}`);\n    }\n\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`;\n  }\n\n  return result;\n}\n\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\nfunction findTypeDependencies(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n  results: Set<string> = new Set(),\n): Set<string> {\n  [primaryType] = primaryType.match(/^\\w*/u);\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n\n  results.add(primaryType);\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies(field.type, types, results);\n  }\n  return results;\n}\n\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\nfunction hashStruct(\n  primaryType: string,\n  data: Record<string, unknown>,\n  types: Record<string, MessageTypeProperty[]>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  return keccak(encodeData(primaryType, data, types, version));\n}\n\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\nfunction hashType(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n): Buffer {\n  return keccak(encodeType(primaryType, types));\n}\n\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\nfunction sanitizeData<T extends MessageTypes>(\n  data: TypedMessage<T>,\n): TypedMessage<T> {\n  const sanitizedData: Partial<TypedMessage<T>> = {};\n  for (const key in TYPED_MESSAGE_SCHEMA.properties) {\n    if (data[key]) {\n      sanitizedData[key] = data[key];\n    }\n  }\n  if ('types' in sanitizedData) {\n    sanitizedData.types = { EIP712Domain: [], ...sanitizedData.types };\n  }\n  return sanitizedData as Required<TypedMessage<T>>;\n}\n\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\nfunction eip712Hash<T extends MessageTypes>(\n  typedData: TypedMessage<T>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const sanitizedData = sanitizeData(typedData);\n  const parts = [Buffer.from('1901', 'hex')];\n  parts.push(\n    hashStruct(\n      'EIP712Domain',\n      sanitizedData.domain,\n      sanitizedData.types,\n      version,\n    ),\n  );\n  if (sanitizedData.primaryType !== 'EIP712Domain') {\n    parts.push(\n      hashStruct(\n        // TODO: Validate that this is a string, so this type cast can be removed.\n        sanitizedData.primaryType as string,\n        sanitizedData.message,\n        sanitizedData.types,\n        version,\n      ),\n    );\n  }\n  return keccak(Buffer.concat(parts));\n}\n\n/**\n * A collection of utility functions used for signing typed data.\n */\nexport const TypedDataUtils = {\n  encodeData,\n  encodeType,\n  findTypeDependencies,\n  hashStruct,\n  hashType,\n  sanitizeData,\n  eip712Hash,\n};\n\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\nexport function typedSignatureHash(typedData: TypedDataV1Field[]): string {\n  const hashBuffer = _typedSignatureHash(typedData);\n  return bufferToHex(hashBuffer);\n}\n\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\nfunction _typedSignatureHash(typedData: TypedDataV1): Buffer {\n  const error = new Error('Expect argument to be non-empty array');\n  if (\n    typeof typedData !== 'object' ||\n    !('length' in typedData) ||\n    !typedData.length\n  ) {\n    throw error;\n  }\n\n  const data = typedData.map(function (e) {\n    if (e.type !== 'bytes') {\n      return e.value;\n    }\n\n    return legacyToBuffer(e.value);\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n    return `${e.type} ${e.name}`;\n  });\n\n  return soliditySHA3(\n    ['bytes32', 'bytes32'],\n    [\n      soliditySHA3(new Array(typedData.length).fill('string'), schema),\n      soliditySHA3(types, data),\n    ],\n  );\n}\n\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nexport function signTypedData<\n  V extends SignTypedDataVersion,\n  T extends MessageTypes,\n>({\n  privateKey,\n  data,\n  version,\n}: {\n  privateKey: Buffer;\n  data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n  version: V;\n}): string {\n  validateVersion(version);\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(privateKey)) {\n    throw new Error('Missing private key parameter');\n  }\n\n  const messageHash =\n    version === SignTypedDataVersion.V1\n      ? _typedSignatureHash(data as TypedDataV1)\n      : TypedDataUtils.eip712Hash(\n          data as TypedMessage<T>,\n          version as SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n        );\n  const sig = ecsign(messageHash, privateKey);\n  return concatSig(toBuffer(sig.v), sig.r, sig.s);\n}\n\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\nexport function recoverTypedSignature<\n  V extends SignTypedDataVersion,\n  T extends MessageTypes,\n>({\n  data,\n  signature,\n  version,\n}: {\n  data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n  signature: string;\n  version: V;\n}): string {\n  validateVersion(version);\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n\n  const messageHash =\n    version === SignTypedDataVersion.V1\n      ? _typedSignatureHash(data as TypedDataV1)\n      : TypedDataUtils.eip712Hash(\n          data as TypedMessage<T>,\n          version as SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n        );\n  const publicKey = recoverPublicKey(messageHash, signature);\n  const sender = publicToAddress(publicKey);\n  return bufferToHex(sender);\n}\n"]},"metadata":{},"sourceType":"script"}