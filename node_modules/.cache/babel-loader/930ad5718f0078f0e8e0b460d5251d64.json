{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Description, defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n//export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\nexport class ForkEvent extends Description {\n  static isForkEvent(value) {\n    return !!(value && value._isForkEvent);\n  }\n}\nexport class BlockForkEvent extends ForkEvent {\n  constructor(blockHash, expiry) {\n    if (!isHexString(blockHash, 32)) {\n      logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n    }\n    super({\n      _isForkEvent: true,\n      _isBlockForkEvent: true,\n      expiry: expiry || 0,\n      blockHash: blockHash\n    });\n  }\n}\nexport class TransactionForkEvent extends ForkEvent {\n  constructor(hash, expiry) {\n    if (!isHexString(hash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n    }\n    super({\n      _isForkEvent: true,\n      _isTransactionForkEvent: true,\n      expiry: expiry || 0,\n      hash: hash\n    });\n  }\n}\nexport class TransactionOrderForkEvent extends ForkEvent {\n  constructor(beforeHash, afterHash, expiry) {\n    if (!isHexString(beforeHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n    }\n    if (!isHexString(afterHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n    }\n    super({\n      _isForkEvent: true,\n      _isTransactionOrderForkEvent: true,\n      expiry: expiry || 0,\n      beforeHash: beforeHash,\n      afterHash: afterHash\n    });\n  }\n}\n///////////////////////////////\n// Exported Abstracts\nexport class Provider {\n  constructor() {\n    logger.checkAbstract(new.target, Provider);\n    defineReadOnly(this, \"_isProvider\", true);\n  }\n  getFeeData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        block,\n        gasPrice\n      } = yield resolveProperties({\n        block: this.getBlock(\"latest\"),\n        gasPrice: this.getGasPrice().catch(error => {\n          // @TODO: Why is this now failing on Calaveras?\n          //console.log(error);\n          return null;\n        })\n      });\n      let lastBaseFeePerGas = null,\n        maxFeePerGas = null,\n        maxPriorityFeePerGas = null;\n      if (block && block.baseFeePerGas) {\n        // We may want to compute this more accurately in the future,\n        // using the formula \"check if the base fee is correct\".\n        // See: https://eips.ethereum.org/EIPS/eip-1559\n        lastBaseFeePerGas = block.baseFeePerGas;\n        maxPriorityFeePerGas = BigNumber.from(\"1500000000\");\n        maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n      }\n      return {\n        lastBaseFeePerGas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        gasPrice\n      };\n    });\n  }\n  // Alias for \"on\"\n  addListener(eventName, listener) {\n    return this.on(eventName, listener);\n  }\n  // Alias for \"off\"\n  removeListener(eventName, listener) {\n    return this.off(eventName, listener);\n  }\n  static isProvider(value) {\n    return !!(value && value._isProvider);\n  }\n}","map":{"version":3,"mappings":"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","names":["BigNumber","isHexString","Description","defineReadOnly","resolveProperties","Logger","version","logger","ForkEvent","isForkEvent","value","_isForkEvent","BlockForkEvent","constructor","blockHash","expiry","throwArgumentError","_isBlockForkEvent","TransactionForkEvent","hash","_isTransactionForkEvent","TransactionOrderForkEvent","beforeHash","afterHash","_isTransactionOrderForkEvent","Provider","checkAbstract","new","target","getFeeData","block","gasPrice","getBlock","getGasPrice","catch","error","lastBaseFeePerGas","maxFeePerGas","maxPriorityFeePerGas","baseFeePerGas","from","mul","add","addListener","eventName","listener","on","removeListener","off","isProvider","_isProvider"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}