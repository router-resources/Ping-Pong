{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/solana-embed';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, WalletInitializationError, WalletLoginError } from '@web3auth/base';\nimport { TorusInjectedProvider } from '@web3auth/solana-provider';\nimport log from 'loglevel';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass SolanaWalletAdapter extends BaseAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_SOLANA);\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n    _defineProperty(this, \"torusInstance\", null);\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n    _defineProperty(this, \"initParams\", void 0);\n    _defineProperty(this, \"loginSettings\", {});\n    _defineProperty(this, \"solanaProvider\", null);\n    _defineProperty(this, \"rehydrated\", false);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      var _this$solanaProvider;\n      return ((_this$solanaProvider = this.solanaProvider) === null || _this$solanaProvider === void 0 ? void 0 : _this$solanaProvider.provider) || null;\n    }\n    return null;\n  }\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    let network;\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const {\n        blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        rpcTarget,\n        chainId\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        logo: \"\"\n      };\n    } else {\n      const {\n        chainId,\n        blockExplorer,\n        displayName,\n        rpcTarget,\n        ticker,\n        tickerName\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        tickerName,\n        ticker,\n        logo: \"\"\n      };\n    }\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_SOLANA\n    });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      await this.solanaProvider.setupProvider(this.torusInstance.provider);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_SOLANA,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n  setAdapterSettings(_) {}\n}\nexport { SolanaWalletAdapter };","map":{"version":3,"mappings":"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","names":["SolanaWalletAdapter","BaseAdapter","constructor","params","WALLET_ADAPTERS","TORUS_SOLANA","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","torusWalletOptions","adapterSettings","initParams","loginSettings","chainConfig","provider","status","CONNECTED","solanaProvider","_","Error","init","options","checkInitializationRequirements","network","getChainConfig","blockExplorer","displayName","ticker","tickerName","rpcTarget","chainId","blockExplorerUrl","logo","torusInstance","Torus","showTorusButton","TorusInjectedProvider","config","READY","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","error","log","ERRORED","checkConnectionRequirements","WalletInitializationError","notReady","CONNECTING","adapter","login","setupProvider","reconnected","WalletLoginError","connectionError","disconnect","cleanup","notConnectedError","logout","DISCONNECTED","getUserInfo","userInfo","setAdapterSettings"],"sources":["../src/solanaWalletAdapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}