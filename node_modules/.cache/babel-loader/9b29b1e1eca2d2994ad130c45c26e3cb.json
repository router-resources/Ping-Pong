{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nfunction isRenetworkable(value) {\n  return value && typeof value.renetwork === \"function\";\n}\nfunction ethDefaultProvider(network) {\n  const func = function (providers, options) {\n    if (options == null) {\n      options = {};\n    }\n    const providerList = [];\n    if (providers.InfuraProvider) {\n      try {\n        providerList.push(new providers.InfuraProvider(network, options.infura));\n      } catch (error) {}\n    }\n    if (providers.EtherscanProvider) {\n      try {\n        providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n      } catch (error) {}\n    }\n    if (providers.AlchemyProvider) {\n      try {\n        providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n      } catch (error) {}\n    }\n    if (providers.PocketProvider) {\n      // These networks are currently faulty on Pocket as their\n      // network does not handle the Berlin hardfork, which is\n      // live on these ones.\n      // @TODO: This goes away once Pocket has upgraded their nodes\n      const skip = [\"goerli\", \"ropsten\", \"rinkeby\"];\n      try {\n        const provider = new providers.PocketProvider(network);\n        if (provider.network && skip.indexOf(provider.network.name) === -1) {\n          providerList.push(provider);\n        }\n      } catch (error) {}\n    }\n    if (providers.CloudflareProvider) {\n      try {\n        providerList.push(new providers.CloudflareProvider(network));\n      } catch (error) {}\n    }\n    if (providerList.length === 0) {\n      return null;\n    }\n    if (providers.FallbackProvider) {\n      let quorum = 1;\n      if (options.quorum != null) {\n        quorum = options.quorum;\n      } else if (network === \"homestead\") {\n        quorum = 2;\n      }\n      return new providers.FallbackProvider(providerList, quorum);\n    }\n    return providerList[0];\n  };\n  func.renetwork = function (network) {\n    return ethDefaultProvider(network);\n  };\n  return func;\n}\nfunction etcDefaultProvider(url, network) {\n  const func = function (providers, options) {\n    if (providers.JsonRpcProvider) {\n      return new providers.JsonRpcProvider(url, network);\n    }\n    return null;\n  };\n  func.renetwork = function (network) {\n    return etcDefaultProvider(url, network);\n  };\n  return func;\n}\nconst homestead = {\n  chainId: 1,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"homestead\",\n  _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n  chainId: 3,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"ropsten\",\n  _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n  chainId: 63,\n  name: \"classicMordor\",\n  _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n// See: https://chainlist.org\nconst networks = {\n  unspecified: {\n    chainId: 0,\n    name: \"unspecified\"\n  },\n  homestead: homestead,\n  mainnet: homestead,\n  morden: {\n    chainId: 2,\n    name: \"morden\"\n  },\n  ropsten: ropsten,\n  testnet: ropsten,\n  rinkeby: {\n    chainId: 4,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"rinkeby\",\n    _defaultProvider: ethDefaultProvider(\"rinkeby\")\n  },\n  kovan: {\n    chainId: 42,\n    name: \"kovan\",\n    _defaultProvider: ethDefaultProvider(\"kovan\")\n  },\n  goerli: {\n    chainId: 5,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"goerli\",\n    _defaultProvider: ethDefaultProvider(\"goerli\")\n  },\n  kintsugi: {\n    chainId: 1337702,\n    name: \"kintsugi\"\n  },\n  // ETC (See: #351)\n  classic: {\n    chainId: 61,\n    name: \"classic\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n  },\n  classicMorden: {\n    chainId: 62,\n    name: \"classicMorden\"\n  },\n  classicMordor: classicMordor,\n  classicTestnet: classicMordor,\n  classicKotti: {\n    chainId: 6,\n    name: \"classicKotti\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n  },\n  xdai: {\n    chainId: 100,\n    name: \"xdai\"\n  },\n  matic: {\n    chainId: 137,\n    name: \"matic\"\n  },\n  maticmum: {\n    chainId: 80001,\n    name: \"maticmum\"\n  },\n  optimism: {\n    chainId: 10,\n    name: \"optimism\"\n  },\n  \"optimism-kovan\": {\n    chainId: 69,\n    name: \"optimism-kovan\"\n  },\n  \"optimism-goerli\": {\n    chainId: 420,\n    name: \"optimism-goerli\"\n  },\n  arbitrum: {\n    chainId: 42161,\n    name: \"arbitrum\"\n  },\n  \"arbitrum-rinkeby\": {\n    chainId: 421611,\n    name: \"arbitrum-rinkeby\"\n  },\n  bnb: {\n    chainId: 56,\n    name: \"bnb\"\n  },\n  bnbt: {\n    chainId: 97,\n    name: \"bnbt\"\n  }\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network) {\n  // No network (null)\n  if (network == null) {\n    return null;\n  }\n  if (typeof network === \"number\") {\n    for (const name in networks) {\n      const standard = networks[name];\n      if (standard.chainId === network) {\n        return {\n          name: standard.name,\n          chainId: standard.chainId,\n          ensAddress: standard.ensAddress || null,\n          _defaultProvider: standard._defaultProvider || null\n        };\n      }\n    }\n    return {\n      chainId: network,\n      name: \"unknown\"\n    };\n  }\n  if (typeof network === \"string\") {\n    const standard = networks[network];\n    if (standard == null) {\n      return null;\n    }\n    return {\n      name: standard.name,\n      chainId: standard.chainId,\n      ensAddress: standard.ensAddress,\n      _defaultProvider: standard._defaultProvider || null\n    };\n  }\n  const standard = networks[network.name];\n  // Not a standard network; check that it is a valid network in general\n  if (!standard) {\n    if (typeof network.chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n    }\n    return network;\n  }\n  // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n  if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n    logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n  }\n  // @TODO: In the next major version add an attach function to a defaultProvider\n  // class and move the _defaultProvider internal to this file (extend Network)\n  let defaultProvider = network._defaultProvider || null;\n  if (defaultProvider == null && standard._defaultProvider) {\n    if (isRenetworkable(standard._defaultProvider)) {\n      defaultProvider = standard._defaultProvider.renetwork(network);\n    } else {\n      defaultProvider = standard._defaultProvider;\n    }\n  }\n  // Standard Network (allow overriding the ENS address)\n  return {\n    name: network.name,\n    chainId: standard.chainId,\n    ensAddress: network.ensAddress || standard.ensAddress || null,\n    _defaultProvider: defaultProvider\n  };\n}","map":{"version":3,"mappings":"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","names":["Logger","version","logger","isRenetworkable","value","renetwork","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","push","infura","error","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","skip","provider","indexOf","name","CloudflareProvider","length","FallbackProvider","quorum","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","kintsugi","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","optimism","arbitrum","bnb","bnbt","getNetwork","standard","throwArgumentError","defaultProvider"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}