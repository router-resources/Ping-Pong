{"ast":null,"code":"import randombytes from 'randombytes';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport base64urlLib from 'base64url';\nimport keccakLib from 'keccak';\n\n// TODO: should be crypto safe\nconst randomId = () => randombytes(32).toString(\"hex\");\nclass URLWithHashParams extends URL {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"hashParams\", new URLSearchParams());\n  }\n  toString() {\n    this.hash = this.hashParams.toString();\n    return super.toString.call(this);\n  }\n}\nconst base64url = base64urlLib;\nfunction safebtoa(str) {\n  return base64url.encode(str);\n}\nfunction safeatob(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\nconst keccak = keccakLib;\nfunction base64toJSON(b64str) {\n  return JSON.parse(base64url.decode(b64str));\n}\nfunction jsonToBase64(json) {\n  return base64url.encode(JSON.stringify(json));\n}\nfunction keccak256(str) {\n  let input = str;\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    input = Buffer.from(str.slice(2), \"hex\");\n  }\n  const data = \"0x\".concat(keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\"));\n  return data;\n}\nexport { URLWithHashParams, base64toJSON, base64url, jsonToBase64, keccak, keccak256, randomId, safeatob, safebtoa };","map":{"version":3,"mappings":";;;;;AAAA;MAGaA,QAAQ,GAAG,MAAcC,WAAW,CAAC,EAAD,CAAX,CAAgBC,QAAhB,CAAyB,KAAzB;MCDzBC,0BAA0BC;;;wCACZ,IAAIC,eAAJ;;EAEzBH,QAAQ;IACN,KAAKI,IAAL,GAAY,KAAKC,UAAL,CAAgBL,QAAhB,EAAZ;IACA,OAAO,MAAMA,QAAN,CAAeM,IAAf,CAAoB,IAApB,CAAP;EACD;;MCLUC,SAAS,GAAGC;SAETC,SAASC;EACvB,OAAOH,SAAS,CAACI,MAAV,CAAiBD,GAAjB,CAAP;AACD;SAEeE,SAASF;EACvB;EACA,OAAOH,SAAS,CAACM,MAAV,CAAiBH,GAAjB,CAAP;AACD;MAEYI,MAAM,GAAGC;SAINC,aAAaC;EAC3B,OAAOC,IAAI,CAACC,KAAL,CAAWZ,SAAS,CAACM,MAAV,CAAiBI,MAAjB,CAAX,CAAP;AACD;SAEeG,aAAaC;EAC3B,OAAOd,SAAS,CAACI,MAAV,CAAiBO,IAAI,CAACI,SAAL,CAAeD,IAAf,CAAjB,CAAP;AACD;SAEeE,UAAUb;EACxB,IAAIc,KAAK,GAAoBd,GAA7B;EACA,IAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACe,KAAJ,CAAU,CAAV,EAAa,CAAb,MAAoB,IAA/C,IAAuDf,GAAG,CAACgB,MAAJ,KAAe,EAA1E,EAA8E;IAC5EF,KAAK,GAAGG,MAAM,CAACC,IAAP,CAAYlB,GAAG,CAACe,KAAJ,CAAU,CAAV,CAAZ,EAA0B,KAA1B,CAAR;EACD;EACD,MAAMI,IAAI,eAAQf,MAAM,CAAC,WAAD,CAAN,CAAoBgB,MAApB,CAA2BN,KAA3B,EAAkCO,MAAlC,CAAyC,KAAzC,EAAgDC,QAAhD,CAAyD,EAAzD,EAA6D,GAA7D,CAAR,CAAV;EACA,OAAOH,IAAP;AACD","names":["randomId","randombytes","toString","URLWithHashParams","URL","URLSearchParams","hash","hashParams","call","base64url","base64urlLib","safebtoa","str","encode","safeatob","decode","keccak","keccakLib","base64toJSON","b64str","JSON","parse","jsonToBase64","json","stringify","keccak256","input","slice","length","Buffer","from","data","update","digest","padStart"],"sources":["../src/randomId.ts","../src/url.ts","../src/utils.ts"],"sourcesContent":[null,null,null]},"metadata":{},"sourceType":"module"}