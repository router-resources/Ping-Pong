{"ast":null,"code":"import nacl from 'tweetnacl';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$7 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\nvar hash$1 = {};\nvar utils$9 = {};\nvar minimalisticAssert = assert$6;\nfunction assert$6(val, msg) {\n  if (!val) throw new Error(msg || 'Assertion failed');\n}\nassert$6.equal = function assertEqual(l, r, msg) {\n  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);\n};\nvar inherits_browser = {\n  exports: {}\n};\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  };\n}\nvar assert$5 = minimalisticAssert;\nvar inherits = inherits_browser.exports;\nutils$9.inherits = inherits;\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg)) return msg.slice();\n  if (!msg) return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = c >> 6 | 192;\n          res[p++] = c & 63 | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = c >> 18 | 240;\n          res[p++] = c >> 12 & 63 | 128;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        } else {\n          res[p++] = c >> 12 | 224;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0) msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;\n  }\n  return res;\n}\nutils$9.toArray = toArray;\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));\n  return res;\n}\nutils$9.toHex = toHex;\nfunction htonl(w) {\n  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n  return res >>> 0;\n}\nutils$9.htonl = htonl;\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little') w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nutils$9.toHex32 = toHex32;\nfunction zero2(word) {\n  if (word.length === 1) return '0' + word;else return word;\n}\nutils$9.zero2 = zero2;\nfunction zero8(word) {\n  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n}\nutils$9.zero8 = zero8;\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert$5(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nutils$9.join32 = join32;\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = m >>> 16 & 0xff;\n      res[k + 2] = m >>> 8 & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = m >>> 16 & 0xff;\n      res[k + 1] = m >>> 8 & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nutils$9.split32 = split32;\nfunction rotr32$1(w, b) {\n  return w >>> b | w << 32 - b;\n}\nutils$9.rotr32 = rotr32$1;\nfunction rotl32$2(w, b) {\n  return w << b | w >>> 32 - b;\n}\nutils$9.rotl32 = rotl32$2;\nfunction sum32$3(a, b) {\n  return a + b >>> 0;\n}\nutils$9.sum32 = sum32$3;\nfunction sum32_3$1(a, b, c) {\n  return a + b + c >>> 0;\n}\nutils$9.sum32_3 = sum32_3$1;\nfunction sum32_4$2(a, b, c, d) {\n  return a + b + c + d >>> 0;\n}\nutils$9.sum32_4 = sum32_4$2;\nfunction sum32_5$2(a, b, c, d, e) {\n  return a + b + c + d + e >>> 0;\n}\nutils$9.sum32_5 = sum32_5$2;\nfunction sum64$1(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nutils$9.sum64 = sum64$1;\nfunction sum64_hi$1(ah, al, bh, bl) {\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nutils$9.sum64_hi = sum64_hi$1;\nfunction sum64_lo$1(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nutils$9.sum64_lo = sum64_lo$1;\nfunction sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nutils$9.sum64_4_hi = sum64_4_hi$1;\nfunction sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nutils$9.sum64_4_lo = sum64_4_lo$1;\nfunction sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = lo + el >>> 0;\n  carry += lo < el ? 1 : 0;\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nutils$9.sum64_5_hi = sum64_5_hi$1;\nfunction sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n  return lo >>> 0;\n}\nutils$9.sum64_5_lo = sum64_5_lo$1;\nfunction rotr64_hi$1(ah, al, num) {\n  var r = al << 32 - num | ah >>> num;\n  return r >>> 0;\n}\nutils$9.rotr64_hi = rotr64_hi$1;\nfunction rotr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\nutils$9.rotr64_lo = rotr64_lo$1;\nfunction shr64_hi$1(ah, al, num) {\n  return ah >>> num;\n}\nutils$9.shr64_hi = shr64_hi$1;\nfunction shr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\nutils$9.shr64_lo = shr64_lo$1;\nvar common$5 = {};\nvar utils$8 = utils$9;\nvar assert$4 = minimalisticAssert;\nfunction BlockHash$4() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\ncommon$5.BlockHash = BlockHash$4;\nBlockHash$4.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils$8.toArray(msg, enc);\n  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0) this.pending = null;\n    msg = utils$8.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);\n  }\n  return this;\n};\nBlockHash$4.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert$4(this.pending === null);\n  return this._digest(enc);\n};\nBlockHash$4.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - (len + this.padLength) % bytes;\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++) res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++) res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    for (t = 8; t < this.padLength; t++) res[i++] = 0;\n  }\n  return res;\n};\nvar sha = {};\nvar common$4 = {};\nvar utils$7 = utils$9;\nvar rotr32 = utils$7.rotr32;\nfunction ft_1$1(s, x, y, z) {\n  if (s === 0) return ch32$1(x, y, z);\n  if (s === 1 || s === 3) return p32(x, y, z);\n  if (s === 2) return maj32$1(x, y, z);\n}\ncommon$4.ft_1 = ft_1$1;\nfunction ch32$1(x, y, z) {\n  return x & y ^ ~x & z;\n}\ncommon$4.ch32 = ch32$1;\nfunction maj32$1(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\ncommon$4.maj32 = maj32$1;\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\ncommon$4.p32 = p32;\nfunction s0_256$1(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\ncommon$4.s0_256 = s0_256$1;\nfunction s1_256$1(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\ncommon$4.s1_256 = s1_256$1;\nfunction g0_256$1(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n}\ncommon$4.g0_256 = g0_256$1;\nfunction g1_256$1(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n}\ncommon$4.g1_256 = g1_256$1;\nvar utils$6 = utils$9;\nvar common$3 = common$5;\nvar shaCommon$1 = common$4;\nvar rotl32$1 = utils$6.rotl32;\nvar sum32$2 = utils$6.sum32;\nvar sum32_5$1 = utils$6.sum32_5;\nvar ft_1 = shaCommon$1.ft_1;\nvar BlockHash$3 = common$3.BlockHash;\nvar sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];\nfunction SHA1() {\n  if (!(this instanceof SHA1)) return new SHA1();\n  BlockHash$3.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.W = new Array(80);\n}\nutils$6.inherits(SHA1, BlockHash$3);\nvar _1 = SHA1;\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n  for (; i < W.length; i++) W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32$1(b, 30);\n    b = a;\n    a = t;\n  }\n  this.h[0] = sum32$2(this.h[0], a);\n  this.h[1] = sum32$2(this.h[1], b);\n  this.h[2] = sum32$2(this.h[2], c);\n  this.h[3] = sum32$2(this.h[3], d);\n  this.h[4] = sum32$2(this.h[4], e);\n};\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$6.toHex32(this.h, 'big');else return utils$6.split32(this.h, 'big');\n};\nvar utils$5 = utils$9;\nvar common$2 = common$5;\nvar shaCommon = common$4;\nvar assert$3 = minimalisticAssert;\nvar sum32$1 = utils$5.sum32;\nvar sum32_4$1 = utils$5.sum32_4;\nvar sum32_5 = utils$5.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash$2 = common$2.BlockHash;\nvar sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\nfunction SHA256$1() {\n  if (!(this instanceof SHA256$1)) return new SHA256$1();\n  BlockHash$2.call(this);\n  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils$5.inherits(SHA256$1, BlockHash$2);\nvar _256 = SHA256$1;\nSHA256$1.blockSize = 512;\nSHA256$1.outSize = 256;\nSHA256$1.hmacStrength = 192;\nSHA256$1.padLength = 64;\nSHA256$1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n  for (; i < W.length; i++) W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n  assert$3(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32$1(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32$1(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32$1(T1, T2);\n  }\n  this.h[0] = sum32$1(this.h[0], a);\n  this.h[1] = sum32$1(this.h[1], b);\n  this.h[2] = sum32$1(this.h[2], c);\n  this.h[3] = sum32$1(this.h[3], d);\n  this.h[4] = sum32$1(this.h[4], e);\n  this.h[5] = sum32$1(this.h[5], f);\n  this.h[6] = sum32$1(this.h[6], g);\n  this.h[7] = sum32$1(this.h[7], h);\n};\nSHA256$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$5.toHex32(this.h, 'big');else return utils$5.split32(this.h, 'big');\n};\nvar utils$4 = utils$9;\nvar SHA256 = _256;\nfunction SHA224() {\n  if (!(this instanceof SHA224)) return new SHA224();\n  SHA256.call(this);\n  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];\n}\nutils$4.inherits(SHA224, SHA256);\nvar _224 = SHA224;\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex') return utils$4.toHex32(this.h.slice(0, 7), 'big');else return utils$4.split32(this.h.slice(0, 7), 'big');\n};\nvar utils$3 = utils$9;\nvar common$1 = common$5;\nvar assert$2 = minimalisticAssert;\nvar rotr64_hi = utils$3.rotr64_hi;\nvar rotr64_lo = utils$3.rotr64_lo;\nvar shr64_hi = utils$3.shr64_hi;\nvar shr64_lo = utils$3.shr64_lo;\nvar sum64 = utils$3.sum64;\nvar sum64_hi = utils$3.sum64_hi;\nvar sum64_lo = utils$3.sum64_lo;\nvar sum64_4_hi = utils$3.sum64_4_hi;\nvar sum64_4_lo = utils$3.sum64_4_lo;\nvar sum64_5_hi = utils$3.sum64_5_hi;\nvar sum64_5_lo = utils$3.sum64_5_lo;\nvar BlockHash$1 = common$1.BlockHash;\nvar sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\nfunction SHA512$1() {\n  if (!(this instanceof SHA512$1)) return new SHA512$1();\n  BlockHash$1.call(this);\n  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils$3.inherits(SHA512$1, BlockHash$1);\nvar _512 = SHA512$1;\nSHA512$1.blockSize = 1024;\nSHA512$1.outSize = 512;\nSHA512$1.hmacStrength = 192;\nSHA512$1.padLength = 128;\nSHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++) W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14]; // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32]; // i - 16\n    var c3_lo = W[i - 31];\n    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n  }\n};\nSHA512$1.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n  var W = this.W;\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n  assert$2(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n    hh = gh;\n    hl = gl;\n    gh = fh;\n    gl = fl;\n    fh = eh;\n    fl = el;\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n    dh = ch;\n    dl = cl;\n    ch = bh;\n    cl = bl;\n    bh = ah;\n    bl = al;\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\nSHA512$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$3.toHex32(this.h, 'big');else return utils$3.split32(this.h, 'big');\n};\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ ~xh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ ~xl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ xh & zh ^ yh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ xl & zl ^ yl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2); // 34\n  var c2_hi = rotr64_hi(xl, xh, 7); // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2); // 34\n  var c2_lo = rotr64_lo(xl, xh, 7); // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9); // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9); // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29); // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29); // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nvar utils$2 = utils$9;\nvar SHA512 = _512;\nfunction SHA384() {\n  if (!(this instanceof SHA384)) return new SHA384();\n  SHA512.call(this);\n  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];\n}\nutils$2.inherits(SHA384, SHA512);\nvar _384 = SHA384;\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$2.toHex32(this.h.slice(0, 12), 'big');else return utils$2.split32(this.h.slice(0, 12), 'big');\n};\nsha.sha1 = _1;\nsha.sha224 = _224;\nsha.sha256 = _256;\nsha.sha384 = _384;\nsha.sha512 = _512;\nvar ripemd = {};\nvar utils$1 = utils$9;\nvar common = common$5;\nvar rotl32 = utils$1.rotl32;\nvar sum32 = utils$1.sum32;\nvar sum32_3 = utils$1.sum32_3;\nvar sum32_4 = utils$1.sum32_4;\nvar BlockHash = common.BlockHash;\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n  BlockHash.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.endian = 'little';\n}\nutils$1.inherits(RIPEMD160, BlockHash);\nripemd.ripemd160 = RIPEMD160;\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$1.toHex32(this.h, 'little');else return utils$1.split32(this.h, 'little');\n};\nfunction f(j, x, y, z) {\n  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);\n}\nfunction K(j) {\n  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;\n}\nfunction Kh(j) {\n  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;\n}\nvar r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\nvar rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\nvar s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\nvar sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\nvar utils = utils$9;\nvar assert$1 = minimalisticAssert;\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n  this._init(utils.toArray(key, enc));\n}\nvar hmac = Hmac;\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n  assert$1(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++) key.push(0);\n  for (i = 0; i < key.length; i++) key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++) key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n(function (exports) {\n  var hash = exports;\n  hash.utils = utils$9;\n  hash.common = common$5;\n  hash.sha = sha;\n  hash.ripemd = ripemd;\n  hash.hmac = hmac;\n\n  // Proxy hash functions to the main object\n  hash.sha1 = hash.sha.sha1;\n  hash.sha256 = hash.sha.sha256;\n  hash.sha224 = hash.sha.sha224;\n  hash.sha384 = hash.sha.sha384;\n  hash.sha512 = hash.sha.sha512;\n  hash.ripemd160 = hash.ripemd.ripemd160;\n})(hash$1);\nvar hash = hash$1;\nconst version$2 = \"logger/5.5.0\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nlet _globalLogger = null;\nfunction _checkNormalize() {\n  try {\n    const missing = [];\n    // Make sure all forms of normalization are supported\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n  return null;\n}\nconst _normalizeError = _checkNormalize();\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nvar ErrorCode;\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n  // Not Implemented\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n  // Unsupported Operation\n  //   - operation\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n  // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n  // Some sort of bad response from the server\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n  // Timeout\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n  ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n  // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n  ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n  // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n  // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n  // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n  ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n  // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n  // Nonce has already been used\n  //   - transaction: the transaction attempted\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n  // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n  // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n  // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\nconst HEX = \"0123456789abcdef\";\nclass Logger {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n    console.log.apply(console, args);\n  }\n  debug() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this._log(Logger.levels.DEBUG, args);\n  }\n  info() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    this._log(Logger.levels.INFO, args);\n  }\n  warn() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    this._log(Logger.levels.WARNING, args);\n  }\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n    if (!code) {\n      code = Logger.errors.UNKNOWN_ERROR;\n    }\n    if (!params) {\n      params = {};\n    }\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      const value = params[key];\n      try {\n        if (value instanceof Uint8Array) {\n          let hex = \"\";\n          for (let i = 0; i < value.length; i++) {\n            hex += HEX[value[i] >> 4];\n            hex += HEX[value[i] & 0x0f];\n          }\n          messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n        } else {\n          messageDetails.push(key + \"=\" + JSON.stringify(value));\n        }\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    }\n    // @TODO: Any??\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n    this.throwError(message, code, params);\n  }\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n    this.throwArgumentError(message, name, value);\n  }\n  checkNormalize(message) {\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n    if (message == null) {\n      message = \"value not safe\";\n    }\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n    if (value % 1) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new Logger(version$2);\n    }\n    return _globalLogger;\n  }\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n      this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel.toLowerCase()];\n    if (level == null) {\n      Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n    _logLevel = level;\n  }\n  static from(version) {\n    return new Logger(version);\n  }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\nconst version$1 = \"bytes/5.5.0\";\nconst logger = new Logger(version$1);\n///////////////////////////////\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n  array.slice = function () {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n  return array;\n}\nfunction isInteger(value) {\n  return typeof value === \"number\" && value == value && value % 1 === 0;\n}\nfunction isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n  if (typeof value === \"string\") {\n    return false;\n  }\n  if (!isInteger(value.length) || value.length < 0) {\n    return false;\n  }\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n    if (!isInteger(v) || v < 0 || v >= 256) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid arrayify value\");\n    const result = [];\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n    if (result.length === 0) {\n      result.push(0);\n    }\n    return addSlice(new Uint8Array(result));\n  }\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n  if (isHexString(value)) {\n    let hex = value.substring(2);\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n    const result = [];\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n    return addSlice(new Uint8Array(result));\n  }\n  if (isBytes(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n  return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n  return true;\n}\nconst version = \"sha2/5.5.0\";\nnew Logger(version);\nfunction sha256(data) {\n  return \"0x\" + hash.sha256().update(arrayify(data)).digest(\"hex\");\n}\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\n\n/**\n * Maximum length of derived pubkey seed\n */\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n/**\n * A public key\n */\n\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key\n   */\n\n  toBytes() {\n    return this.toBuffer();\n  }\n  /**\n   * Return the Buffer representation of the public key\n   */\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n  /* eslint-disable require-await */\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n  /* eslint-disable require-await */\n\n  static async createProgramAddress(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n  static async findProgramAddress(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n  static isOnCurve(pubkey) {\n    return is_on_curve(pubkey) == 1;\n  }\n}\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n}); // @ts-ignore\n\nlet naclLowLevel = nacl.lowlevel; // Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\n\nfunction is_on_curve(p) {\n  var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\nclass Account {\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._keypair = void 0;\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account\n   */\n\n  get secretKey() {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Layout for a public key\n */\n\nconst publicKey = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a Rust String type\n */\n\nconst rustString = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, buffer, offset);\n  };\n  rsl.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rsl;\n};\n/**\n * Layout for an Authorized object\n */\n\nconst authorized = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\nconst lockup = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\nconst voteInit = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\nfunction getAlloc(type, fields) {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\n/**\n * The message header, identifying signed and read-only account\n */\n\nconst PUBKEY_LENGTH = 32;\n/**\n * List of instructions to be processed atomically\n */\n\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = bs58.decode(instruction.data);\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst SIGNATURE_LENGTH = 64;\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.nonceInfo = void 0;\n    opts && Object.assign(this, opts);\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n  add() {\n    for (var _len4 = arguments.length, items = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      items[_key4] = arguments[_key4];\n    }\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n  compileMessage() {\n    const {\n      nonceInfo\n    } = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {\n      recentBlockhash\n    } = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable = x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(_ref => {\n      let {\n        pubkey,\n        isSigner,\n        isWritable\n      } = _ref;\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    instructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n  setSigners() {\n    for (var _len5 = arguments.length, signers = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      signers[_key5] = arguments[_key5];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n  sign() {\n    for (var _len6 = arguments.length, signers = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      signers[_key6] = arguments[_key6];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n  partialSign() {\n    for (var _len7 = arguments.length, signers = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      signers[_key7] = arguments[_key7];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n  _partialSign(message) {\n    const signData = message.serialize();\n    for (var _len8 = arguments.length, signers = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n      signers[_key8 - 1] = arguments[_key8];\n    }\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n\n  verifySignatures() {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n  /**\n   * @internal\n   */\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach((_ref2, index) => {\n      let {\n        signature\n      } = _ref2;\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n  static populate(message) {\n    let signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    return transaction;\n  }\n}\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\nfunction decodeData(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\n\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), rustString('seed'), publicKey('programId')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: params.lamports\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\nvar browserPonyfill = {\n  exports: {}\n};\n(function (module, exports) {\n  var global = typeof self !== 'undefined' ? self : commonjsGlobal;\n  var __self__ = function () {\n    function F() {\n      this.fetch = false;\n      this.DOMException = global.DOMException;\n    }\n    F.prototype = global;\n    return new F();\n  }();\n  (function (self) {\n    (function (exports) {\n      var support = {\n        searchParams: 'URLSearchParams' in self,\n        iterable: 'Symbol' in self && 'iterator' in Symbol,\n        blob: 'FileReader' in self && 'Blob' in self && function () {\n          try {\n            new Blob();\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }(),\n        formData: 'FormData' in self,\n        arrayBuffer: 'ArrayBuffer' in self\n      };\n      function isDataView(obj) {\n        return obj && DataView.prototype.isPrototypeOf(obj);\n      }\n      if (support.arrayBuffer) {\n        var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];\n        var isArrayBufferView = ArrayBuffer.isView || function (obj) {\n          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;\n        };\n      }\n      function normalizeName(name) {\n        if (typeof name !== 'string') {\n          name = String(name);\n        }\n        if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n          throw new TypeError('Invalid character in header field name');\n        }\n        return name.toLowerCase();\n      }\n      function normalizeValue(value) {\n        if (typeof value !== 'string') {\n          value = String(value);\n        }\n        return value;\n      }\n\n      // Build a destructive iterator for the value list\n      function iteratorFor(items) {\n        var iterator = {\n          next: function () {\n            var value = items.shift();\n            return {\n              done: value === undefined,\n              value: value\n            };\n          }\n        };\n        if (support.iterable) {\n          iterator[Symbol.iterator] = function () {\n            return iterator;\n          };\n        }\n        return iterator;\n      }\n      function Headers(headers) {\n        this.map = {};\n        if (headers instanceof Headers) {\n          headers.forEach(function (value, name) {\n            this.append(name, value);\n          }, this);\n        } else if (Array.isArray(headers)) {\n          headers.forEach(function (header) {\n            this.append(header[0], header[1]);\n          }, this);\n        } else if (headers) {\n          Object.getOwnPropertyNames(headers).forEach(function (name) {\n            this.append(name, headers[name]);\n          }, this);\n        }\n      }\n      Headers.prototype.append = function (name, value) {\n        name = normalizeName(name);\n        value = normalizeValue(value);\n        var oldValue = this.map[name];\n        this.map[name] = oldValue ? oldValue + ', ' + value : value;\n      };\n      Headers.prototype['delete'] = function (name) {\n        delete this.map[normalizeName(name)];\n      };\n      Headers.prototype.get = function (name) {\n        name = normalizeName(name);\n        return this.has(name) ? this.map[name] : null;\n      };\n      Headers.prototype.has = function (name) {\n        return this.map.hasOwnProperty(normalizeName(name));\n      };\n      Headers.prototype.set = function (name, value) {\n        this.map[normalizeName(name)] = normalizeValue(value);\n      };\n      Headers.prototype.forEach = function (callback, thisArg) {\n        for (var name in this.map) {\n          if (this.map.hasOwnProperty(name)) {\n            callback.call(thisArg, this.map[name], name, this);\n          }\n        }\n      };\n      Headers.prototype.keys = function () {\n        var items = [];\n        this.forEach(function (value, name) {\n          items.push(name);\n        });\n        return iteratorFor(items);\n      };\n      Headers.prototype.values = function () {\n        var items = [];\n        this.forEach(function (value) {\n          items.push(value);\n        });\n        return iteratorFor(items);\n      };\n      Headers.prototype.entries = function () {\n        var items = [];\n        this.forEach(function (value, name) {\n          items.push([name, value]);\n        });\n        return iteratorFor(items);\n      };\n      if (support.iterable) {\n        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n      }\n      function consumed(body) {\n        if (body.bodyUsed) {\n          return Promise.reject(new TypeError('Already read'));\n        }\n        body.bodyUsed = true;\n      }\n      function fileReaderReady(reader) {\n        return new Promise(function (resolve, reject) {\n          reader.onload = function () {\n            resolve(reader.result);\n          };\n          reader.onerror = function () {\n            reject(reader.error);\n          };\n        });\n      }\n      function readBlobAsArrayBuffer(blob) {\n        var reader = new FileReader();\n        var promise = fileReaderReady(reader);\n        reader.readAsArrayBuffer(blob);\n        return promise;\n      }\n      function readBlobAsText(blob) {\n        var reader = new FileReader();\n        var promise = fileReaderReady(reader);\n        reader.readAsText(blob);\n        return promise;\n      }\n      function readArrayBufferAsText(buf) {\n        var view = new Uint8Array(buf);\n        var chars = new Array(view.length);\n        for (var i = 0; i < view.length; i++) {\n          chars[i] = String.fromCharCode(view[i]);\n        }\n        return chars.join('');\n      }\n      function bufferClone(buf) {\n        if (buf.slice) {\n          return buf.slice(0);\n        } else {\n          var view = new Uint8Array(buf.byteLength);\n          view.set(new Uint8Array(buf));\n          return view.buffer;\n        }\n      }\n      function Body() {\n        this.bodyUsed = false;\n        this._initBody = function (body) {\n          this._bodyInit = body;\n          if (!body) {\n            this._bodyText = '';\n          } else if (typeof body === 'string') {\n            this._bodyText = body;\n          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n            this._bodyBlob = body;\n          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n            this._bodyFormData = body;\n          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n            this._bodyText = body.toString();\n          } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n            this._bodyArrayBuffer = bufferClone(body.buffer);\n            // IE 10-11 can't handle a DataView body.\n            this._bodyInit = new Blob([this._bodyArrayBuffer]);\n          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n            this._bodyArrayBuffer = bufferClone(body);\n          } else {\n            this._bodyText = body = Object.prototype.toString.call(body);\n          }\n          if (!this.headers.get('content-type')) {\n            if (typeof body === 'string') {\n              this.headers.set('content-type', 'text/plain;charset=UTF-8');\n            } else if (this._bodyBlob && this._bodyBlob.type) {\n              this.headers.set('content-type', this._bodyBlob.type);\n            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n              this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n            }\n          }\n        };\n        if (support.blob) {\n          this.blob = function () {\n            var rejected = consumed(this);\n            if (rejected) {\n              return rejected;\n            }\n            if (this._bodyBlob) {\n              return Promise.resolve(this._bodyBlob);\n            } else if (this._bodyArrayBuffer) {\n              return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n            } else if (this._bodyFormData) {\n              throw new Error('could not read FormData body as blob');\n            } else {\n              return Promise.resolve(new Blob([this._bodyText]));\n            }\n          };\n          this.arrayBuffer = function () {\n            if (this._bodyArrayBuffer) {\n              return consumed(this) || Promise.resolve(this._bodyArrayBuffer);\n            } else {\n              return this.blob().then(readBlobAsArrayBuffer);\n            }\n          };\n        }\n        this.text = function () {\n          var rejected = consumed(this);\n          if (rejected) {\n            return rejected;\n          }\n          if (this._bodyBlob) {\n            return readBlobAsText(this._bodyBlob);\n          } else if (this._bodyArrayBuffer) {\n            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n          } else if (this._bodyFormData) {\n            throw new Error('could not read FormData body as text');\n          } else {\n            return Promise.resolve(this._bodyText);\n          }\n        };\n        if (support.formData) {\n          this.formData = function () {\n            return this.text().then(decode);\n          };\n        }\n        this.json = function () {\n          return this.text().then(JSON.parse);\n        };\n        return this;\n      }\n\n      // HTTP methods whose capitalization should be normalized\n      var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n      function normalizeMethod(method) {\n        var upcased = method.toUpperCase();\n        return methods.indexOf(upcased) > -1 ? upcased : method;\n      }\n      function Request(input, options) {\n        options = options || {};\n        var body = options.body;\n        if (input instanceof Request) {\n          if (input.bodyUsed) {\n            throw new TypeError('Already read');\n          }\n          this.url = input.url;\n          this.credentials = input.credentials;\n          if (!options.headers) {\n            this.headers = new Headers(input.headers);\n          }\n          this.method = input.method;\n          this.mode = input.mode;\n          this.signal = input.signal;\n          if (!body && input._bodyInit != null) {\n            body = input._bodyInit;\n            input.bodyUsed = true;\n          }\n        } else {\n          this.url = String(input);\n        }\n        this.credentials = options.credentials || this.credentials || 'same-origin';\n        if (options.headers || !this.headers) {\n          this.headers = new Headers(options.headers);\n        }\n        this.method = normalizeMethod(options.method || this.method || 'GET');\n        this.mode = options.mode || this.mode || null;\n        this.signal = options.signal || this.signal;\n        this.referrer = null;\n        if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n          throw new TypeError('Body not allowed for GET or HEAD requests');\n        }\n        this._initBody(body);\n      }\n      Request.prototype.clone = function () {\n        return new Request(this, {\n          body: this._bodyInit\n        });\n      };\n      function decode(body) {\n        var form = new FormData();\n        body.trim().split('&').forEach(function (bytes) {\n          if (bytes) {\n            var split = bytes.split('=');\n            var name = split.shift().replace(/\\+/g, ' ');\n            var value = split.join('=').replace(/\\+/g, ' ');\n            form.append(decodeURIComponent(name), decodeURIComponent(value));\n          }\n        });\n        return form;\n      }\n      function parseHeaders(rawHeaders) {\n        var headers = new Headers();\n        // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n        // https://tools.ietf.org/html/rfc7230#section-3.2\n        var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n        preProcessedHeaders.split(/\\r?\\n/).forEach(function (line) {\n          var parts = line.split(':');\n          var key = parts.shift().trim();\n          if (key) {\n            var value = parts.join(':').trim();\n            headers.append(key, value);\n          }\n        });\n        return headers;\n      }\n      Body.call(Request.prototype);\n      function Response(bodyInit, options) {\n        if (!options) {\n          options = {};\n        }\n        this.type = 'default';\n        this.status = options.status === undefined ? 200 : options.status;\n        this.ok = this.status >= 200 && this.status < 300;\n        this.statusText = 'statusText' in options ? options.statusText : 'OK';\n        this.headers = new Headers(options.headers);\n        this.url = options.url || '';\n        this._initBody(bodyInit);\n      }\n      Body.call(Response.prototype);\n      Response.prototype.clone = function () {\n        return new Response(this._bodyInit, {\n          status: this.status,\n          statusText: this.statusText,\n          headers: new Headers(this.headers),\n          url: this.url\n        });\n      };\n      Response.error = function () {\n        var response = new Response(null, {\n          status: 0,\n          statusText: ''\n        });\n        response.type = 'error';\n        return response;\n      };\n      var redirectStatuses = [301, 302, 303, 307, 308];\n      Response.redirect = function (url, status) {\n        if (redirectStatuses.indexOf(status) === -1) {\n          throw new RangeError('Invalid status code');\n        }\n        return new Response(null, {\n          status: status,\n          headers: {\n            location: url\n          }\n        });\n      };\n      exports.DOMException = self.DOMException;\n      try {\n        new exports.DOMException();\n      } catch (err) {\n        exports.DOMException = function (message, name) {\n          this.message = message;\n          this.name = name;\n          var error = Error(message);\n          this.stack = error.stack;\n        };\n        exports.DOMException.prototype = Object.create(Error.prototype);\n        exports.DOMException.prototype.constructor = exports.DOMException;\n      }\n      function fetch(input, init) {\n        return new Promise(function (resolve, reject) {\n          var request = new Request(input, init);\n          if (request.signal && request.signal.aborted) {\n            return reject(new exports.DOMException('Aborted', 'AbortError'));\n          }\n          var xhr = new XMLHttpRequest();\n          function abortXhr() {\n            xhr.abort();\n          }\n          xhr.onload = function () {\n            var options = {\n              status: xhr.status,\n              statusText: xhr.statusText,\n              headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n            };\n            options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n            var body = 'response' in xhr ? xhr.response : xhr.responseText;\n            resolve(new Response(body, options));\n          };\n          xhr.onerror = function () {\n            reject(new TypeError('Network request failed'));\n          };\n          xhr.ontimeout = function () {\n            reject(new TypeError('Network request failed'));\n          };\n          xhr.onabort = function () {\n            reject(new exports.DOMException('Aborted', 'AbortError'));\n          };\n          xhr.open(request.method, request.url, true);\n          if (request.credentials === 'include') {\n            xhr.withCredentials = true;\n          } else if (request.credentials === 'omit') {\n            xhr.withCredentials = false;\n          }\n          if ('responseType' in xhr && support.blob) {\n            xhr.responseType = 'blob';\n          }\n          request.headers.forEach(function (value, name) {\n            xhr.setRequestHeader(name, value);\n          });\n          if (request.signal) {\n            request.signal.addEventListener('abort', abortXhr);\n            xhr.onreadystatechange = function () {\n              // DONE (success or failure)\n              if (xhr.readyState === 4) {\n                request.signal.removeEventListener('abort', abortXhr);\n              }\n            };\n          }\n          xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n        });\n      }\n      fetch.polyfill = true;\n      if (!self.fetch) {\n        self.fetch = fetch;\n        self.Headers = Headers;\n        self.Request = Request;\n        self.Response = Response;\n      }\n      exports.Headers = Headers;\n      exports.Request = Request;\n      exports.Response = Response;\n      exports.fetch = fetch;\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      return exports;\n    })({});\n  })(__self__);\n  __self__.fetch.ponyfill = true;\n  // Remove \"polyfill\" property added by whatwg-fetch\n  delete __self__.fetch.polyfill;\n  // Choose between native implementation (global) or custom implementation (__self__)\n  // var ctx = global.fetch ? global : __self__;\n  var ctx = __self__; // this line disable service worker support temporarily\n  exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'\n  exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.\n  exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'\n  exports.Headers = ctx.Headers;\n  exports.Request = ctx.Request;\n  exports.Response = ctx.Response;\n  module.exports = exports;\n})(browserPonyfill, browserPonyfill.exports);\nvar fetch = /*@__PURE__*/getDefaultExportFromCjs(browserPonyfill.exports);\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\nfunction promiseTimeout(promise, timeoutMs) {\n  let timeoutId;\n  const timeoutPromise = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n  return Promise.race([promise, timeoutPromise]).then(result => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\nfunction makeWebsocketUrl(endpoint) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number())\n}));\nfunction createRpcClient(url, useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit) {\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url, options) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) => resolve([modifiedUrl, modifiedOptions]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {})\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429\n        /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {}\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string()\n  })\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean()\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string()\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._accountChangeSubscriptionCounter = 0;\n    this._accountChangeSubscriptions = {};\n    this._programAccountChangeSubscriptionCounter = 0;\n    this._programAccountChangeSubscriptions = {};\n    this._rootSubscriptionCounter = 0;\n    this._rootSubscriptions = {};\n    this._signatureSubscriptionCounter = 0;\n    this._signatureSubscriptions = {};\n    this._slotSubscriptionCounter = 0;\n    this._slotSubscriptions = {};\n    this._logsSubscriptionCounter = 0;\n    this._logsSubscriptions = {};\n    this._slotUpdateSubscriptionCounter = 0;\n    this._slotUpdateSubscriptions = {};\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(url.toString(), useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n  async getBalanceAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error('failed to get balance for ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n  async getBalance(publicKey, commitment) {\n    return await this.getBalanceAndContext(publicKey, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get block time for slot ' + slot + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get minimum ledger slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get first available block: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token account balance: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error('failed to get token largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n  async getAccountInfoAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n  async getParsedAccountInfo(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n  async getAccountInfo(publicKey, commitment) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n  async getMultipleAccountsInfoAndContext(publicKeys, commitment) {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new Error('failed to get info for accounts ' + keys + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n\n  async getMultipleAccountsInfo(publicKeys, commitment) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitment);\n    return res.value;\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n  async getStakeActivation(publicKey, commitment, epoch) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined, epoch !== undefined ? {\n      epoch\n    } : undefined);\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(`failed to get Stake Activation ${publicKey.toBase58()}: ${res.error.message}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', extra);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n\n  async confirmTransaction(signature, commitment) {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n    let subscriptionId;\n    let response = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(signature, (result, context) => {\n          subscriptionId = undefined;\n          response = {\n            context,\n            value: result\n          };\n          resolve(null);\n        }, subscriptionCommitment);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip':\n        {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n    }\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(`Transaction was not confirmed in ${duration.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`);\n    }\n    return response;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n  async getSlot(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n  async getSlotLeader(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n  async getTransactionCount(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n  async getInflationReward(addresses, epoch, commitment) {\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined, {\n      epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n  async getEpochInfo(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n  async getRecentPerformanceSamples(limit) {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', args);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent performance samples: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n\n  async getLatestBlockhash(commitment) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n\n  async getLatestBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the node version\n   */\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the genesis hash\n   */\n\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   */\n\n  async getBlock(slot, opts) {\n    const args = this._buildArgsAtLeastConfirmed([slot], opts && opts.commitment);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transactions: result.transactions.map(_ref3 => {\n        let {\n          transaction,\n          meta\n        } = _ref3;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n  }\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n\n  async getTransaction(signature, opts) {\n    const args = this._buildArgsAtLeastConfirmed([signature], opts && opts.commitment);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n\n  async getParsedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n  async getParsedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(_ref4 => {\n        let {\n          transaction,\n          meta\n        } = _ref4;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(_ref5 => {\n        let {\n          transaction,\n          meta\n        } = _ref5;\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get confirmed transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed signatures for address: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signatures for address: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n  async getNonceAndContext(nonceAccount, commitment) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitment);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n  async getNonce(nonceAccount, commitment) {\n    return await this.getNonceAndContext(nonceAccount, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error('airdrop to ' + to.toBase58() + ' failed: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n  async _recentBlockhash(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {\n          blockhash\n        } = await this.getRecentBlockhash('finalized');\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return blockhash;\n        } // Sleep for approximately half a slot\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * Simulate a transaction\n   */\n\n  async simulateTransaction(transactionOrMessage, signers, includeAccounts) {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   */\n\n  async sendTransaction(transaction, signers, options) {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnError(err) {\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnClose(code) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n    this._resetSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n  async _subscribe(sub, rpcMethod, rpcArgs) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n        }\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n  async _unsubscribe(sub, rpcMethod) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._programAccountChangeSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._rootSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._signatureSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._slotSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._slotUpdateSubscriptions).forEach(s => s.subscriptionId = null);\n  }\n  /**\n   * @internal\n   */\n\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    const programKeys = Object.keys(this._programAccountChangeSubscriptions).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (accountKeys.length === 0 && programKeys.length === 0 && slotKeys.length === 0 && slotUpdateKeys.length === 0 && signatureKeys.length === 0 && rootKeys.length === 0 && logsKeys.length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(sub, 'accountSubscribe', this._buildArgs([sub.publicKey], sub.commitment, 'base64'));\n    }\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(sub, 'programSubscribe', this._buildArgs([sub.programId], sub.commitment, 'base64', {\n        filters: sub.filters\n      }));\n    }\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {\n          mentions: [sub.filter.toString()]\n        };\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(sub, 'logsSubscribe', this._buildArgs([filter], sub.commitment));\n    }\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnAccountNotification(notification) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n  onAccountChange(publicKey, callback, commitment) {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n  async removeAccountChangeListener(id) {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnProgramAccountNotification(notification) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {\n          value,\n          context\n        } = res.result;\n        sub.callback({\n          accountId: value.pubkey,\n          accountInfo: value.account\n        }, context);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n  async removeProgramAccountChangeListener(id) {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n  onLogs(filter, callback, commitment) {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n\n  async removeOnLogsListener(id) {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnLogsNotification(notification) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnSlotNotification(notification) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n  onSlotChange(callback) {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n  async removeSlotChangeListener(id) {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n  onSlotUpdate(callback) {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n  async removeSlotUpdateListener(id) {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnSignatureNotification(notification) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback({\n            type: 'received'\n          }, res.result.context);\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback({\n            type: 'status',\n            result: res.result.value\n          }, res.result.context);\n        }\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n  onSignature(signature, callback, commitment) {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {\n        commitment\n      },\n      subscriptionId: null\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n  onSignatureWithOptions(signature, callback, options) {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n  async removeSignatureListener(id) {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnRootNotification(notification) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n  onRootChange(callback) {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n  async removeRootChangeListener(id) {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n  static generate() {\n    return new Keypair(nacl.sign.keyPair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n  static fromSecretKey(secretKey, options) {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n  static fromSeed(seed) {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n  /**\n   * The public key for this keypair\n   */\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n  get secretKey() {\n    return this._keypair.secretKey;\n  }\n}\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      publicKeyOffset,\n      publicKeyInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n/**\n * Stake account lockup info\n */\n\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n}\n/**\n * Create stake account transaction params\n */\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * @internal\n   */\n\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n  static split(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n\n  static splitWithSeed(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\nconst {\n  publicKeyCreate,\n  ecdsaSign\n} = secp256k1;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(sha3.keccak_256.update(toBuffer(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n\n      const messageHash = Buffer.from(sha3.keccak_256.update(toBuffer(message)).digest());\n      const {\n        signature,\n        recid: recoveryId\n      } = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n  static fromConfigData(buffer) {\n    const PUBKEY_LENGTH = 32;\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$7(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter(_ref6) {\n  let {\n    epoch,\n    authorizedVoter\n  } = _ref6;\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters(_ref7) {\n  let {\n    authorizedPubkey,\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  } = _ref7;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters(_ref8) {\n  let {\n    buf,\n    idx,\n    isEmpty\n  } = _ref8;\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx)];\n}\n\n/**\n * Vote account info\n */\n\nclass VoteInit {\n  /** [0, 100] */\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\n\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, Loader, Lockup, MAX_SEED_LENGTH, Message, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PublicKey, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionInstruction, VALIDATOR_INFO_KEY, VOTE_PROGRAM_ID, ValidatorInfo, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"mappings":"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AE,EAAE,EAAE,EAAE,EACtD,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EACtD,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EACtD,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACvD;AAED,IAAI2F,EAAE,GAAG,CACP,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACtD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACtD,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EACtD,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EACtD,CAAC,EAAE,CAAC,EAAE,EA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","names":["toBuffer","arr","Buffer","isBuffer","Uint8Array","from","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","Error","equal","assertEqual","l","r","Object","create","inherits_browserModule","inherits","ctor","superCtor","super_","prototype","constructor","value","enumerable","writable","configurable","TempCtor","require$$0","require$$1","isSurrogatePair","i","charCodeAt","length","toArray","enc","Array","isArray","slice","res","p","c","replace","push","parseInt","toHex","zero2","toString","htonl","w","toHex32","endian","zero8","word","join32","start","end","len","k","split32","m","rotr32","b","rotl32","sum32","a","sum32_3","sum32_4","d","sum32_5","e","sum64","buf","pos","ah","al","bh","bl","lo","hi","sum64_hi","sum64_lo","sum64_4_hi","ch","cl","dh","dl","carry","sum64_4_lo","sum64_5_hi","eh","el","sum64_5_lo","rotr64_hi","num","rotr64_lo","shr64_hi","shr64_lo","utils","BlockHash","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","update","concat","_update","digest","_pad","_digest","pad","bytes","t","ft_1","s","x","y","z","ch32","p32","maj32","s0_256","s1_256","g0_256","g1_256","common","shaCommon","require$$2","sha1_K","SHA1","call","h","W","_1","require$$3","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","sha512_K","SHA512","_512","_prepareBlock","c0_hi","g1_512_hi","c0_lo","g1_512_lo","c1_hi","c1_lo","c2_hi","g0_512_hi","c2_lo","g0_512_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","s1_512_hi","s1_512_lo","ch64_hi","ch64_lo","c4_hi","c4_lo","T1_hi","T1_lo","s0_512_hi","s0_512_lo","maj64_hi","maj64_lo","T2_hi","T2_lo","xh","xl","yh","yl","zh","zl","SHA384","_384","require$$4","RIPEMD160","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","j","T","K","rh","Kh","sh","Hmac","hash","key","Hash","inner","outer","_init","hmac","init","exports","sha","ripemd","sha1","sha256","sha224","sha384","sha512","ripemd160","version","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_checkNormalize","missing","forEach","form","normalize","join","String","fromCharCode","message","_normalizeError","LogLevel","ErrorCode","HEX","Logger","defineProperty","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","throwError","name","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","NUMERIC_FAULT","fault","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","MISSING_NEW","checkAbstract","globalLogger","setCensorship","censorship","permanent","setLogLevel","logger","isHexable","toHexString","addSlice","array","arguments","isInteger","isBytes","v","arrayify","options","result","unshift","allowMissingPrefix","substring","isHexString","hexPad","match","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","decode","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","map","Map","MAX_SEED_LENGTH","isPublicKeyData","_bn","undefined","PublicKey","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","alloc","copy","createWithSeed","fromPublicKey","seed","programId","createProgramAddress","seeds","TypeError","publicKeyBytes","is_on_curve","findProgramAddress","nonce","address","seedsWithNonce","err","isOnCurve","pubkey","default","set","fields","naclLowLevel","nacl","lowlevel","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","str","chars","span","authorized","lockup","ns64","voteInit","u8","getAlloc","type","layout","item","decodeLength","size","elem","shift","encodeLength","rem_len","PUBKEY_LENGTH","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Transaction","signature","signatures","feePayer","nonceInfo","add","items","compileMessage","nonceInstruction","accountMetas","accountMeta","includes","isSigner","isWritable","sort","pubkeySorting","localeCompare","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","valid","every","pair","serializeMessage","setSigners","signers","seen","Set","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","connection","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccount","transfer","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","owner","dataLayout","transactions","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","global","self","this","__self__","F","fetch","DOMException","support","searchParams","iterable","Symbol","Blob","formData","arrayBuffer","isDataView","obj","DataView","isPrototypeOf","viewClasses","isArrayBufferView","ArrayBuffer","isView","normalizeName","test","normalizeValue","iteratorFor","iterator","next","done","Headers","headers","append","getOwnPropertyNames","oldValue","get","hasOwnProperty","callback","thisArg","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","view","bufferClone","Body","_initBody","_bodyInit","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","rejected","then","text","json","parse","methods","normalizeMethod","method","upcased","toUpperCase","Request","input","url","credentials","mode","signal","referrer","clone","trim","split","decodeURIComponent","parseHeaders","rawHeaders","preProcessedHeaders","line","parts","Response","bodyInit","ok","statusText","response","redirectStatuses","redirect","RangeError","location","stack","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","module","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","promiseTimeout","timeoutMs","timeoutId","timeoutPromise","race","clearTimeout","makeWebsocketUrl","endpoint","URL","useHttps","protocol","host","port","Number","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","createRpcClient","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","fetchWithMiddleware","modifiedFetchArgs","modifiedUrl","modifiedOptions","clientBrowser","RpcClient","agent","too_many_requests_retries","waitTime","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","lastValidBlockHeight","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","_accountChangeSubscriptionCounter","_accountChangeSubscriptions","_programAccountChangeSubscriptionCounter","_programAccountChangeSubscriptions","_rootSubscriptionCounter","_rootSubscriptions","_signatureSubscriptionCounter","_signatureSubscriptions","_slotSubscriptionCounter","_slotSubscriptions","_logsSubscriptionCounter","_logsSubscriptions","_slotUpdateSubscriptionCounter","_slotUpdateSubscriptions","wsEndpoint","confirmTransactionInitialTimeout","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","catch","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleAccountsInfoAndContext","publicKeys","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","extra","encoding","filters","getParsedProgramAccounts","decodedSignature","Date","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","removeSignatureListener","duration","toFixed","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","getFeeForMessage","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getTransaction","getParsedTransaction","getParsedTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","disableCache","timeSinceFetch","expired","_pollNewBlockhash","startTime","simulateTransaction","transactionOrMessage","includeAccounts","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","_subscribe","sub","rpcMethod","rpcArgs","_unsubscribe","unsubscribeId","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","close","connect","mentions","notification","onAccountChange","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","removeProgramAccountChangeListener","onLogs","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","override","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","generate","skipValidation","encoder","TextEncoder","fromSeed","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","splitWithSeed","merge","withdraw","deactivate","publicKeyCreate","ecdsaSign","secp256k1","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","sha3","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","VoteInit","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"sources":["../src/util/to-buffer.ts","../node_modules/minimalistic-assert/index.js","../node_modules/inherits/inherits_browser.js","../node_modules/hash.js/lib/hash/utils.js","../node_modules/hash.js/lib/hash/common.js","../node_modules/hash.js/lib/hash/sha/common.js","../node_modules/hash.js/lib/hash/sha/1.js","../node_modules/hash.js/lib/hash/sha/256.js","../node_modules/hash.js/lib/hash/sha/224.js","../node_modules/hash.js/lib/hash/sha/512.js","../node_modules/hash.js/lib/hash/sha/384.js","../node_modules/hash.js/lib/hash/sha.js","../node_modules/hash.js/lib/hash/ripemd.js","../node_modules/hash.js/lib/hash/hmac.js","../node_modules/hash.js/lib/hash.js","../node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@ethersproject/bytes/lib.esm/_version.js","../node_modules/@ethersproject/bytes/lib.esm/index.js","../node_modules/@ethersproject/sha2/lib.esm/_version.js","../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../src/util/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/layout.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/util/assert.ts","../src/transaction.ts","../src/sysvar.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/system-program.ts","../src/loader.ts","../src/bpf-loader.ts","../node_modules/cross-fetch/dist/browser-ponyfill.js","../src/epoch-schedule.ts","../src/errors.ts","../src/timing.ts","../src/util/promise-timeout.ts","../src/util/url.ts","../src/connection.ts","../src/keypair.ts","../src/ed25519-program.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/vote-program.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","export const version = \"logger/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"bytes/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0\n    };\n    if (isBytesLike(signature)) {\n        const bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n        }\n        // Get the r, s and v\n        result.r = hexlify(bytes.slice(0, 32));\n        result.s = hexlify(bytes.slice(32, 64));\n        result.v = bytes[64];\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","export const version = \"sha2/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware:\n    | ((url: string, options: any) => Promise<Response>)\n    | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url: string, options: any) => {\n      const modifiedFetchArgs = await new Promise<[string, any]>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) =>\n              resolve([modifiedUrl, modifiedOptions]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: (modifiedUrl: string, modifiedOptions: any) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; lastValidBlockHeight: number}> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; lastValidBlockHeight: number}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        publicKeyOffset,\n        publicKeyInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\nexport type AuthorizedVoter = {\n  epoch: number;\n  authorizedVoter: PublicKey;\n};\n\nexport type PriorVoter = {\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n};\n\nexport type BlockTimestamp = {\n  slot: number;\n  timetamp: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({epoch, authorizedVoter}: AuthorizedVoter) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoter) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty,\n}: {\n  buf: PriorVoter[];\n  idx: number;\n  isEmpty: boolean;\n}): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx)];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  | 'Authorize'\n  | 'InitializeAccount'\n  | 'Withdraw';\n\nconst VOTE_INSTRUCTION_LAYOUTS: {\n  [type in VoteInstructionType]: InstructionType;\n} = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}