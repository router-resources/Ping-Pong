{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.stripZeros = exports.unpad = exports.setLengthRight = exports.setLength = exports.setLengthLeft = exports.zeros = void 0;\nvar ethjsUtil = require('ethjs-util');\nvar BN = require(\"bn.js\");\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nexports.zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer|Array)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer|Array)\n */\nexports.setLengthLeft = function (msg, length, right) {\n  if (right === void 0) {\n    right = false;\n  }\n  var buf = exports.zeros(length);\n  msg = exports.toBuffer(msg);\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n    return msg.slice(-length);\n  }\n};\nexports.setLength = exports.setLengthLeft;\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer|Array)\n * @param length the number of bytes the output should be\n * @return (Buffer|Array)\n */\nexports.setLengthRight = function (msg, length) {\n  return exports.setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Buffer` or an `Array`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nexports.unpad = function (a) {\n  a = ethjsUtil.stripHexPrefix(a);\n  var first = a[0];\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n  return a;\n};\nexports.stripZeros = exports.unpad;\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param v the value\n */\nexports.toBuffer = function (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v);\n    } else if (typeof v === 'string') {\n      if (ethjsUtil.isHexString(v)) {\n        v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');\n      } else {\n        throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \" + v);\n      }\n    } else if (typeof v === 'number') {\n      v = ethjsUtil.intToBuffer(v);\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0);\n    } else if (BN.isBN(v)) {\n      v = v.toArrayLike(Buffer);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n  return v;\n};\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexports.bufferToInt = function (buf) {\n  return new BN(exports.toBuffer(buf)).toNumber();\n};\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nexports.bufferToHex = function (buf) {\n  buf = exports.toBuffer(buf);\n  return '0x' + buf.toString('hex');\n};\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nexports.fromSigned = function (num) {\n  return new BN(num).fromTwos(256);\n};\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nexports.toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray());\n};\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexports.addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;\n};\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nexports.baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return \"0x\" + ba.toString('hex');\n  } else if (ba instanceof Array) {\n    var array = [];\n    for (var i = 0; i < ba.length; i++) {\n      array.push(exports.baToJSON(ba[i]));\n    }\n    return array;\n  }\n};","map":{"version":3,"mappings":"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","names":["ethjsUtil","require","exports","bytes","Buffer","allocUnsafe","fill","msg","length","right","buf","copy","slice","a","stripHexPrefix","first","toString","v","isBuffer","Array","isArray","from","isHexString","padToEven","Error","intToBuffer","undefined","BN","isBN","toArrayLike","toArray","toNumber","num","fromTwos","toTwos","str","isHexPrefixed","ba","array","i","push"],"sourceRoot":"","sources":["../src/bytes.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}