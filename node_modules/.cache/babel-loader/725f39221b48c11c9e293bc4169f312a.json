{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getJobStatus = getJobStatus;\nexports.getJobsData = getJobsData;\nexports.run = run;\nexports.startJob = startJob;\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _decode = _interopRequireDefault(require(\"./decode\"));\nvar _encode = _interopRequireDefault(require(\"./encode\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions for calling and declaring\n * <a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n * <p><strong><em>\n *   Some functions are only available from Cloud Code.\n * </em></strong></p>\n *\n * @class Parse.Cloud\n * @static\n * @hideconstructor\n */\n\n/**\n * Makes a call to a cloud function.\n *\n * @function run\n * @name Parse.Cloud.run\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @param {object} options\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\n\nfunction run(name\n/*: string*/, data\n/*: mixed*/, options\n/*: RequestOptions*/) /*: Promise<mixed>*/\n{\n  options = options || {};\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud function name must be a string.');\n  }\n  var requestOptions = {};\n  if (options.useMasterKey) {\n    requestOptions.useMasterKey = options.useMasterKey;\n  }\n  if (options.sessionToken) {\n    requestOptions.sessionToken = options.sessionToken;\n  }\n  if (options.context && (0, _typeof2.default)(options.context) === 'object') {\n    requestOptions.context = options.context;\n  }\n  return _CoreManager.default.getCloudController().run(name, data, requestOptions);\n}\n/**\n * Gets data for the current set of cloud jobs.\n *\n * @function getJobsData\n * @name Parse.Cloud.getJobsData\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\n\nfunction getJobsData() /*: Promise<Object>*/\n{\n  return _CoreManager.default.getCloudController().getJobsData({\n    useMasterKey: true\n  });\n}\n/**\n * Starts a given cloud job, which will process asynchronously.\n *\n * @function startJob\n * @name Parse.Cloud.startJob\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @returns {Promise} A promise that will be resolved with the jobStatusId\n * of the job.\n */\n\nfunction startJob(name\n/*: string*/, data\n/*: mixed*/) /*: Promise<string>*/\n{\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud job name must be a string.');\n  }\n  return _CoreManager.default.getCloudController().startJob(name, data, {\n    useMasterKey: true\n  });\n}\n/**\n * Gets job status by Id\n *\n * @function getJobStatus\n * @name Parse.Cloud.getJobStatus\n * @param {string} jobStatusId The Id of Job Status.\n * @returns {Parse.Object} Status of Job.\n */\n\nfunction getJobStatus(jobStatusId\n/*: string*/) /*: Promise<ParseObject>*/\n{\n  var query = new _ParseQuery.default('_JobStatus');\n  return query.get(jobStatusId, {\n    useMasterKey: true\n  });\n}\nvar DefaultController = {\n  run: function (name, data, options\n  /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    var payload = (0, _encode.default)(data, true);\n    var request = RESTController.request('POST', \"functions/\".concat(name), payload, options);\n    return request.then(function (res) {\n      if ((0, _typeof2.default)(res) === 'object' && (0, _keys.default)(res).length > 0 && !res.hasOwnProperty('result')) {\n        throw new _ParseError.default(_ParseError.default.INVALID_JSON, 'The server returned an invalid response.');\n      }\n      var decoded = (0, _decode.default)(res);\n      if (decoded && decoded.hasOwnProperty('result')) {\n        return _promise.default.resolve(decoded.result);\n      }\n      return _promise.default.resolve(undefined);\n    });\n  },\n  getJobsData: function (options\n  /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'cloud_code/jobs/data', null, options);\n  },\n  startJob: function (name, data, options\n  /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    var payload = (0, _encode.default)(data, true);\n    return RESTController.request('POST', \"jobs/\".concat(name), payload, options);\n  }\n};\n_CoreManager.default.setCloudController(DefaultController);","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","getJobStatus","getJobsData","run","startJob","_keys","_promise","_typeof2","_CoreManager","_decode","_encode","_ParseError","_ParseQuery","_ParseObject","name","data","options","length","TypeError","requestOptions","useMasterKey","sessionToken","context","default","getCloudController","jobStatusId","query","get","DefaultController","RESTController","getRESTController","payload","request","concat","then","res","hasOwnProperty","INVALID_JSON","decoded","resolve","result","undefined","setCloudController"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/moralis/lib/browser/Cloud.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.getJobStatus = getJobStatus;\nexports.getJobsData = getJobsData;\nexports.run = run;\nexports.startJob = startJob;\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions for calling and declaring\n * <a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n * <p><strong><em>\n *   Some functions are only available from Cloud Code.\n * </em></strong></p>\n *\n * @class Parse.Cloud\n * @static\n * @hideconstructor\n */\n\n/**\n * Makes a call to a cloud function.\n *\n * @function run\n * @name Parse.Cloud.run\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @param {object} options\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\n\n\nfunction run(name\n/*: string*/\n, data\n/*: mixed*/\n, options\n/*: RequestOptions*/\n)\n/*: Promise<mixed>*/\n{\n  options = options || {};\n\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud function name must be a string.');\n  }\n\n  var requestOptions = {};\n\n  if (options.useMasterKey) {\n    requestOptions.useMasterKey = options.useMasterKey;\n  }\n\n  if (options.sessionToken) {\n    requestOptions.sessionToken = options.sessionToken;\n  }\n\n  if (options.context && (0, _typeof2.default)(options.context) === 'object') {\n    requestOptions.context = options.context;\n  }\n\n  return _CoreManager.default.getCloudController().run(name, data, requestOptions);\n}\n/**\n * Gets data for the current set of cloud jobs.\n *\n * @function getJobsData\n * @name Parse.Cloud.getJobsData\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\n\n\nfunction getJobsData()\n/*: Promise<Object>*/\n{\n  return _CoreManager.default.getCloudController().getJobsData({\n    useMasterKey: true\n  });\n}\n/**\n * Starts a given cloud job, which will process asynchronously.\n *\n * @function startJob\n * @name Parse.Cloud.startJob\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @returns {Promise} A promise that will be resolved with the jobStatusId\n * of the job.\n */\n\n\nfunction startJob(name\n/*: string*/\n, data\n/*: mixed*/\n)\n/*: Promise<string>*/\n{\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud job name must be a string.');\n  }\n\n  return _CoreManager.default.getCloudController().startJob(name, data, {\n    useMasterKey: true\n  });\n}\n/**\n * Gets job status by Id\n *\n * @function getJobStatus\n * @name Parse.Cloud.getJobStatus\n * @param {string} jobStatusId The Id of Job Status.\n * @returns {Parse.Object} Status of Job.\n */\n\n\nfunction getJobStatus(jobStatusId\n/*: string*/\n)\n/*: Promise<ParseObject>*/\n{\n  var query = new _ParseQuery.default('_JobStatus');\n  return query.get(jobStatusId, {\n    useMasterKey: true\n  });\n}\n\nvar DefaultController = {\n  run: function (name, data, options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var payload = (0, _encode.default)(data, true);\n    var request = RESTController.request('POST', \"functions/\".concat(name), payload, options);\n    return request.then(function (res) {\n      if ((0, _typeof2.default)(res) === 'object' && (0, _keys.default)(res).length > 0 && !res.hasOwnProperty('result')) {\n        throw new _ParseError.default(_ParseError.default.INVALID_JSON, 'The server returned an invalid response.');\n      }\n\n      var decoded = (0, _decode.default)(res);\n\n      if (decoded && decoded.hasOwnProperty('result')) {\n        return _promise.default.resolve(decoded.result);\n      }\n\n      return _promise.default.resolve(undefined);\n    });\n  },\n  getJobsData: function (options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'cloud_code/jobs/data', null, options);\n  },\n  startJob: function (name, data, options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var payload = (0, _encode.default)(data, true);\n    return RESTController.request('POST', \"jobs/\".concat(name), payload, options);\n  }\n};\n\n_CoreManager.default.setCloudController(DefaultController);"],"mappings":"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"},"metadata":{},"sourceType":"script"}