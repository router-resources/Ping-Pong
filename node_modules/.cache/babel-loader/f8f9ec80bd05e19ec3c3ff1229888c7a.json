{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetch(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  return promiseTimeout(customOptions.timeout || 60000, fetch(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetch(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetch(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\nexport { clearAPIKey, clearEmbedHost, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, remove, setAPIKey, setEmbedHost, setLogLevel };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAIA,MAAMA,GAAG,GAAGC,QAAQ,CAACC,SAAT,CAAmB,cAAnB,CAAZ;AACAF,GAAG,CAACG,QAAJ,CAAaC,MAAM,CAACC,IAApB;AAWA,IAAIC,MAAM,GAAG,eAAb;AACA,IAAIC,SAAS,GAAG,EAAhB;;MAGaC,iBAAiB,GAAG;MACpBC,sBAAsB,GAAG;SAEtBC,aAAaC;EAC3BJ,SAAS,GAAGI,UAAZ;AACD;SAEeC;EACdL,SAAS,GAAG,EAAZ;AACD;SAEeM;EACd,OAAON,SAAP;AACD;SAEeO,UAAUC;EACxBT,MAAM,GAAGS,OAAT;AACD;SAEeC;EACdV,MAAM,GAAG,eAAT;AACD;SAEeW;EACd,OAAOX,MAAP;AACD;;SAIeY,YAAYC;EAC1BnB,GAAG,CAACG,QAAJ,CAAagB,KAAb;AACD;AAED,SAASC,gBAAT;EACE,MAAMC,OAAO,GAAG,EAAhB;EACA,IAAIf,MAAJ,EAAYe,OAAO,CAACb,iBAAD,CAAP,GAA6BF,MAA7B;EACZ,IAAIC,SAAJ,EAAec,OAAO,CAACZ,sBAAD,CAAP,GAAkCF,SAAlC;EACf,OAAOc,OAAP;AACD;AAED,SAASC,gBAAT,CAA0BC,QAA1B;EACEvB,GAAG,CAACwB,IAAJ,qBAAsBD,QAAQ,CAACE,MAA/B,cAAyCF,QAAQ,CAACG,UAAlD;EACA1B,GAAG,CAACwB,IAAJ,gBAAiBD,QAAQ,CAACI,GAA1B;AACD;MAEYC,cAAc,GAAG,CAAIC,EAAJ,EAAgBC,OAAhB;EAC5B,MAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAe,CAACC,OAAD,EAAUC,MAAV;IAC7B,MAAMC,EAAE,GAAGC,UAAU,CAAC;MACpBC,YAAY,CAACF,EAAD,CAAZ;MACAD,MAAM,CAAC,IAAII,KAAJ,wBAA0BT,EAA1B,QAAD,CAAN;IACD,CAHoB,EAGlBA,EAHkB,CAArB;EAID,CALe,CAAhB;EAMA,OAAOG,OAAO,CAACO,IAAR,CAAgB,CAACT,OAAD,EAAUC,OAAV,CAAhB,CAAP;AACD;MAEYS,GAAG,GAAG,gBAAUb,GAAV;MAAuBc,+EAAwB;MAAIC,oFAA+B;EACnG,MAAMC,cAAc,GAAG;IACrBC,IAAI,EAAE,MADe;IAErBvB,OAAO,EAAE;EAFY,CAAvB;EAIA,IAAIqB,aAAa,CAACG,SAAlB,EAA6B;IAC3BF,cAAc,CAACtB,OAAf,mCAA8BsB,cAAc,CAACtB,OAA7C,GAAyDD,gBAAgB,EAAzE;EACD;EACD,MAAM0B,OAAO,GAAGC,KAAK,CAACJ,cAAD,EAAiBF,QAAjB,EAA2B;IAAEO,MAAM,EAAE;EAAV,CAA3B,CAArB;EACA,MAAMzB,QAAQ,GAAG,MAAM0B,KAAK,CAACtB,GAAD,EAAMmB,OAAN,CAA5B;EACA,IAAIvB,QAAQ,CAAC2B,EAAb,EAAiB;IACf,OAAO3B,QAAQ,CAAC4B,IAAT,EAAP;EACD;EACD7B,gBAAgB,CAACC,QAAD,CAAhB;EACA,MAAMA,QAAN;AACD;MAEY6B,IAAI,GAAG,UAAIzB,GAAJ;MAAiB0B,2EAAa;MAAIZ,+EAAwB;MAAIC,oFAA+B;EAC/G,MAAMC,cAAc,GAAG;IACrBC,IAAI,EAAE,MADe;IAErBvB,OAAO,EAAE;MACP,gBAAgB;IADT;EAFY,CAAvB;EAMA,IAAIqB,aAAa,CAACG,SAAlB,EAA6B;IAC3BF,cAAc,CAACtB,OAAf,mCAA8BsB,cAAc,CAACtB,OAA7C,GAAyDD,gBAAgB,EAAzE;EACD;EACD,MAAM0B,OAAO,GAAGC,KAAK,CAACJ,cAAD,EAAiBF,QAAjB,EAA2B;IAAEO,MAAM,EAAE;EAAV,CAA3B,CAArB;EAGA;;EACA,IAAIN,aAAa,CAACY,gBAAlB,EAAoC;IAClC;IACA;IACA;IACAR,OAAO,CAACS,IAAR,GAAeF,IAAf,CAJkC;;IAMlC,IAAIP,OAAO,CAACzB,OAAR,CAAgB,cAAhB,MAAoC,iCAAxC,EAA2E,OAAOyB,OAAO,CAACzB,OAAR,CAAgB,cAAhB,CAAP;EAC5E,CAPD,MAOO;IACLyB,OAAO,CAACS,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAf;EACD;EAED,OAAOzB,cAAc,CAClBc,aAAa,CAACX,OAAd,IAAoC,KADlB,EAEnBkB,KAAK,CAACtB,GAAD,EAAMmB,OAAN,CAAL,CAAoBY,IAApB,CAA0BnC,QAAD;IACvB,IAAIA,QAAQ,CAAC2B,EAAb,EAAiB;MACf,OAAO3B,QAAQ,CAAC4B,IAAT,EAAP;IACD;IACD7B,gBAAgB,CAACC,QAAD,CAAhB;IACA,MAAMA,QAAN;EACD,CAND,CAFmB,CAArB;AAUD;MAEYoC,KAAK,GAAG,gBAAUhC,GAAV;MAAuB0B,2EAAa;MAAIZ,+EAAwB;MAAIC,oFAA+B;EACtH,MAAMC,cAAc,GAAG;IACrBC,IAAI,EAAE,MADe;IAErBvB,OAAO,EAAE;MACP,gBAAgB;IADT;EAFY,CAAvB;EAOA;EACA;;EACA,IAAIqB,aAAa,CAACG,SAAlB,EAA6B;IAC3BF,cAAc,CAACtB,OAAf,mCAA8BsB,cAAc,CAACtB,OAA7C,GAAyDD,gBAAgB,EAAzE;EACD;EACD,MAAM0B,OAAO,GAAGC,KAAK,CAACJ,cAAD,EAAiBF,QAAjB,EAA2B;IAAEO,MAAM,EAAE;EAAV,CAA3B,CAArB;EAEA;;EACA,IAAIN,aAAa,CAACY,gBAAlB,EAAoC;IAClC;IACA;IACA;IACAR,OAAO,CAACS,IAAR,GAAeF,IAAf,CAJkC;;IAMlC,IAAIP,OAAO,CAACzB,OAAR,CAAgB,cAAhB,MAAoC,iCAAxC,EAA2E,OAAOyB,OAAO,CAACzB,OAAR,CAAgB,cAAhB,CAAP;EAC5E,CAPD,MAOO;IACLyB,OAAO,CAACS,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAf;EACD;EACD,MAAM9B,QAAQ,GAAG,MAAM0B,KAAK,CAACtB,GAAD,EAAMmB,OAAN,CAA5B;EACA,IAAIvB,QAAQ,CAAC2B,EAAb,EAAiB;IACf,OAAO3B,QAAQ,CAAC4B,IAAT,EAAP;EACD;EACD7B,gBAAgB,CAACC,QAAD,CAAhB;EACA,MAAMA,QAAN;AACD;MAEYqC,MAAM,GAAG,gBAAUjC,GAAV;MAAuB0B,2EAAa;MAAIZ,+EAAwB;MAAIC,oFAA+B;EACvH,MAAMC,cAAc,GAAG;IACrBC,IAAI,EAAE,MADe;IAErBvB,OAAO,EAAE;MACP,gBAAgB;IADT;EAFY,CAAvB;EAOA;EACA;;EACA,IAAIqB,aAAa,CAACG,SAAlB,EAA6B;IAC3BF,cAAc,CAACtB,OAAf,mCAA8BsB,cAAc,CAACtB,OAA7C,GAAyDD,gBAAgB,EAAzE;EACD;EACD,MAAM0B,OAAO,GAAGC,KAAK,CAACJ,cAAD,EAAiBF,QAAjB,EAA2B;IAAEO,MAAM,EAAE;EAAV,CAA3B,CAArB;EACA,IAAIN,aAAa,CAACY,gBAAlB,EAAoC;IAClC;IACA;IACA;IACAR,OAAO,CAACS,IAAR,GAAeF,IAAf,CAJkC;;IAMlC,IAAIP,OAAO,CAACzB,OAAR,CAAgB,cAAhB,MAAoC,iCAAxC,EAA2E,OAAOyB,OAAO,CAACzB,OAAR,CAAgB,cAAhB,CAAP;EAC5E,CAPD,MAOO;IACLyB,OAAO,CAACS,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAf;EACD;EACD,MAAM9B,QAAQ,GAAG,MAAM0B,KAAK,CAACtB,GAAD,EAAMmB,OAAN,CAA5B;EACA,IAAIvB,QAAQ,CAAC2B,EAAb,EAAiB;IACf,OAAO3B,QAAQ,CAAC4B,IAAT,EAAP;EACD;EACD7B,gBAAgB,CAACC,QAAD,CAAhB;EACA,MAAMA,QAAN;AACD;MAEYsC,qBAAqB,GAAG,CAACb,MAAD,EAAiBc,UAAjB,MAA0C;EAC7EC,OAAO,EAAE,KADoE;EAE7Ef,MAF6E;EAG7Eb,EAAE,EAAE,EAHyE;EAI7E6B,MAAM,EAAEF;AAJqE,CAA1C;MAOxBG,WAAW,GAAG,UAAItC,GAAJ,EAAiBmB,OAAjB;EAAA,IAAuCf,OAAvC,uEAAiD,KAAjD;EAAA,OACzBC,OAAO,CAACO,IAAR,CAAa,CACXC,GAAG,CAAIb,GAAJ,EAASmB,OAAT,CADQ,EAEX,IAAId,OAAJ,CAAe,CAACC,OAAD,EAAUC,MAAV;IACbE,UAAU,CAAC;MACTF,MAAM,CAAC,IAAII,KAAJ,CAAU,WAAV,CAAD,CAAN;IACD,CAFS,EAEPP,OAFO,CAAV;EAGD,CAJD,CAFW,CAAb,CADyB;AAAA","names":["log","logLevel","getLogger","setLevel","levels","INFO","apiKey","embedHost","gatewayAuthHeader","gatewayEmbedHostHeader","setEmbedHost","embedHost_","clearEmbedHost","getEmbedHost","setAPIKey","apiKey_","clearAPIKey","getAPIKey","setLogLevel","level","getApiKeyHeaders","headers","debugLogResponse","response","info","status","statusText","url","promiseTimeout","ms","promise","timeout","Promise","resolve","reject","id","setTimeout","clearTimeout","Error","race","get","options_","customOptions","defaultOptions","mode","useAPIKey","options","merge","method","fetch","ok","json","post","data","isUrlEncodedData","body","JSON","stringify","then","patch","remove","generateJsonRPCObject","parameters","jsonrpc","params","promiseRace"],"sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}