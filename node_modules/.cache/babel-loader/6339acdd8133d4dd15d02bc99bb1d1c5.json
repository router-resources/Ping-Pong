{"ast":null,"code":"/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nexports.__esModule = true;\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\nvar buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\nfunction checkUint8Array(b) {\n  if (!(b instanceof Uint8Array)) {\n    throw new TypeError('b must be a Uint8Array');\n  }\n}\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\nfunction uint8ArrayToBuffer(b) {\n  checkUint8Array(b);\n  return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nvar Layout = /** @class */function () {\n  function Layout(span, property) {\n    if (!Number.isInteger(span)) {\n      throw new TypeError('span must be an integer');\n    }\n    /** The span of the layout in bytes.\n     *\n     * Positive values are generally expected.\n     *\n     * Zero will only appear in {@link Constant}s and in {@link\n     * Sequence}s where the {@link Sequence#count|count} is zero.\n     *\n     * A negative value indicates that the span is value-specific, and\n     * must be obtained using {@link Layout#getSpan|getSpan}. */\n    this.span = span;\n    /** The property name used when this layout is represented in an\n     * Object.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances.  If left undefined the span of the unnamed layout will\n     * be treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n  /** Function to create an Object into which decoded properties will\n   * be written.\n   *\n   * Used only for layouts that {@link Layout#decode|decode} to Object\n   * instances, which means:\n   * * {@link Structure}\n   * * {@link Union}\n   * * {@link VariantLayout}\n   * * {@link BitStructure}\n   *\n   * If left undefined the JavaScript representation of these layouts\n   * will be Object instances.\n   *\n   * See {@link bindConstructorLayout}.\n   */\n  Layout.prototype.makeDestinationObject = function () {\n    return {};\n  };\n  /**\n   * Decode from a Uint8Array into a JavaScript value.\n   *\n   * @param {Uint8Array} b - the buffer from which encoded data is read.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {(Number|Array|Object)} - the value of the decoded data.\n   *\n   * @abstract\n   */\n  Layout.prototype.decode = function (b, offset) {\n    throw new Error('Layout is abstract');\n  };\n  /**\n   * Encode a JavaScript value into a Uint8Array.\n   *\n   * @param {(Number|Array|Object)} src - the value to be encoded into\n   * the buffer.  The type accepted depends on the (sub-)type of {@link\n   * Layout}.\n   *\n   * @param {Uint8Array} b - the buffer into which encoded data will be\n   * written.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {Number} - the number of bytes encoded, including the\n   * space skipped for internal padding, but excluding data such as\n   * {@link Sequence#count|lengths} when stored {@link\n   * ExternalLayout|externally}.  This is the adjustment to `offset`\n   * producing the offset where data for the next layout would be\n   * written.\n   *\n   * @abstract\n   */\n  Layout.prototype.encode = function (src, b, offset) {\n    throw new Error('Layout is abstract');\n  };\n  /**\n   * Calculate the span of a specific instance of a layout.\n   *\n   * @param {Uint8Array} b - the buffer that contains an encoded instance.\n   *\n   * @param {Number} [offset] - the offset at which the encoded instance\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @return {Number} - the number of bytes covered by the layout\n   * instance.  If this method is not overridden in a subclass the\n   * definition-time constant {@link Layout#span|span} will be\n   * returned.\n   *\n   * @throws {RangeError} - if the length of the value cannot be\n   * determined.\n   */\n  Layout.prototype.getSpan = function (b, offset) {\n    if (0 > this.span) {\n      throw new RangeError('indeterminate span');\n    }\n    return this.span;\n  };\n  /**\n   * Replicate the layout using a new property.\n   *\n   * This function must be used to get a structurally-equivalent layout\n   * with a different name since all {@link Layout} instances are\n   * immutable.\n   *\n   * **NOTE** This is a shallow copy.  All fields except {@link\n   * Layout#property|property} are strictly equal to the origin layout.\n   *\n   * @param {String} property - the value for {@link\n   * Layout#property|property} in the replica.\n   *\n   * @returns {Layout} - the copy with {@link Layout#property|property}\n   * set to `property`.\n   */\n  Layout.prototype.replicate = function (property) {\n    var rv = Object.create(this.constructor.prototype);\n    Object.assign(rv, this);\n    rv.property = property;\n    return rv;\n  };\n  /**\n   * Create an object from layout properties and an array of values.\n   *\n   * **NOTE** This function returns `undefined` if invoked on a layout\n   * that does not return its value as an Object.  Objects are\n   * returned for things that are a {@link Structure}, which includes\n   * {@link VariantLayout|variant layouts} if they are structures, and\n   * excludes {@link Union}s.  If you want this feature for a union\n   * you must use {@link Union.getVariant|getVariant} to select the\n   * desired layout.\n   *\n   * @param {Array} values - an array of values that correspond to the\n   * default order for properties.  As with {@link Layout#decode|decode}\n   * layout elements that have no property name are skipped when\n   * iterating over the array values.  Only the top-level properties are\n   * assigned; arguments are not assigned to properties of contained\n   * layouts.  Any unused values are ignored.\n   *\n   * @return {(Object|undefined)}\n   */\n  Layout.prototype.fromArray = function (values) {\n    return undefined;\n  };\n  return Layout;\n}();\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n  if (lo.property) {\n    return name + '[' + lo.property + ']';\n  }\n  return name;\n}\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\nfunction bindConstructorLayout(Class, layout) {\n  if ('function' !== typeof Class) {\n    throw new TypeError('Class must be constructor');\n  }\n  if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n    throw new Error('Class is already bound to a layout');\n  }\n  if (!(layout && layout instanceof Layout)) {\n    throw new TypeError('layout must be a Layout');\n  }\n  if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n    throw new Error('layout is already bound to a constructor');\n  }\n  Class.layout_ = layout;\n  layout.boundConstructor_ = Class;\n  layout.makeDestinationObject = function () {\n    return new Class();\n  };\n  Object.defineProperty(Class.prototype, 'encode', {\n    value: function (b, offset) {\n      return layout.encode(this, b, offset);\n    },\n    writable: true\n  });\n  Object.defineProperty(Class, 'decode', {\n    value: function (b, offset) {\n      return layout.decode(b, offset);\n    },\n    writable: true\n  });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nvar ExternalLayout = /** @class */function (_super) {\n  __extends(ExternalLayout, _super);\n  function ExternalLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Return `true` iff the external layout decodes to an unsigned\n   * integer layout.\n   *\n   * In that case it can be used as the source of {@link\n   * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n   * or as {@link UnionLayoutDiscriminator#layout|external union\n   * discriminators}.\n   *\n   * @abstract\n   */\n  ExternalLayout.prototype.isCount = function () {\n    throw new Error('ExternalLayout is abstract');\n  };\n  return ExternalLayout;\n}(Layout);\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nvar GreedyCount = /** @class */function (_super) {\n  __extends(GreedyCount, _super);\n  function GreedyCount(elementSpan, property) {\n    var _this = this;\n    if (undefined === elementSpan) {\n      elementSpan = 1;\n    }\n    if (!Number.isInteger(elementSpan) || 0 >= elementSpan) {\n      throw new TypeError('elementSpan must be a (positive) integer');\n    }\n    _this = _super.call(this, -1, property) || this;\n    /** The layout for individual elements of the sequence.  The value\n     * must be a positive integer.  If not provided, the value will be\n     * 1. */\n    _this.elementSpan = elementSpan;\n    return _this;\n  }\n  /** @override */\n  GreedyCount.prototype.isCount = function () {\n    return true;\n  };\n  /** @override */\n  GreedyCount.prototype.decode = function (b, offset) {\n    checkUint8Array(b);\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var rem = b.length - offset;\n    return Math.floor(rem / this.elementSpan);\n  };\n  /** @override */\n  GreedyCount.prototype.encode = function (src, b, offset) {\n    return 0;\n  };\n  return GreedyCount;\n}(ExternalLayout);\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nvar OffsetLayout = /** @class */function (_super) {\n  __extends(OffsetLayout, _super);\n  function OffsetLayout(layout, offset, property) {\n    var _this = this;\n    if (!(layout instanceof Layout)) {\n      throw new TypeError('layout must be a Layout');\n    }\n    if (undefined === offset) {\n      offset = 0;\n    } else if (!Number.isInteger(offset)) {\n      throw new TypeError('offset must be integer or undefined');\n    }\n    _this = _super.call(this, layout.span, property || layout.property) || this;\n    /** The subordinated layout. */\n    _this.layout = layout;\n    /** The location of {@link OffsetLayout#layout} relative to the\n     * start of another layout.\n     *\n     * The value may be positive or negative, but an error will thrown\n     * if at the point of use it goes outside the span of the Uint8Array\n     * being accessed.  */\n    _this.offset = offset;\n    return _this;\n  }\n  /** @override */\n  OffsetLayout.prototype.isCount = function () {\n    return this.layout instanceof UInt || this.layout instanceof UIntBE;\n  };\n  /** @override */\n  OffsetLayout.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.decode(b, offset + this.offset);\n  };\n  /** @override */\n  OffsetLayout.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.encode(src, b, offset + this.offset);\n  };\n  return OffsetLayout;\n}(ExternalLayout);\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar UInt = /** @class */function (_super) {\n  __extends(UInt, _super);\n  function UInt(span, property) {\n    var _this = _super.call(this, span, property) || this;\n    if (6 < _this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n    return _this;\n  }\n  /** @override */\n  UInt.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n  };\n  /** @override */\n  UInt.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n    return this.span;\n  };\n  return UInt;\n}(Layout);\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar UIntBE = /** @class */function (_super) {\n  __extends(UIntBE, _super);\n  function UIntBE(span, property) {\n    var _this = _super.call(this, span, property) || this;\n    if (6 < _this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n    return _this;\n  }\n  /** @override */\n  UIntBE.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n  };\n  /** @override */\n  UIntBE.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n    return this.span;\n  };\n  return UIntBE;\n}(Layout);\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar Int = /** @class */function (_super) {\n  __extends(Int, _super);\n  function Int(span, property) {\n    var _this = _super.call(this, span, property) || this;\n    if (6 < _this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n    return _this;\n  }\n  /** @override */\n  Int.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n  };\n  /** @override */\n  Int.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n    return this.span;\n  };\n  return Int;\n}(Layout);\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar IntBE = /** @class */function (_super) {\n  __extends(IntBE, _super);\n  function IntBE(span, property) {\n    var _this = _super.call(this, span, property) || this;\n    if (6 < _this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n    return _this;\n  }\n  /** @override */\n  IntBE.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n  };\n  /** @override */\n  IntBE.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n    return this.span;\n  };\n  return IntBE;\n}(Layout);\nexports.IntBE = IntBE;\nvar V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n  var hi32 = Math.floor(src / V2E32);\n  var lo32 = src - hi32 * V2E32;\n  return {\n    hi32: hi32,\n    lo32: lo32\n  };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n  return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nvar NearUInt64 = /** @class */function (_super) {\n  __extends(NearUInt64, _super);\n  function NearUInt64(property) {\n    return _super.call(this, 8, property) || this;\n  }\n  /** @override */\n  NearUInt64.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var buffer = uint8ArrayToBuffer(b);\n    var lo32 = buffer.readUInt32LE(offset);\n    var hi32 = buffer.readUInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  };\n  /** @override */\n  NearUInt64.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var split = divmodInt64(src);\n    var buffer = uint8ArrayToBuffer(b);\n    buffer.writeUInt32LE(split.lo32, offset);\n    buffer.writeUInt32LE(split.hi32, offset + 4);\n    return 8;\n  };\n  return NearUInt64;\n}(Layout);\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nvar NearUInt64BE = /** @class */function (_super) {\n  __extends(NearUInt64BE, _super);\n  function NearUInt64BE(property) {\n    return _super.call(this, 8, property) || this;\n  }\n  /** @override */\n  NearUInt64BE.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var buffer = uint8ArrayToBuffer(b);\n    var hi32 = buffer.readUInt32BE(offset);\n    var lo32 = buffer.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  };\n  /** @override */\n  NearUInt64BE.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var split = divmodInt64(src);\n    var buffer = uint8ArrayToBuffer(b);\n    buffer.writeUInt32BE(split.hi32, offset);\n    buffer.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  };\n  return NearUInt64BE;\n}(Layout);\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nvar NearInt64 = /** @class */function (_super) {\n  __extends(NearInt64, _super);\n  function NearInt64(property) {\n    return _super.call(this, 8, property) || this;\n  }\n  /** @override */\n  NearInt64.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var buffer = uint8ArrayToBuffer(b);\n    var lo32 = buffer.readUInt32LE(offset);\n    var hi32 = buffer.readInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  };\n  /** @override */\n  NearInt64.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var split = divmodInt64(src);\n    var buffer = uint8ArrayToBuffer(b);\n    buffer.writeUInt32LE(split.lo32, offset);\n    buffer.writeInt32LE(split.hi32, offset + 4);\n    return 8;\n  };\n  return NearInt64;\n}(Layout);\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nvar NearInt64BE = /** @class */function (_super) {\n  __extends(NearInt64BE, _super);\n  function NearInt64BE(property) {\n    return _super.call(this, 8, property) || this;\n  }\n  /** @override */\n  NearInt64BE.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var buffer = uint8ArrayToBuffer(b);\n    var hi32 = buffer.readInt32BE(offset);\n    var lo32 = buffer.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  };\n  /** @override */\n  NearInt64BE.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var split = divmodInt64(src);\n    var buffer = uint8ArrayToBuffer(b);\n    buffer.writeInt32BE(split.hi32, offset);\n    buffer.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  };\n  return NearInt64BE;\n}(Layout);\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar Float = /** @class */function (_super) {\n  __extends(Float, _super);\n  function Float(property) {\n    return _super.call(this, 4, property) || this;\n  }\n  /** @override */\n  Float.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return uint8ArrayToBuffer(b).readFloatLE(offset);\n  };\n  /** @override */\n  Float.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n    return 4;\n  };\n  return Float;\n}(Layout);\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar FloatBE = /** @class */function (_super) {\n  __extends(FloatBE, _super);\n  function FloatBE(property) {\n    return _super.call(this, 4, property) || this;\n  }\n  /** @override */\n  FloatBE.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return uint8ArrayToBuffer(b).readFloatBE(offset);\n  };\n  /** @override */\n  FloatBE.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n    return 4;\n  };\n  return FloatBE;\n}(Layout);\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar Double = /** @class */function (_super) {\n  __extends(Double, _super);\n  function Double(property) {\n    return _super.call(this, 8, property) || this;\n  }\n  /** @override */\n  Double.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return uint8ArrayToBuffer(b).readDoubleLE(offset);\n  };\n  /** @override */\n  Double.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n    return 8;\n  };\n  return Double;\n}(Layout);\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar DoubleBE = /** @class */function (_super) {\n  __extends(DoubleBE, _super);\n  function DoubleBE(property) {\n    return _super.call(this, 8, property) || this;\n  }\n  /** @override */\n  DoubleBE.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return uint8ArrayToBuffer(b).readDoubleBE(offset);\n  };\n  /** @override */\n  DoubleBE.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n    return 8;\n  };\n  return DoubleBE;\n}(Layout);\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar Sequence = /** @class */function (_super) {\n  __extends(Sequence, _super);\n  function Sequence(elementLayout, count, property) {\n    var _this = this;\n    if (!(elementLayout instanceof Layout)) {\n      throw new TypeError('elementLayout must be a Layout');\n    }\n    if (!(count instanceof ExternalLayout && count.isCount() || Number.isInteger(count) && 0 <= count)) {\n      throw new TypeError('count must be non-negative integer ' + 'or an unsigned integer ExternalLayout');\n    }\n    var span = -1;\n    if (!(count instanceof ExternalLayout) && 0 < elementLayout.span) {\n      span = count * elementLayout.span;\n    }\n    _this = _super.call(this, span, property) || this;\n    /** The layout for individual elements of the sequence. */\n    _this.elementLayout = elementLayout;\n    /** The number of elements in the sequence.\n     *\n     * This will be either a non-negative integer or an instance of\n     * {@link ExternalLayout} for which {@link\n     * ExternalLayout#isCount|isCount()} is `true`. */\n    _this.count = count;\n    return _this;\n  }\n  /** @override */\n  Sequence.prototype.getSpan = function (b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var span = 0;\n    var count = this.count;\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n    if (0 < this.elementLayout.span) {\n      span = count * this.elementLayout.span;\n    } else {\n      var idx = 0;\n      while (idx < count) {\n        span += this.elementLayout.getSpan(b, offset + span);\n        ++idx;\n      }\n    }\n    return span;\n  };\n  /** @override */\n  Sequence.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var rv = [];\n    var i = 0;\n    var count = this.count;\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n    while (i < count) {\n      rv.push(this.elementLayout.decode(b, offset));\n      offset += this.elementLayout.getSpan(b, offset);\n      i += 1;\n    }\n    return rv;\n  };\n  /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n   *\n   * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n   * the unused space in the buffer is left unchanged.  If `src` is\n   * longer than {@link Sequence#count|count} the unneeded elements are\n   * ignored.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n  Sequence.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var elo = this.elementLayout;\n    var span = src.reduce(function (span, v) {\n      return span + elo.encode(v, b, offset + span);\n    }, 0);\n    if (this.count instanceof ExternalLayout) {\n      this.count.encode(src.length, b, offset);\n    }\n    return span;\n  };\n  return Sequence;\n}(Layout);\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nvar Structure = /** @class */function (_super) {\n  __extends(Structure, _super);\n  function Structure(fields, property, decodePrefixes) {\n    var _this = this;\n    if (!(Array.isArray(fields) && fields.reduce(function (acc, v) {\n      return acc && v instanceof Layout;\n    }, true))) {\n      throw new TypeError('fields must be array of Layout instances');\n    }\n    if ('boolean' === typeof property && undefined === decodePrefixes) {\n      decodePrefixes = property;\n      property = undefined;\n    }\n    /* Verify absence of unnamed variable-length fields. */\n    for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {\n      var fd = fields_1[_i];\n      if (0 > fd.span && undefined === fd.property) {\n        throw new Error('fields cannot contain unnamed variable-length layout');\n      }\n    }\n    var span = -1;\n    try {\n      span = fields.reduce(function (span, fd) {\n        return span + fd.getSpan();\n      }, 0);\n    } catch (e) {\n      // ignore error\n    }\n    _this = _super.call(this, span, property) || this;\n    /** The sequence of {@link Layout} values that comprise the\n     * structure.\n     *\n     * The individual elements need not be the same type, and may be\n     * either scalar or aggregate layouts.  If a member layout leaves\n     * its {@link Layout#property|property} undefined the\n     * corresponding region of the buffer associated with the element\n     * will not be mutated.\n     *\n     * @type {Layout[]} */\n    _this.fields = fields;\n    /** Control behavior of {@link Layout#decode|decode()} given short\n     * buffers.\n     *\n     * In some situations a structure many be extended with additional\n     * fields over time, with older installations providing only a\n     * prefix of the full structure.  If this property is `true`\n     * decoding will accept those buffers and leave subsequent fields\n     * undefined, as long as the buffer ends at a field boundary.\n     * Defaults to `false`. */\n    _this.decodePrefixes = !!decodePrefixes;\n    return _this;\n  }\n  /** @override */\n  Structure.prototype.getSpan = function (b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var span = 0;\n    try {\n      span = this.fields.reduce(function (span, fd) {\n        var fsp = fd.getSpan(b, offset);\n        offset += fsp;\n        return span + fsp;\n      }, 0);\n    } catch (e) {\n      throw new RangeError('indeterminate span');\n    }\n    return span;\n  };\n  /** @override */\n  Structure.prototype.decode = function (b, offset) {\n    checkUint8Array(b);\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var dest = this.makeDestinationObject();\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(b, offset);\n      }\n      offset += fd.getSpan(b, offset);\n      if (this.decodePrefixes && b.length === offset) {\n        break;\n      }\n    }\n    return dest;\n  };\n  /** Implement {@link Layout#encode|encode} for {@link Structure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the buffer is\n   * left unmodified. */\n  Structure.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var firstOffset = offset;\n    var lastOffset = 0;\n    var lastWrote = 0;\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n      var span = fd.span;\n      lastWrote = 0 < span ? span : 0;\n      if (undefined !== fd.property) {\n        var fv = src[fd.property];\n        if (undefined !== fv) {\n          lastWrote = fd.encode(fv, b, offset);\n          if (0 > span) {\n            /* Read the as-encoded span, which is not necessarily the\n             * same as what we wrote. */\n            span = fd.getSpan(b, offset);\n          }\n        }\n      }\n      lastOffset = offset;\n      offset += span;\n    }\n    /* Use (lastOffset + lastWrote) instead of offset because the last\n     * item may have had a dynamic length and we don't want to include\n     * the padding between it and the end of the space reserved for\n     * it. */\n    return lastOffset + lastWrote - firstOffset;\n  };\n  /** @override */\n  Structure.prototype.fromArray = function (values) {\n    var dest = this.makeDestinationObject();\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n      if (undefined !== fd.property && 0 < values.length) {\n        dest[fd.property] = values.shift();\n      }\n    }\n    return dest;\n  };\n  /**\n   * Get access to the layout of a given property.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Layout} - the layout associated with `property`, or\n   * undefined if there is no such property.\n   */\n  Structure.prototype.layoutFor = function (property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n    return undefined;\n  };\n  /**\n   * Get the offset of a structure member.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Number} - the offset in bytes to the start of `property`\n   * within the structure, or undefined if `property` is not a field\n   * within the structure.  If the property is a member but follows a\n   * variable-length structure member a negative number will be\n   * returned.\n   */\n  Structure.prototype.offsetOf = function (property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    var offset = 0;\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n      if (fd.property === property) {\n        return offset;\n      }\n      if (0 > fd.span) {\n        offset = -1;\n      } else if (0 <= offset) {\n        offset += fd.span;\n      }\n    }\n    return undefined;\n  };\n  return Structure;\n}(Layout);\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nvar UnionDiscriminator = /** @class */function () {\n  function UnionDiscriminator(property) {\n    /** The {@link Layout#property|property} to be used when the\n     * discriminator is referenced in isolation (generally when {@link\n     * Union#decode|Union decode} cannot delegate to a specific\n     * variant). */\n    this.property = property;\n  }\n  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n   *\n   * The implementation of this method need not reference the buffer if\n   * variant information is available through other means. */\n  UnionDiscriminator.prototype.decode = function (b, offset) {\n    throw new Error('UnionDiscriminator is abstract');\n  };\n  /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n   *\n   * The implementation of this method need not store the value if\n   * variant information is maintained through other means. */\n  UnionDiscriminator.prototype.encode = function (src, b, offset) {\n    throw new Error('UnionDiscriminator is abstract');\n  };\n  return UnionDiscriminator;\n}();\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nvar UnionLayoutDiscriminator = /** @class */function (_super) {\n  __extends(UnionLayoutDiscriminator, _super);\n  function UnionLayoutDiscriminator(layout, property) {\n    var _this = this;\n    if (!(layout instanceof ExternalLayout && layout.isCount())) {\n      throw new TypeError('layout must be an unsigned integer ExternalLayout');\n    }\n    _this = _super.call(this, property || layout.property || 'variant') || this;\n    /** The {@link ExternalLayout} used to access the discriminator\n     * value. */\n    _this.layout = layout;\n    return _this;\n  }\n  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  UnionLayoutDiscriminator.prototype.decode = function (b, offset) {\n    return this.layout.decode(b, offset);\n  };\n  /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  UnionLayoutDiscriminator.prototype.encode = function (src, b, offset) {\n    return this.layout.encode(src, b, offset);\n  };\n  return UnionLayoutDiscriminator;\n}(UnionDiscriminator);\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar Union = /** @class */function (_super) {\n  __extends(Union, _super);\n  function Union(discr, defaultLayout, property) {\n    var _this = this;\n    var upv = discr instanceof UInt || discr instanceof UIntBE;\n    var discriminator;\n    if (upv) {\n      discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n    } else if (discr instanceof ExternalLayout && discr.isCount()) {\n      discriminator = new UnionLayoutDiscriminator(discr);\n    } else if (!(discr instanceof UnionDiscriminator)) {\n      throw new TypeError('discr must be a UnionDiscriminator ' + 'or an unsigned integer layout');\n    } else {\n      discriminator = discr;\n    }\n    if (undefined === defaultLayout) {\n      defaultLayout = null;\n    }\n    if (!(null === defaultLayout || defaultLayout instanceof Layout)) {\n      throw new TypeError('defaultLayout must be null or a Layout');\n    }\n    if (null !== defaultLayout) {\n      if (0 > defaultLayout.span) {\n        throw new Error('defaultLayout must have constant span');\n      }\n      if (undefined === defaultLayout.property) {\n        defaultLayout = defaultLayout.replicate('content');\n      }\n    }\n    /* The union span can be estimated only if there's a default\n     * layout.  The union spans its default layout, plus any prefix\n     * variant layout.  By construction both layouts, if present, have\n     * non-negative span. */\n    var span = -1;\n    if (defaultLayout) {\n      span = defaultLayout.span;\n      if (0 <= span && upv) {\n        span += discriminator.layout.span;\n      }\n    }\n    _this = _super.call(this, span, property) || this;\n    /** The interface for the discriminator value in isolation.\n     *\n     * This a {@link UnionDiscriminator} either passed to the\n     * constructor or synthesized from the `discr` constructor\n     * argument.  {@link\n     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n     * `true` iff the `discr` parameter was a non-offset {@link\n     * Layout} instance. */\n    _this.discriminator = discriminator;\n    /** `true` if the {@link Union#discriminator|discriminator} is the\n     * first field in the union.\n     *\n     * If `false` the discriminator is obtained from somewhere\n     * else. */\n    _this.usesPrefixDiscriminator = upv;\n    /** The layout for non-discriminator content when the value of the\n     * discriminator is not recognized.\n     *\n     * This is the value passed to the constructor.  It is\n     * structurally equivalent to the second component of {@link\n     * Union#layout|layout} but may have a different property\n     * name. */\n    _this.defaultLayout = defaultLayout;\n    /** A registry of allowed variants.\n     *\n     * The keys are unsigned integers which should be compatible with\n     * {@link Union.discriminator|discriminator}.  The property value\n     * is the corresponding {@link VariantLayout} instances assigned\n     * to this union by {@link Union#addVariant|addVariant}.\n     *\n     * **NOTE** The registry remains mutable so that variants can be\n     * {@link Union#addVariant|added} at any time.  Users should not\n     * manipulate the content of this property. */\n    _this.registry = {};\n    /* Private variable used when invoking getSourceVariant */\n    var boundGetSourceVariant = _this.defaultGetSourceVariant.bind(_this);\n    /** Function to infer the variant selected by a source object.\n     *\n     * Defaults to {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n     * be overridden using {@link\n     * Union#configGetSourceVariant|configGetSourceVariant}.\n     *\n     * @param {Object} src - as with {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * @returns {(undefined|VariantLayout)} The default variant\n     * (`undefined`) or first registered variant that uses a property\n     * available in `src`. */\n    _this.getSourceVariant = function (src) {\n      return boundGetSourceVariant(src);\n    };\n    /** Function to override the implementation of {@link\n     * Union#getSourceVariant|getSourceVariant}.\n     *\n     * Use this if the desired variant cannot be identified using the\n     * algorithm of {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * **NOTE** The provided function will be invoked bound to this\n     * Union instance, providing local access to {@link\n     * Union#registry|registry}.\n     *\n     * @param {Function} gsv - a function that follows the API of\n     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n    _this.configGetSourceVariant = function (gsv) {\n      boundGetSourceVariant = gsv.bind(this);\n    };\n    return _this;\n  }\n  /** @override */\n  Union.prototype.getSpan = function (b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Default layouts always have non-negative span, so we don't have\n     * one and we have to recognize the variant which will in turn\n     * determine the span. */\n    var vlo = this.getVariant(b, offset);\n    if (!vlo) {\n      throw new Error('unable to determine span for unrecognized variant');\n    }\n    return vlo.getSpan(b, offset);\n  };\n  /**\n   * Method to infer a registered Union variant compatible with `src`.\n   *\n   * The first satisfied rule in the following sequence defines the\n   * return value:\n   * * If `src` has properties matching the Union discriminator and\n   *   the default layout, `undefined` is returned regardless of the\n   *   value of the discriminator property (this ensures the default\n   *   layout will be used);\n   * * If `src` has a property matching the Union discriminator, the\n   *   value of the discriminator identifies a registered variant, and\n   *   either (a) the variant has no layout, or (b) `src` has the\n   *   variant's property, then the variant is returned (because the\n   *   source satisfies the constraints of the variant it identifies);\n   * * If `src` does not have a property matching the Union\n   *   discriminator, but does have a property matching a registered\n   *   variant, then the variant is returned (because the source\n   *   matches a variant without an explicit conflict);\n   * * An error is thrown (because we either can't identify a variant,\n   *   or we were explicitly told the variant but can't satisfy it).\n   *\n   * @param {Object} src - an object presumed to be compatible with\n   * the content of the Union.\n   *\n   * @return {(undefined|VariantLayout)} - as described above.\n   *\n   * @throws {Error} - if `src` cannot be associated with a default or\n   * registered variant.\n   */\n  Union.prototype.defaultGetSourceVariant = function (src) {\n    if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n      if (this.defaultLayout && this.defaultLayout.property && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n        return undefined;\n      }\n      var vlo = this.registry[src[this.discriminator.property]];\n      if (vlo && (!vlo.layout || vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property))) {\n        return vlo;\n      }\n    } else {\n      for (var tag in this.registry) {\n        var vlo = this.registry[tag];\n        if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {\n          return vlo;\n        }\n      }\n    }\n    throw new Error('unable to infer src variant');\n  };\n  /** Implement {@link Layout#decode|decode} for {@link Union}.\n   *\n   * If the variant is {@link Union#addVariant|registered} the return\n   * value is an instance of that variant, with no explicit\n   * discriminator.  Otherwise the {@link Union#defaultLayout|default\n   * layout} is used to decode the content. */\n  Union.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var dest;\n    var dlo = this.discriminator;\n    var discr = dlo.decode(b, offset);\n    var clo = this.registry[discr];\n    if (undefined === clo) {\n      var defaultLayout = this.defaultLayout;\n      var contentOffset = 0;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dest = this.makeDestinationObject();\n      dest[dlo.property] = discr;\n      dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n    } else {\n      dest = clo.decode(b, offset);\n    }\n    return dest;\n  };\n  /** Implement {@link Layout#encode|encode} for {@link Union}.\n   *\n   * This API assumes the `src` object is consistent with the union's\n   * {@link Union#defaultLayout|default layout}.  To encode variants\n   * use the appropriate variant-specific {@link VariantLayout#encode}\n   * method. */\n  Union.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var vlo = this.getSourceVariant(src);\n    if (undefined === vlo) {\n      var dlo = this.discriminator;\n      // this.defaultLayout is not undefined when vlo is undefined\n      var clo = this.defaultLayout;\n      var contentOffset = 0;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dlo.encode(src[dlo.property], b, offset);\n      // clo.property is not undefined when vlo is undefined\n      return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n    }\n    return vlo.encode(src, b, offset);\n  };\n  /** Register a new variant structure within a union.  The newly\n   * created variant is returned.\n   *\n   * @param {Number} variant - initializer for {@link\n   * VariantLayout#variant|variant}.\n   *\n   * @param {Layout} layout - initializer for {@link\n   * VariantLayout#layout|layout}.\n   *\n   * @param {String} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {VariantLayout} */\n  Union.prototype.addVariant = function (variant, layout, property) {\n    var rv = new VariantLayout(this, variant, layout, property);\n    this.registry[variant] = rv;\n    return rv;\n  };\n  /**\n   * Get the layout associated with a registered variant.\n   *\n   * If `vb` does not produce a registered variant the function returns\n   * `undefined`.\n   *\n   * @param {(Number|Uint8Array)} vb - either the variant number, or a\n   * buffer from which the discriminator is to be read.\n   *\n   * @param {Number} offset - offset into `vb` for the start of the\n   * union.  Used only when `vb` is an instance of {Uint8Array}.\n   *\n   * @return {({VariantLayout}|undefined)}\n   */\n  Union.prototype.getVariant = function (vb, offset) {\n    var variant;\n    if (vb instanceof Uint8Array) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n      variant = this.discriminator.decode(vb, offset);\n    } else {\n      variant = vb;\n    }\n    return this.registry[variant];\n  };\n  return Union;\n}(Layout);\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nvar VariantLayout = /** @class */function (_super) {\n  __extends(VariantLayout, _super);\n  function VariantLayout(union, variant, layout, property) {\n    var _this = this;\n    if (!(union instanceof Union)) {\n      throw new TypeError('union must be a Union');\n    }\n    if (!Number.isInteger(variant) || 0 > variant) {\n      throw new TypeError('variant must be a (non-negative) integer');\n    }\n    if ('string' === typeof layout && undefined === property) {\n      property = layout;\n      layout = null;\n    }\n    if (layout) {\n      if (!(layout instanceof Layout)) {\n        throw new TypeError('layout must be a Layout');\n      }\n      if (null !== union.defaultLayout && 0 <= layout.span && layout.span > union.defaultLayout.span) {\n        throw new Error('variant span exceeds span of containing union');\n      }\n      if ('string' !== typeof property) {\n        throw new TypeError('variant must have a String property');\n      }\n    }\n    var span = union.span;\n    if (0 > union.span) {\n      span = layout ? layout.span : 0;\n      if (0 <= span && union.usesPrefixDiscriminator) {\n        span += union.discriminator.layout.span;\n      }\n    }\n    _this = _super.call(this, span, property) || this;\n    /** The {@link Union} to which this variant belongs. */\n    _this.union = union;\n    /** The unsigned integral value identifying this variant within\n     * the {@link Union#discriminator|discriminator} of the containing\n     * union. */\n    _this.variant = variant;\n    /** The {@link Layout} to be used when reading/writing the\n     * non-discriminator part of the {@link\n     * VariantLayout#union|union}.  If `null` the variant carries no\n     * data. */\n    _this.layout = layout || null;\n    return _this;\n  }\n  /** @override */\n  VariantLayout.prototype.getSpan = function (b, offset) {\n    if (0 <= this.span) {\n      /* Will be equal to the containing union span if that is not\n       * variable. */\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    /* Span is defined solely by the variant (and prefix discriminator) */\n    var span = 0;\n    if (this.layout) {\n      span = this.layout.getSpan(b, offset + contentOffset);\n    }\n    return contentOffset + span;\n  };\n  /** @override */\n  VariantLayout.prototype.decode = function (b, offset) {\n    var dest = this.makeDestinationObject();\n    if (undefined === offset) {\n      offset = 0;\n    }\n    if (this !== this.union.getVariant(b, offset)) {\n      throw new Error('variant mismatch');\n    }\n    var contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    // VariantLayout property is never undefined\n    var property = this.property;\n    if (this.layout) {\n      dest[property] = this.layout.decode(b, offset + contentOffset);\n    } else if (property) {\n      dest[property] = true;\n    } else if (this.union.usesPrefixDiscriminator) {\n      dest[this.union.discriminator.property] = this.variant;\n    }\n    return dest;\n  };\n  /** @override */\n  VariantLayout.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    // VariantLayout property is never undefined\n    var property = this.property;\n    if (this.layout && !Object.prototype.hasOwnProperty.call(src, property)) {\n      throw new TypeError('variant lacks property ' + property);\n    }\n    this.union.discriminator.encode(this.variant, b, offset);\n    var span = contentOffset;\n    if (this.layout) {\n      this.layout.encode(src[property], b, offset + contentOffset);\n      span += this.layout.getSpan(b, offset + contentOffset);\n      if (0 <= this.union.span && span > this.union.span) {\n        throw new Error('encoded variant overruns containing union');\n      }\n    }\n    return span;\n  };\n  /** Delegate {@link Layout#fromArray|fromArray} to {@link\n   * VariantLayout#layout|layout}. */\n  VariantLayout.prototype.fromArray = function (values) {\n    if (this.layout) {\n      return this.layout.fromArray(values);\n    }\n    return undefined;\n  };\n  return VariantLayout;\n}(Layout);\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n  if (0 > v) {\n    v += 0x100000000;\n  }\n  return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar BitStructure = /** @class */function (_super) {\n  __extends(BitStructure, _super);\n  function BitStructure(word, msb, property) {\n    var _this = this;\n    if (!(word instanceof UInt || word instanceof UIntBE)) {\n      throw new TypeError('word must be a UInt or UIntBE layout');\n    }\n    if ('string' === typeof msb && undefined === property) {\n      property = msb;\n      msb = false;\n    }\n    if (4 < word.span) {\n      throw new RangeError('word cannot exceed 32 bits');\n    }\n    _this = _super.call(this, word.span, property) || this;\n    /** The layout used for the packed value.  {@link BitField}\n     * instances are packed sequentially depending on {@link\n     * BitStructure#msb|msb}. */\n    _this.word = word;\n    /** Whether the bit sequences are packed starting at the most\n     * significant bit growing down (`true`), or the least significant\n     * bit growing up (`false`).\n     *\n     * **NOTE** Regardless of this value, the least significant bit of\n     * any {@link BitField} value is the least significant bit of the\n     * corresponding section of the packed value. */\n    _this.msb = !!msb;\n    /** The sequence of {@link BitField} layouts that comprise the\n     * packed structure.\n     *\n     * **NOTE** The array remains mutable to allow fields to be {@link\n     * BitStructure#addField|added} after construction.  Users should\n     * not manipulate the content of this property.*/\n    _this.fields = [];\n    /* Storage for the value.  Capture a variable instead of using an\n     * instance property because we don't want anything to change the\n     * value without going through the mutator. */\n    var value = 0;\n    _this._packedSetValue = function (v) {\n      value = fixBitwiseResult(v);\n      return this;\n    };\n    _this._packedGetValue = function () {\n      return value;\n    };\n    return _this;\n  }\n  /** @override */\n  BitStructure.prototype.decode = function (b, offset) {\n    var dest = this.makeDestinationObject();\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var value = this.word.decode(b, offset);\n    this._packedSetValue(value);\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(value);\n      }\n    }\n    return dest;\n  };\n  /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the packed\n   * value is left unmodified.  Unused bits are also left unmodified. */\n  BitStructure.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var value = this.word.decode(b, offset);\n    this._packedSetValue(value);\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n      if (undefined !== fd.property) {\n        var fv = src[fd.property];\n        if (undefined !== fv) {\n          fd.encode(fv);\n        }\n      }\n    }\n    return this.word.encode(this._packedGetValue(), b, offset);\n  };\n  /** Register a new bitfield with a containing bit structure.  The\n   * resulting bitfield is returned.\n   *\n   * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {BitField} */\n  BitStructure.prototype.addField = function (bits, property) {\n    var bf = new BitField(this, bits, property);\n    this.fields.push(bf);\n    return bf;\n  };\n  /** As with {@link BitStructure#addField|addField} for single-bit\n   * fields with `boolean` value representation.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {Boolean} */\n  BitStructure.prototype.addBoolean = function (property) {\n    // This is my Boolean, not the Javascript one.\n    // eslint-disable-next-line no-new-wrappers\n    var bf = new Boolean(this, property);\n    this.fields.push(bf);\n    return bf;\n  };\n  /**\n   * Get access to the bit field for a given property.\n   *\n   * @param {String} property - the bit field of interest.\n   *\n   * @return {BitField} - the field associated with `property`, or\n   * undefined if there is no such property.\n   */\n  BitStructure.prototype.fieldFor = function (property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n    return undefined;\n  };\n  return BitStructure;\n}(Layout);\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nvar BitField = /** @class */function () {\n  function BitField(container, bits, property) {\n    if (!(container instanceof BitStructure)) {\n      throw new TypeError('container must be a BitStructure');\n    }\n    if (!Number.isInteger(bits) || 0 >= bits) {\n      throw new TypeError('bits must be positive integer');\n    }\n    var totalBits = 8 * container.span;\n    var usedBits = container.fields.reduce(function (sum, fd) {\n      return sum + fd.bits;\n    }, 0);\n    if (bits + usedBits > totalBits) {\n      throw new Error('bits too long for span remainder (' + (totalBits - usedBits) + ' of ' + totalBits + ' remain)');\n    }\n    /** The {@link BitStructure} instance to which this bit field\n     * belongs. */\n    this.container = container;\n    /** The span of this value in bits. */\n    this.bits = bits;\n    /** A mask of {@link BitField#bits|bits} bits isolating value bits\n     * that fit within the field.\n     *\n     * That is, it masks a value that has not yet been shifted into\n     * position within its containing packed integer. */\n    this.valueMask = (1 << bits) - 1;\n    if (32 === bits) {\n      // shifted value out of range\n      this.valueMask = 0xFFFFFFFF;\n    }\n    /** The offset of the value within the containing packed unsigned\n     * integer.  The least significant bit of the packed value is at\n     * offset zero, regardless of bit ordering used. */\n    this.start = usedBits;\n    if (this.container.msb) {\n      this.start = totalBits - usedBits - bits;\n    }\n    /** A mask of {@link BitField#bits|bits} isolating the field value\n     * within the containing packed unsigned integer. */\n    this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n    /** The property name used when this bitfield is represented in an\n     * Object.\n     *\n     * Intended to be functionally equivalent to {@link\n     * Layout#property}.\n     *\n     * If left undefined the corresponding span of bits will be\n     * treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field. */\n  BitField.prototype.decode = function (b, offset) {\n    var word = this.container._packedGetValue();\n    var wordValue = fixBitwiseResult(word & this.wordMask);\n    var value = wordValue >>> this.start;\n    return value;\n  };\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field.\n   *\n   * **NOTE** This is not a specialization of {@link\n   * Layout#encode|Layout.encode} and there is no return value. */\n  BitField.prototype.encode = function (value) {\n    if (!Number.isInteger(value) || value !== fixBitwiseResult(value & this.valueMask)) {\n      throw new TypeError(nameWithProperty('BitField.encode', this) + ' value must be integer not exceeding ' + this.valueMask);\n    }\n    var word = this.container._packedGetValue();\n    var wordValue = fixBitwiseResult(value << this.start);\n    this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask) | wordValue);\n  };\n  return BitField;\n}();\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nvar Boolean = /** @class */function (_super) {\n  __extends(Boolean, _super);\n  function Boolean(container, property) {\n    return _super.call(this, container, 1, property) || this;\n  }\n  /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n   *\n   * @returns {boolean} */\n  Boolean.prototype.decode = function (b, offset) {\n    return !!BitField.prototype.decode.call(this, b, offset);\n  };\n  /** @override */\n  Boolean.prototype.encode = function (value) {\n    if ('boolean' === typeof value) {\n      // BitField requires integer values\n      value = +value;\n    }\n    return BitField.prototype.encode.call(this, value);\n  };\n  return Boolean;\n}(BitField);\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar Blob = /** @class */function (_super) {\n  __extends(Blob, _super);\n  function Blob(length, property) {\n    var _this = this;\n    if (!(length instanceof ExternalLayout && length.isCount() || Number.isInteger(length) && 0 <= length)) {\n      throw new TypeError('length must be positive integer ' + 'or an unsigned integer ExternalLayout');\n    }\n    var span = -1;\n    if (!(length instanceof ExternalLayout)) {\n      span = length;\n    }\n    _this = _super.call(this, span, property) || this;\n    /** The number of bytes in the blob.\n     *\n     * This may be a non-negative integer, or an instance of {@link\n     * ExternalLayout} that satisfies {@link\n     * ExternalLayout#isCount|isCount()}. */\n    _this.length = length;\n    return _this;\n  }\n  /** @override */\n  Blob.prototype.getSpan = function (b, offset) {\n    var span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return span;\n  };\n  /** @override */\n  Blob.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return uint8ArrayToBuffer(b).slice(offset, offset + span);\n  };\n  /** Implement {@link Layout#encode|encode} for {@link Blob}.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n  Blob.prototype.encode = function (src, b, offset) {\n    var span = this.length;\n    if (this.length instanceof ExternalLayout) {\n      span = src.length;\n    }\n    if (!(src instanceof Uint8Array && span === src.length)) {\n      throw new TypeError(nameWithProperty('Blob.encode', this) + ' requires (length ' + span + ') Uint8Array as src');\n    }\n    if (offset + span > b.length) {\n      throw new RangeError('encoding overruns Uint8Array');\n    }\n    var srcBuffer = uint8ArrayToBuffer(src);\n    uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n    if (this.length instanceof ExternalLayout) {\n      this.length.encode(span, b, offset);\n    }\n    return span;\n  };\n  return Blob;\n}(Layout);\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar CString = /** @class */function (_super) {\n  __extends(CString, _super);\n  function CString(property) {\n    return _super.call(this, -1, property) || this;\n  }\n  /** @override */\n  CString.prototype.getSpan = function (b, offset) {\n    checkUint8Array(b);\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var idx = offset;\n    while (idx < b.length && 0 !== b[idx]) {\n      idx += 1;\n    }\n    return 1 + idx - offset;\n  };\n  /** @override */\n  CString.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var span = this.getSpan(b, offset);\n    return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n  };\n  /** @override */\n  CString.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n    var srcb = buffer_1.Buffer.from(src, 'utf8');\n    var span = srcb.length;\n    if (offset + span > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    var buffer = uint8ArrayToBuffer(b);\n    srcb.copy(buffer, offset);\n    buffer[offset + span] = 0;\n    return span + 1;\n  };\n  return CString;\n}(Layout);\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar UTF8 = /** @class */function (_super) {\n  __extends(UTF8, _super);\n  function UTF8(maxSpan, property) {\n    var _this = this;\n    if ('string' === typeof maxSpan && undefined === property) {\n      property = maxSpan;\n      maxSpan = undefined;\n    }\n    if (undefined === maxSpan) {\n      maxSpan = -1;\n    } else if (!Number.isInteger(maxSpan)) {\n      throw new TypeError('maxSpan must be an integer');\n    }\n    _this = _super.call(this, -1, property) || this;\n    /** The maximum span of the layout in bytes.\n     *\n     * Positive values are generally expected.  Zero is abnormal.\n     * Attempts to encode or decode a value that exceeds this length\n     * will throw a `RangeError`.\n     *\n     * A negative value indicates that there is no bound on the length\n     * of the content. */\n    _this.maxSpan = maxSpan;\n    return _this;\n  }\n  /** @override */\n  UTF8.prototype.getSpan = function (b, offset) {\n    checkUint8Array(b);\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.length - offset;\n  };\n  /** @override */\n  UTF8.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    var span = this.getSpan(b, offset);\n    if (0 <= this.maxSpan && this.maxSpan < span) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n    return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n  };\n  /** @override */\n  UTF8.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n    var srcb = buffer_1.Buffer.from(src, 'utf8');\n    var span = srcb.length;\n    if (0 <= this.maxSpan && this.maxSpan < span) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n    if (offset + span > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    srcb.copy(uint8ArrayToBuffer(b), offset);\n    return span;\n  };\n  return UTF8;\n}(Layout);\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar Constant = /** @class */function (_super) {\n  __extends(Constant, _super);\n  function Constant(value, property) {\n    var _this = _super.call(this, 0, property) || this;\n    /** The value produced by this constant when the layout is {@link\n     * Constant#decode|decoded}.\n     *\n     * Any JavaScript value including `null` and `undefined` is\n     * permitted.\n     *\n     * **WARNING** If `value` passed in the constructor was not\n     * frozen, it is possible for users of decoded values to change\n     * the content of the value. */\n    _this.value = value;\n    return _this;\n  }\n  /** @override */\n  Constant.prototype.decode = function (b, offset) {\n    return this.value;\n  };\n  /** @override */\n  Constant.prototype.encode = function (src, b, offset) {\n    /* Constants take no space */\n    return 0;\n  };\n  return Constant;\n}(Layout);\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\nexports.greedy = function (elementSpan, property) {\n  return new GreedyCount(elementSpan, property);\n};\n/** Factory for {@link OffsetLayout}. */\nexports.offset = function (layout, offset, property) {\n  return new OffsetLayout(layout, offset, property);\n};\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = function (property) {\n  return new UInt(1, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = function (property) {\n  return new UInt(2, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = function (property) {\n  return new UInt(3, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = function (property) {\n  return new UInt(4, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = function (property) {\n  return new UInt(5, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = function (property) {\n  return new UInt(6, property);\n};\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = function (property) {\n  return new NearUInt64(property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = function (property) {\n  return new UIntBE(2, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = function (property) {\n  return new UIntBE(3, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = function (property) {\n  return new UIntBE(4, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = function (property) {\n  return new UIntBE(5, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = function (property) {\n  return new UIntBE(6, property);\n};\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = function (property) {\n  return new NearUInt64BE(property);\n};\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = function (property) {\n  return new Int(1, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = function (property) {\n  return new Int(2, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = function (property) {\n  return new Int(3, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = function (property) {\n  return new Int(4, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = function (property) {\n  return new Int(5, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = function (property) {\n  return new Int(6, property);\n};\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = function (property) {\n  return new NearInt64(property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = function (property) {\n  return new IntBE(2, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = function (property) {\n  return new IntBE(3, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = function (property) {\n  return new IntBE(4, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = function (property) {\n  return new IntBE(5, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = function (property) {\n  return new IntBE(6, property);\n};\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = function (property) {\n  return new NearInt64BE(property);\n};\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = function (property) {\n  return new Float(property);\n};\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = function (property) {\n  return new FloatBE(property);\n};\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = function (property) {\n  return new Double(property);\n};\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = function (property) {\n  return new DoubleBE(property);\n};\n/** Factory for {@link Structure} values. */\nexports.struct = function (fields, property, decodePrefixes) {\n  return new Structure(fields, property, decodePrefixes);\n};\n/** Factory for {@link BitStructure} values. */\nexports.bits = function (word, msb, property) {\n  return new BitStructure(word, msb, property);\n};\n/** Factory for {@link Sequence} values. */\nexports.seq = function (elementLayout, count, property) {\n  return new Sequence(elementLayout, count, property);\n};\n/** Factory for {@link Union} values. */\nexports.union = function (discr, defaultLayout, property) {\n  return new Union(discr, defaultLayout, property);\n};\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = function (layout, property) {\n  return new UnionLayoutDiscriminator(layout, property);\n};\n/** Factory for {@link Blob} values. */\nexports.blob = function (length, property) {\n  return new Blob(length, property);\n};\n/** Factory for {@link CString} values. */\nexports.cstr = function (property) {\n  return new CString(property);\n};\n/** Factory for {@link UTF8} values. */\nexports.utf8 = function (maxSpan, property) {\n  return new UTF8(maxSpan, property);\n};\n/** Factory for {@link Constant} values. */\nexports.constant = function (value, property) {\n  return new Constant(value, property);\n};","map":{"version":3,"mappings":"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","names":["checkUint8Array","b","Uint8Array","TypeError","exports","uint8ArrayToBuffer","buffer_1","from","buffer","byteOffset","length","span","property","Number","isInteger","Layout","offset","Error","src","RangeError","rv","Object","create","constructor","prototype","assign","values","undefined","nameWithProperty","name","lo","bindConstructorLayout","Class","layout","hasOwnProperty","call","layout_","boundConstructor_","makeDestinationObject","defineProperty","value","encode","writable","decode","__extends","ExternalLayout","elementSpan","_this","GreedyCount","rem","Math","floor","OffsetLayout","UInt","UIntBE","_super","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","elementLayout","count","isCount","Sequence","idx","getSpan","i","push","elo","reduce","v","fields","decodePrefixes","Array","isArray","acc","fields_1","_i","fd","e","Structure","fsp","dest","_a","firstOffset","lastOffset","lastWrote","fv","shift","UnionDiscriminator","UnionLayoutDiscriminator","discr","defaultLayout","upv","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","Union","vlo","getVariant","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","union","fromArray","fixBitwiseResult","word","msb","_packedSetValue","_packedGetValue","BitStructure","bits","bf","BitField","Boolean","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","srcb","copy","maxSpan","UTF8","Constant"],"sourceRoot":"","sources":["../src/Layout.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}