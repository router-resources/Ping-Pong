{"ast":null,"code":"const Mutex = require('async-mutex').Mutex;\nconst {\n  createAsyncMiddleware\n} = require('json-rpc-engine');\nconst createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold');\nconst LogFilter = require('./log-filter.js');\nconst BlockFilter = require('./block-filter.js');\nconst TxFilter = require('./tx-filter.js');\nconst {\n  intToHex,\n  hexToInt\n} = require('./hexUtils');\nmodule.exports = createEthFilterMiddleware;\nfunction createEthFilterMiddleware(_ref) {\n  let {\n    blockTracker,\n    provider\n  } = _ref;\n  // create filter collection\n  let filterIndex = 0;\n  let filters = {};\n  // create update mutex\n  const mutex = new Mutex();\n  const waitForFree = mutexMiddlewareWrapper({\n    mutex\n  });\n  const middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))\n  });\n\n  // setup filter updating and destroy handler\n  const filterUpdater = async _ref2 => {\n    let {\n      oldBlock,\n      newBlock\n    } = _ref2;\n    if (filters.length === 0) return;\n    // lock update reads\n    const releaseLock = await mutex.acquire();\n    try {\n      // process all filters in parallel\n      await Promise.all(objValues(filters).map(async filter => {\n        try {\n          await filter.update({\n            oldBlock,\n            newBlock\n          });\n        } catch (err) {\n          // handle each error individually so filter update errors don't affect other filters\n          console.error(err);\n        }\n      }));\n    } catch (err) {\n      // log error so we don't skip the releaseLock\n      console.error(err);\n    }\n    // unlock update reads\n    releaseLock();\n  };\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter;\n  middleware.newBlockFilter = newBlockFilter;\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter;\n  middleware.uninstallFilter = uninstallFilterHandler;\n  middleware.getFilterChanges = getFilterChanges;\n  middleware.getFilterLogs = getFilterLogs;\n\n  // expose destroy method for cleanup\n  middleware.destroy = () => {\n    uninstallAllFilters();\n  };\n  return middleware;\n\n  //\n  // new filters\n  //\n\n  async function newLogFilter(params) {\n    const filter = new LogFilter({\n      provider,\n      params\n    });\n    const filterIndex = await installFilter(filter);\n    return filter;\n  }\n  async function newBlockFilter() {\n    const filter = new BlockFilter({\n      provider\n    });\n    const filterIndex = await installFilter(filter);\n    return filter;\n  }\n  async function newPendingTransactionFilter() {\n    const filter = new TxFilter({\n      provider\n    });\n    const filterIndex = await installFilter(filter);\n    return filter;\n  }\n\n  //\n  // get filter changes\n  //\n\n  async function getFilterChanges(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex);\n    const filter = filters[filterIndex];\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`);\n    }\n    const results = filter.getChangesAndClear();\n    return results;\n  }\n  async function getFilterLogs(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex);\n    const filter = filters[filterIndex];\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`);\n    }\n    // only return results for log filters\n    if (filter.type === 'log') {\n      results = filter.getAllResults();\n    } else {\n      results = [];\n    }\n    return results;\n  }\n\n  //\n  // remove filters\n  //\n\n  async function uninstallFilterHandler(filterIndexHex) {\n    // check filter exists\n    const filterIndex = hexToInt(filterIndexHex);\n    const filter = filters[filterIndex];\n    const result = Boolean(filter);\n    // uninstall filter\n    if (result) {\n      await uninstallFilter(filterIndex);\n    }\n    return result;\n  }\n\n  //\n  // utils\n  //\n\n  async function installFilter(filter) {\n    const prevFilterCount = objValues(filters).length;\n    // install filter\n    const currentBlock = await blockTracker.getLatestBlock();\n    await filter.initialize({\n      currentBlock\n    });\n    filterIndex++;\n    filters[filterIndex] = filter;\n    filter.id = filterIndex;\n    filter.idHex = intToHex(filterIndex);\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length;\n    updateBlockTrackerSubs({\n      prevFilterCount,\n      newFilterCount\n    });\n    return filterIndex;\n  }\n  async function uninstallFilter(filterIndex) {\n    const prevFilterCount = objValues(filters).length;\n    delete filters[filterIndex];\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length;\n    updateBlockTrackerSubs({\n      prevFilterCount,\n      newFilterCount\n    });\n  }\n  async function uninstallAllFilters() {\n    const prevFilterCount = objValues(filters).length;\n    filters = {};\n    // update block tracker subs\n    updateBlockTrackerSubs({\n      prevFilterCount,\n      newFilterCount: 0\n    });\n  }\n  function updateBlockTrackerSubs(_ref3) {\n    let {\n      prevFilterCount,\n      newFilterCount\n    } = _ref3;\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater);\n      return;\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater);\n      return;\n    }\n  }\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware(async function () {\n    const filter = await createFilterFn(...arguments);\n    const result = intToHex(filter.id);\n    return result;\n  });\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware(async (req, res) => {\n    const result = await asyncFn.apply(null, req.params);\n    res.result = result;\n  });\n}\nfunction mutexMiddlewareWrapper(_ref4) {\n  let {\n    mutex\n  } = _ref4;\n  return middleware => {\n    return async (req, res, next, end) => {\n      // wait for mutex available\n      // we can release immediately because\n      // we just need to make sure updates aren't active\n      const releaseLock = await mutex.acquire();\n      releaseLock();\n      middleware(req, res, next, end);\n    };\n  };\n}\nfunction objValues(obj, fn) {\n  const values = [];\n  for (let key in obj) {\n    values.push(obj[key]);\n  }\n  return values;\n}","map":{"version":3,"names":["Mutex","require","createAsyncMiddleware","createJsonRpcMiddleware","LogFilter","BlockFilter","TxFilter","intToHex","hexToInt","module","exports","createEthFilterMiddleware","blockTracker","provider","filterIndex","filters","mutex","waitForFree","mutexMiddlewareWrapper","middleware","eth_newFilter","toFilterCreationMiddleware","newLogFilter","eth_newBlockFilter","newBlockFilter","eth_newPendingTransactionFilter","newPendingTransactionFilter","eth_uninstallFilter","toAsyncRpcMiddleware","uninstallFilterHandler","eth_getFilterChanges","getFilterChanges","eth_getFilterLogs","getFilterLogs","filterUpdater","oldBlock","newBlock","length","releaseLock","acquire","Promise","all","objValues","map","filter","update","err","console","error","uninstallFilter","destroy","uninstallAllFilters","params","installFilter","filterIndexHex","Error","results","getChangesAndClear","type","getAllResults","result","Boolean","prevFilterCount","currentBlock","getLatestBlock","initialize","id","idHex","newFilterCount","updateBlockTrackerSubs","on","removeListener","createFilterFn","asyncFn","req","res","apply","next","end","obj","fn","values","key","push"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/eth-json-rpc-filters/index.js"],"sourcesContent":["const Mutex = require('async-mutex').Mutex\nconst { createAsyncMiddleware } = require('json-rpc-engine')\nconst createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold')\nconst LogFilter = require('./log-filter.js')\nconst BlockFilter = require('./block-filter.js')\nconst TxFilter = require('./tx-filter.js')\nconst { intToHex, hexToInt } = require('./hexUtils')\n\nmodule.exports = createEthFilterMiddleware\n\nfunction createEthFilterMiddleware({ blockTracker, provider }) {\n\n  // create filter collection\n  let filterIndex = 0\n  let filters = {}\n  // create update mutex\n  const mutex = new Mutex()\n  const waitForFree = mutexMiddlewareWrapper({ mutex })\n\n  const middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter:                   waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter:              waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter:             waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges:            waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs:               waitForFree(toAsyncRpcMiddleware(getFilterLogs)),\n  })\n\n  // setup filter updating and destroy handler\n  const filterUpdater = async ({ oldBlock, newBlock }) => {\n    if (filters.length === 0) return\n    // lock update reads\n    const releaseLock = await mutex.acquire()\n    try {\n      // process all filters in parallel\n      await Promise.all(objValues(filters).map(async (filter) => {\n        try {\n         await filter.update({ oldBlock, newBlock })\n        } catch (err) {\n          // handle each error individually so filter update errors don't affect other filters\n          console.error(err)\n        }\n      }))\n    } catch (err) {\n      // log error so we don't skip the releaseLock\n      console.error(err)\n    }\n    // unlock update reads\n    releaseLock()\n  }\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter\n  middleware.newBlockFilter = newBlockFilter\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter\n  middleware.uninstallFilter = uninstallFilterHandler\n  middleware.getFilterChanges = getFilterChanges\n  middleware.getFilterLogs = getFilterLogs\n\n  // expose destroy method for cleanup\n  middleware.destroy = () => {\n    uninstallAllFilters()\n  }\n\n  return middleware\n\n  //\n  // new filters\n  //\n\n  async function newLogFilter(params) {\n    const filter = new LogFilter({ provider, params })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newBlockFilter() {\n    const filter = new BlockFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newPendingTransactionFilter() {\n    const filter = new TxFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  //\n  // get filter changes\n  //\n\n  async function getFilterChanges(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    const results = filter.getChangesAndClear()\n    return results\n  }\n\n  async function getFilterLogs(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    // only return results for log filters\n    if (filter.type === 'log') {\n      results = filter.getAllResults()\n    } else {\n      results = []\n    }\n    return results\n  }\n\n\n  //\n  // remove filters\n  //\n\n\n  async function uninstallFilterHandler(filterIndexHex) {\n    // check filter exists\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    const result = Boolean(filter)\n    // uninstall filter\n    if (result) {\n      await uninstallFilter(filterIndex)\n    }\n    return result\n  }\n\n  //\n  // utils\n  //\n\n  async function installFilter(filter) {\n    const prevFilterCount = objValues(filters).length\n    // install filter\n    const currentBlock = await blockTracker.getLatestBlock()\n    await filter.initialize({ currentBlock })\n    filterIndex++\n    filters[filterIndex] = filter\n    filter.id = filterIndex\n    filter.idHex = intToHex(filterIndex)\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n    return filterIndex\n  }\n\n  async function uninstallFilter(filterIndex) {\n    const prevFilterCount = objValues(filters).length\n    delete filters[filterIndex]\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n  }\n\n  async function uninstallAllFilters() {\n    const prevFilterCount = objValues(filters).length\n    filters = {}\n    // update block tracker subs\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount: 0 })\n  }\n\n  function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater)\n      return\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater)\n      return\n    }\n  }\n\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware(async (...args) => {\n    const filter = await createFilterFn(...args)\n    const result = intToHex(filter.id)\n    return result\n  })\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware(async (req, res) => {\n    const result = await asyncFn.apply(null, req.params)\n    res.result = result\n  })\n}\n\nfunction mutexMiddlewareWrapper({ mutex }) {\n  return (middleware) => {\n    return async (req, res, next, end) => {\n      // wait for mutex available\n      // we can release immediately because\n      // we just need to make sure updates aren't active\n      const releaseLock = await mutex.acquire()\n      releaseLock()\n      middleware(req, res, next, end)\n    }\n  }\n}\n\nfunction objValues(obj, fn){\n  const values = []\n  for (let key in obj) {\n    values.push(obj[key])\n  }\n  return values\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}