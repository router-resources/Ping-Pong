{"ast":null,"code":"const ethUtil = require('ethereumjs-util');\nconst ethAbi = require('ethereumjs-abi');\nmodule.exports = {\n  concatSig: function (v, r, s) {\n    const rSig = ethUtil.fromSigned(r);\n    const sSig = ethUtil.fromSigned(s);\n    const vSig = ethUtil.bufferToInt(v);\n    const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64);\n    const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64);\n    const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));\n    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex');\n  },\n  normalize: function (input) {\n    if (!input) return;\n    if (typeof input === 'number') {\n      const buffer = ethUtil.toBuffer(input);\n      input = ethUtil.bufferToHex(buffer);\n    }\n    if (typeof input !== 'string') {\n      var msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n      msg += ' received ' + typeof input + ': ' + input;\n      throw new Error(msg);\n    }\n    return ethUtil.addHexPrefix(input.toLowerCase());\n  },\n  personalSign: function (privateKey, msgParams) {\n    var message = ethUtil.toBuffer(msgParams.data);\n    var msgHash = ethUtil.hashPersonalMessage(message);\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n    var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));\n    return serialized;\n  },\n  recoverPersonalSignature: function (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams);\n    const sender = ethUtil.publicToAddress(publicKey);\n    const senderHex = ethUtil.bufferToHex(sender);\n    return senderHex;\n  },\n  extractPublicKey: function (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams);\n    return '0x' + publicKey.toString('hex');\n  },\n  typedSignatureHash: function (typedData) {\n    const hashBuffer = typedSignatureHash(typedData);\n    return ethUtil.bufferToHex(hashBuffer);\n  },\n  signTypedData: function (privateKey, msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data);\n    const sig = ethUtil.ecsign(msgHash, privateKey);\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));\n  },\n  recoverTypedSignature: function (msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data);\n    const publicKey = recoverPublicKey(msgHash, msgParams.sig);\n    const sender = ethUtil.publicToAddress(publicKey);\n    return ethUtil.bufferToHex(sender);\n  }\n};\n\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction typedSignatureHash(typedData) {\n  const error = new Error('Expect argument to be non-empty array');\n  if (typeof typedData !== 'object' || !typedData.length) throw error;\n  const data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value;\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) throw error;\n    return e.type + ' ' + e.name;\n  });\n  return ethAbi.soliditySHA3(['bytes32', 'bytes32'], [ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema), ethAbi.soliditySHA3(types, data)]);\n}\nfunction recoverPublicKey(hash, sig) {\n  const signature = ethUtil.toBuffer(sig);\n  const sigParams = ethUtil.fromRpcSig(signature);\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);\n}\nfunction getPublicKeyFor(msgParams) {\n  const message = ethUtil.toBuffer(msgParams.data);\n  const msgHash = ethUtil.hashPersonalMessage(message);\n  return recoverPublicKey(msgHash, msgParams.sig);\n}\nfunction padWithZeroes(number, length) {\n  var myString = '' + number;\n  while (myString.length < length) {\n    myString = '0' + myString;\n  }\n  return myString;\n}","map":{"version":3,"names":["ethUtil","require","ethAbi","module","exports","concatSig","v","r","s","rSig","fromSigned","sSig","vSig","bufferToInt","rStr","padWithZeroes","toUnsigned","toString","sStr","vStr","stripHexPrefix","intToHex","addHexPrefix","concat","normalize","input","buffer","toBuffer","bufferToHex","msg","Error","toLowerCase","personalSign","privateKey","msgParams","message","data","msgHash","hashPersonalMessage","sig","ecsign","serialized","recoverPersonalSignature","publicKey","getPublicKeyFor","sender","publicToAddress","senderHex","extractPublicKey","typedSignatureHash","typedData","hashBuffer","signTypedData","recoverTypedSignature","recoverPublicKey","error","length","map","e","type","value","types","schema","name","soliditySHA3","Array","fill","hash","signature","sigParams","fromRpcSig","ecrecover","number","myString"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/eth-sig-util/index.js"],"sourcesContent":["const ethUtil = require('ethereumjs-util')\nconst ethAbi = require('ethereumjs-abi')\n\nmodule.exports = {\n\n  concatSig: function (v, r, s) {\n    const rSig = ethUtil.fromSigned(r)\n    const sSig = ethUtil.fromSigned(s)\n    const vSig = ethUtil.bufferToInt(v)\n    const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64)\n    const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64)\n    const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig))\n    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex')\n  },\n\n  normalize: function (input) {\n    if (!input) return\n\n    if (typeof input === 'number') {\n      const buffer = ethUtil.toBuffer(input)\n      input = ethUtil.bufferToHex(buffer)\n    }\n\n    if (typeof input !== 'string') {\n      var msg = 'eth-sig-util.normalize() requires hex string or integer input.'\n      msg += ' received ' + (typeof input) + ': ' + input\n      throw new Error(msg)\n    }\n\n    return ethUtil.addHexPrefix(input.toLowerCase())\n  },\n\n  personalSign: function (privateKey, msgParams) {\n    var message = ethUtil.toBuffer(msgParams.data)\n    var msgHash = ethUtil.hashPersonalMessage(message)\n    var sig = ethUtil.ecsign(msgHash, privateKey)\n    var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n    return serialized\n  },\n\n  recoverPersonalSignature: function (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    const sender = ethUtil.publicToAddress(publicKey)\n    const senderHex = ethUtil.bufferToHex(sender)\n    return senderHex\n  },\n\n  extractPublicKey: function (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    return '0x' + publicKey.toString('hex')\n  },\n\n  typedSignatureHash: function (typedData) {\n    const hashBuffer = typedSignatureHash(typedData)\n    return ethUtil.bufferToHex(hashBuffer)\n  },\n\n  signTypedData: function (privateKey, msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const sig = ethUtil.ecsign(msgHash, privateKey)\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n  },\n\n  recoverTypedSignature: function (msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const publicKey = recoverPublicKey(msgHash, msgParams.sig)\n    const sender = ethUtil.publicToAddress(publicKey)\n    return ethUtil.bufferToHex(sender)\n  }\n\n}\n\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction typedSignatureHash(typedData) {\n  const error = new Error('Expect argument to be non-empty array')\n  if (typeof typedData !== 'object' || !typedData.length) throw error\n\n  const data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value\n  })\n  const types = typedData.map(function (e) { return e.type })\n  const schema = typedData.map(function (e) {\n    if (!e.name) throw error\n    return e.type + ' ' + e.name\n  })\n\n  return ethAbi.soliditySHA3(\n    ['bytes32', 'bytes32'],\n    [\n      ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),\n      ethAbi.soliditySHA3(types, data)\n    ]\n  )\n}\n\nfunction recoverPublicKey(hash, sig) {\n  const signature = ethUtil.toBuffer(sig)\n  const sigParams = ethUtil.fromRpcSig(signature)\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s)\n}\n\nfunction getPublicKeyFor (msgParams) {\n  const message = ethUtil.toBuffer(msgParams.data)\n  const msgHash = ethUtil.hashPersonalMessage(message)\n  return recoverPublicKey(msgHash, msgParams.sig)\n}\n\n\nfunction padWithZeroes (number, length) {\n  var myString = '' + number\n  while (myString.length < length) {\n    myString = '0' + myString\n  }\n  return myString\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}