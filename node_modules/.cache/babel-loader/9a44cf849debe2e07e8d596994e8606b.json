{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nvar externals_1 = require(\"./externals\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\nvar helpers_1 = require(\"./helpers\");\nvar types_1 = require(\"./types\");\nfunction ecsign(msgHash, privateKey, chainId) {\n  var _a = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey),\n    signature = _a.signature,\n    recovery = _a.recid;\n  var r = Buffer.from(signature.slice(0, 32));\n  var s = Buffer.from(signature.slice(32, 64));\n  if (!chainId || typeof chainId === 'number') {\n    // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n    if (chainId && !Number.isSafeInteger(chainId)) {\n      throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n    var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;\n    return {\n      r: r,\n      s: s,\n      v: v_1\n    };\n  }\n  var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\n  var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);\n  return {\n    r: r,\n    s: s,\n    v: v\n  };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n  var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);\n  if (!chainId) {\n    return vBN.subn(27);\n  }\n  var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\n  return vBN.sub(chainIdBN.muln(2).addn(35));\n}\nfunction isValidSigRecovery(recovery) {\n  var rec = new externals_1.BN(recovery);\n  return rec.eqn(0) || rec.eqn(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\nvar ecrecover = function (msgHash, v, r, s, chainId) {\n  var signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);\n  var recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);\n  return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));\n};\nexports.ecrecover = ecrecover;\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\nvar toRpcSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));\n};\nexports.toRpcSig = toRpcSig;\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * @returns Signature\n */\nvar toCompactSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);\n  var ss = s;\n  if (vn > 28 && vn % 2 === 1 || vn === 1 || vn === 28) {\n    ss = Buffer.from(s);\n    ss[0] |= 0x80;\n  }\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));\n};\nexports.toCompactSig = toCompactSig;\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\nvar fromRpcSig = function (sig) {\n  var buf = (0, bytes_1.toBuffer)(sig);\n  var r;\n  var s;\n  var v;\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = (0, bytes_1.bufferToInt)(buf.slice(64));\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;\n    s[0] &= 0x7f;\n  } else {\n    throw new Error('Invalid signature length');\n  }\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v += 27;\n  }\n  return {\n    v: v,\n    r: r,\n    s: s\n  };\n};\nexports.fromRpcSig = fromRpcSig;\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nvar isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n  if (homesteadOrLater === void 0) {\n    homesteadOrLater = true;\n  }\n  var SECP256K1_N_DIV_2 = new externals_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new externals_1.BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n  var rBN = new externals_1.BN(r);\n  var sBN = new externals_1.BN(s);\n  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n    return false;\n  }\n  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n  return true;\n};\nexports.isValidSignature = isValidSignature;\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nvar hashPersonalMessage = function (message) {\n  (0, helpers_1.assertIsBuffer)(message);\n  var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\".concat(message.length), 'utf-8');\n  return (0, hash_1.keccak)(Buffer.concat([prefix, message]));\n};\nexports.hashPersonalMessage = hashPersonalMessage;","map":{"version":3,"mappings":"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","names":["ecsign","msgHash","privateKey","chainId","signature","recovery","r","Buffer","from","slice","s","Number","isSafeInteger","Error","v_1","v","chainIdBN","types_1","BN","muln","addn","toArrayLike","exports","calculateSigRecovery","vBN","subn","sub","isValidSigRecovery","rec","externals_1","eqn","ecrecover","concat","senderPubKey","toNumber","toRpcSig","toCompactSig","vn","ss","fromRpcSig","sig","buf","length","isValidSignature","homesteadOrLater","SECP256K1_N_DIV_2","SECP256K1_N","rBN","sBN","isZero","gt","cmp","hashPersonalMessage","message","prefix"],"sourceRoot":"","sources":["../src/signature.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}