{"ast":null,"code":"const extend = require('xtend');\nconst createRandomId = require('json-rpc-random-id')();\nmodule.exports = EthQuery;\nfunction EthQuery(provider) {\n  const self = this;\n  self.currentProvider = provider;\n}\n\n//\n// base queries\n//\n\n// default block\nEthQuery.prototype.getBalance = generateFnWithDefaultBlockFor(2, 'eth_getBalance');\nEthQuery.prototype.getCode = generateFnWithDefaultBlockFor(2, 'eth_getCode');\nEthQuery.prototype.getTransactionCount = generateFnWithDefaultBlockFor(2, 'eth_getTransactionCount');\nEthQuery.prototype.getStorageAt = generateFnWithDefaultBlockFor(3, 'eth_getStorageAt');\nEthQuery.prototype.call = generateFnWithDefaultBlockFor(2, 'eth_call');\n// standard\nEthQuery.prototype.protocolVersion = generateFnFor('eth_protocolVersion');\nEthQuery.prototype.syncing = generateFnFor('eth_syncing');\nEthQuery.prototype.coinbase = generateFnFor('eth_coinbase');\nEthQuery.prototype.mining = generateFnFor('eth_mining');\nEthQuery.prototype.hashrate = generateFnFor('eth_hashrate');\nEthQuery.prototype.gasPrice = generateFnFor('eth_gasPrice');\nEthQuery.prototype.accounts = generateFnFor('eth_accounts');\nEthQuery.prototype.blockNumber = generateFnFor('eth_blockNumber');\nEthQuery.prototype.getBlockTransactionCountByHash = generateFnFor('eth_getBlockTransactionCountByHash');\nEthQuery.prototype.getBlockTransactionCountByNumber = generateFnFor('eth_getBlockTransactionCountByNumber');\nEthQuery.prototype.getUncleCountByBlockHash = generateFnFor('eth_getUncleCountByBlockHash');\nEthQuery.prototype.getUncleCountByBlockNumber = generateFnFor('eth_getUncleCountByBlockNumber');\nEthQuery.prototype.sign = generateFnFor('eth_sign');\nEthQuery.prototype.sendTransaction = generateFnFor('eth_sendTransaction');\nEthQuery.prototype.sendRawTransaction = generateFnFor('eth_sendRawTransaction');\nEthQuery.prototype.estimateGas = generateFnFor('eth_estimateGas');\nEthQuery.prototype.getBlockByHash = generateFnFor('eth_getBlockByHash');\nEthQuery.prototype.getBlockByNumber = generateFnFor('eth_getBlockByNumber');\nEthQuery.prototype.getTransactionByHash = generateFnFor('eth_getTransactionByHash');\nEthQuery.prototype.getTransactionByBlockHashAndIndex = generateFnFor('eth_getTransactionByBlockHashAndIndex');\nEthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor('eth_getTransactionByBlockNumberAndIndex');\nEthQuery.prototype.getTransactionReceipt = generateFnFor('eth_getTransactionReceipt');\nEthQuery.prototype.getUncleByBlockHashAndIndex = generateFnFor('eth_getUncleByBlockHashAndIndex');\nEthQuery.prototype.getUncleByBlockNumberAndIndex = generateFnFor('eth_getUncleByBlockNumberAndIndex');\nEthQuery.prototype.getCompilers = generateFnFor('eth_getCompilers');\nEthQuery.prototype.compileLLL = generateFnFor('eth_compileLLL');\nEthQuery.prototype.compileSolidity = generateFnFor('eth_compileSolidity');\nEthQuery.prototype.compileSerpent = generateFnFor('eth_compileSerpent');\nEthQuery.prototype.newFilter = generateFnFor('eth_newFilter');\nEthQuery.prototype.newBlockFilter = generateFnFor('eth_newBlockFilter');\nEthQuery.prototype.newPendingTransactionFilter = generateFnFor('eth_newPendingTransactionFilter');\nEthQuery.prototype.uninstallFilter = generateFnFor('eth_uninstallFilter');\nEthQuery.prototype.getFilterChanges = generateFnFor('eth_getFilterChanges');\nEthQuery.prototype.getFilterLogs = generateFnFor('eth_getFilterLogs');\nEthQuery.prototype.getLogs = generateFnFor('eth_getLogs');\nEthQuery.prototype.getWork = generateFnFor('eth_getWork');\nEthQuery.prototype.submitWork = generateFnFor('eth_submitWork');\nEthQuery.prototype.submitHashrate = generateFnFor('eth_submitHashrate');\n\n// network level\n\nEthQuery.prototype.sendAsync = function (opts, cb) {\n  const self = this;\n  self.currentProvider.sendAsync(createPayload(opts), function (err, response) {\n    if (!err && response.error) err = new Error('EthQuery - RPC Error - ' + response.error.message);\n    if (err) return cb(err);\n    cb(null, response.result);\n  });\n};\n\n// util\n\nfunction generateFnFor(methodName) {\n  return function () {\n    const self = this;\n    var args = [].slice.call(arguments);\n    var cb = args.pop();\n    self.sendAsync({\n      method: methodName,\n      params: args\n    }, cb);\n  };\n}\nfunction generateFnWithDefaultBlockFor(argCount, methodName) {\n  return function () {\n    const self = this;\n    var args = [].slice.call(arguments);\n    var cb = args.pop();\n    // set optional default block param\n    if (args.length < argCount) args.push('latest');\n    self.sendAsync({\n      method: methodName,\n      params: args\n    }, cb);\n  };\n}\nfunction createPayload(data) {\n  return extend({\n    // defaults\n    id: createRandomId(),\n    jsonrpc: '2.0',\n    params: []\n    // user-specified\n  }, data);\n}","map":{"version":3,"names":["extend","require","createRandomId","module","exports","EthQuery","provider","self","currentProvider","prototype","getBalance","generateFnWithDefaultBlockFor","getCode","getTransactionCount","getStorageAt","call","protocolVersion","generateFnFor","syncing","coinbase","mining","hashrate","gasPrice","accounts","blockNumber","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","getUncleCountByBlockHash","getUncleCountByBlockNumber","sign","sendTransaction","sendRawTransaction","estimateGas","getBlockByHash","getBlockByNumber","getTransactionByHash","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","getTransactionReceipt","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","getCompilers","compileLLL","compileSolidity","compileSerpent","newFilter","newBlockFilter","newPendingTransactionFilter","uninstallFilter","getFilterChanges","getFilterLogs","getLogs","getWork","submitWork","submitHashrate","sendAsync","opts","cb","createPayload","err","response","error","Error","message","result","methodName","args","slice","arguments","pop","method","params","argCount","length","push","data","id","jsonrpc"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/eth-query/index.js"],"sourcesContent":["const extend = require('xtend')\nconst createRandomId = require('json-rpc-random-id')()\n\nmodule.exports = EthQuery\n\n\nfunction EthQuery(provider){\n  const self = this\n  self.currentProvider = provider\n}\n\n//\n// base queries\n//\n\n// default block\nEthQuery.prototype.getBalance =                          generateFnWithDefaultBlockFor(2, 'eth_getBalance')\nEthQuery.prototype.getCode =                             generateFnWithDefaultBlockFor(2, 'eth_getCode')\nEthQuery.prototype.getTransactionCount =                 generateFnWithDefaultBlockFor(2, 'eth_getTransactionCount')\nEthQuery.prototype.getStorageAt =                        generateFnWithDefaultBlockFor(3, 'eth_getStorageAt')\nEthQuery.prototype.call =                                generateFnWithDefaultBlockFor(2, 'eth_call')\n// standard\nEthQuery.prototype.protocolVersion =                     generateFnFor('eth_protocolVersion')\nEthQuery.prototype.syncing =                             generateFnFor('eth_syncing')\nEthQuery.prototype.coinbase =                            generateFnFor('eth_coinbase')\nEthQuery.prototype.mining =                              generateFnFor('eth_mining')\nEthQuery.prototype.hashrate =                            generateFnFor('eth_hashrate')\nEthQuery.prototype.gasPrice =                            generateFnFor('eth_gasPrice')\nEthQuery.prototype.accounts =                            generateFnFor('eth_accounts')\nEthQuery.prototype.blockNumber =                         generateFnFor('eth_blockNumber')\nEthQuery.prototype.getBlockTransactionCountByHash =      generateFnFor('eth_getBlockTransactionCountByHash')\nEthQuery.prototype.getBlockTransactionCountByNumber =    generateFnFor('eth_getBlockTransactionCountByNumber')\nEthQuery.prototype.getUncleCountByBlockHash =            generateFnFor('eth_getUncleCountByBlockHash')\nEthQuery.prototype.getUncleCountByBlockNumber =          generateFnFor('eth_getUncleCountByBlockNumber')\nEthQuery.prototype.sign =                                generateFnFor('eth_sign')\nEthQuery.prototype.sendTransaction =                     generateFnFor('eth_sendTransaction')\nEthQuery.prototype.sendRawTransaction =                  generateFnFor('eth_sendRawTransaction')\nEthQuery.prototype.estimateGas =                         generateFnFor('eth_estimateGas')\nEthQuery.prototype.getBlockByHash =                      generateFnFor('eth_getBlockByHash')\nEthQuery.prototype.getBlockByNumber =                    generateFnFor('eth_getBlockByNumber')\nEthQuery.prototype.getTransactionByHash =                generateFnFor('eth_getTransactionByHash')\nEthQuery.prototype.getTransactionByBlockHashAndIndex =   generateFnFor('eth_getTransactionByBlockHashAndIndex')\nEthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor('eth_getTransactionByBlockNumberAndIndex')\nEthQuery.prototype.getTransactionReceipt =               generateFnFor('eth_getTransactionReceipt')\nEthQuery.prototype.getUncleByBlockHashAndIndex =         generateFnFor('eth_getUncleByBlockHashAndIndex')\nEthQuery.prototype.getUncleByBlockNumberAndIndex =       generateFnFor('eth_getUncleByBlockNumberAndIndex')\nEthQuery.prototype.getCompilers =                        generateFnFor('eth_getCompilers')\nEthQuery.prototype.compileLLL =                          generateFnFor('eth_compileLLL')\nEthQuery.prototype.compileSolidity =                     generateFnFor('eth_compileSolidity')\nEthQuery.prototype.compileSerpent =                      generateFnFor('eth_compileSerpent')\nEthQuery.prototype.newFilter =                           generateFnFor('eth_newFilter')\nEthQuery.prototype.newBlockFilter =                      generateFnFor('eth_newBlockFilter')\nEthQuery.prototype.newPendingTransactionFilter =         generateFnFor('eth_newPendingTransactionFilter')\nEthQuery.prototype.uninstallFilter =                     generateFnFor('eth_uninstallFilter')\nEthQuery.prototype.getFilterChanges =                    generateFnFor('eth_getFilterChanges')\nEthQuery.prototype.getFilterLogs =                       generateFnFor('eth_getFilterLogs')\nEthQuery.prototype.getLogs =                             generateFnFor('eth_getLogs')\nEthQuery.prototype.getWork =                             generateFnFor('eth_getWork')\nEthQuery.prototype.submitWork =                          generateFnFor('eth_submitWork')\nEthQuery.prototype.submitHashrate =                      generateFnFor('eth_submitHashrate')\n\n// network level\n\nEthQuery.prototype.sendAsync = function(opts, cb){\n  const self = this\n  self.currentProvider.sendAsync(createPayload(opts), function(err, response){\n    if (!err && response.error) err = new Error('EthQuery - RPC Error - '+response.error.message)\n    if (err) return cb(err)\n    cb(null, response.result)\n  })\n}\n\n// util\n\nfunction generateFnFor(methodName){\n  return function(){\n    const self = this\n    var args = [].slice.call(arguments)\n    var cb = args.pop()\n    self.sendAsync({\n      method: methodName,\n      params: args,\n    }, cb)\n  }\n}\n\nfunction generateFnWithDefaultBlockFor(argCount, methodName){\n  return function(){\n    const self = this\n    var args = [].slice.call(arguments)\n    var cb = args.pop()\n    // set optional default block param\n    if (args.length < argCount) args.push('latest')\n    self.sendAsync({\n      method: methodName,\n      params: args,\n    }, cb)\n  }\n}\n\nfunction createPayload(data){\n  return extend({\n    // defaults\n    id: createRandomId(),\n    jsonrpc: '2.0',\n    params: [],\n    // user-specified\n  }, data)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}