{"ast":null,"code":"'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function (callServer, options) {\n  if (!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n  if (!options) {\n    options = {};\n  }\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function () {\n      return uuid();\n    },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false\n  };\n  this.callServer = callServer;\n};\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function (method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n  if (isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if (typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n    const hasCallback = typeof callback === 'function';\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull\n      });\n    } catch (err) {\n      if (hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if (!hasCallback) {\n      return request;\n    }\n  }\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch (err) {\n    return callback(err);\n  }\n  this.callServer(message, function (err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function (err, responseText, callback) {\n  if (err) {\n    callback(err);\n    return;\n  }\n  if (!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch (err) {\n    return callback(err);\n  }\n  if (callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if (Array.isArray(response)) {\n      // neccesary to split strictly on validity according to spec here\n      const isError = function (res) {\n        return typeof res.error !== 'undefined';\n      };\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    } else {\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    }\n  }\n  callback(null, response);\n};","map":{"version":3,"names":["uuid","require","v4","generateRequest","ClientBrowser","callServer","options","reviver","replacer","generator","version","notificationIdNull","module","exports","prototype","request","method","params","id","callback","self","isBatch","Array","isArray","TypeError","isRaw","undefined","hasCallback","err","message","JSON","stringify","response","_parseResponse","responseText","parse","length","isError","res","error","isNotError","filter","result"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/jayson/lib/client/browser/index.js"],"sourcesContent":["'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}