{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar TRANSACTION_TYPE = 0;\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nvar Transaction = /** @class */function (_super) {\n  __extends(Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  function Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _a;\n    var _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    })) || this;\n    _this.common = _this._validateTxV(_this.v, opts.common);\n    _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n    if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {\n      var msg = _this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n      throw new Error(msg);\n    }\n    _this._validateCannotExceedMaxInteger({\n      gasPrice: _this.gasPrice\n    });\n    if (_this.common.gteHardfork('spuriousDragon')) {\n      if (!_this.isSigned()) {\n        _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        var v = _this.v;\n        var chainIdDoubled = _this.common.chainIdBN().muln(2);\n        // v and chain ID meet EIP-155 conditions\n        if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n          _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n        }\n      }\n    }\n    var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n    if (freeze) {\n      Object.freeze(_this);\n    }\n    return _this;\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n  Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return new Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n  Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var values = ethereumjs_util_1.rlp.decode(serialized);\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n    return this.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link Transaction.fromSerializedTx})\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link Transaction.fromSerializedTx} constructor\n   */\n  Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n  Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n    var _a = __read(values, 9),\n      nonce = _a[0],\n      gasPrice = _a[1],\n      gasLimit = _a[2],\n      to = _a[3],\n      value = _a[4],\n      data = _a[5],\n      v = _a[6],\n      r = _a[7],\n      s = _a[8];\n    (0, ethereumjs_util_1.validateNoLeadingZeroes)({\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      value: value,\n      v: v,\n      r: r,\n      s: s\n    });\n    return new Transaction({\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      v: v,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For legacy txs this is also the correct format to add transactions\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n   * for typed txs).\n   *\n   * For an unsigned tx this method returns the empty Buffer values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n  Transaction.prototype.raw = function () {\n    return [(0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value), this.data, this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]), this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]), this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link Transaction.getMessageToSign}.\n   */\n  Transaction.prototype.serialize = function () {\n    return ethereumjs_util_1.rlp.encode(this.raw());\n  };\n  Transaction.prototype._getMessageToSign = function () {\n    var values = [(0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value), this.data];\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      values.push((0, ethereumjs_util_1.toBuffer)(this.common.chainIdBN()));\n      values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n      values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n    }\n    return values;\n  };\n  Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n    var message = this._getMessageToSign();\n    if (hashMessage) {\n      return (0, ethereumjs_util_1.rlphash)(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  Transaction.prototype.getDataFee = function () {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: _super.prototype.getDataFee.call(this),\n        hardfork: this.common.hardfork()\n      };\n    }\n    return _super.prototype.getDataFee.call(this);\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  Transaction.prototype.getUpfrontCost = function () {\n    return this.gasLimit.mul(this.gasPrice).add(this.value);\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  Transaction.prototype.hash = function () {\n    // In contrast to the tx type transaction implementations the `hash()` function\n    // for the legacy tx does not throw if the tx is not signed.\n    // This has been considered for inclusion but lead to unexpected backwards\n    // compatibility problems (no concrete reference found, needs validation).\n    //\n    // For context see also https://github.com/ethereumjs/ethereumjs-monorepo/pull/1445,\n    // September, 2021 as well as work done before.\n    //\n    // This should be updated along the next major version release by adding:\n    //\n    //if (!this.isSigned()) {\n    //  const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n    //  throw new Error(msg)\n    //}\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = (0, ethereumjs_util_1.rlphash)(this.raw());\n      }\n      return this.cache.hash;\n    }\n    return (0, ethereumjs_util_1.rlphash)(this.raw());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  Transaction.prototype.getMessageToVerifySignature = function () {\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('This transaction is not signed');\n      throw new Error(msg);\n    }\n    var message = this._getMessageToSign();\n    return (0, ethereumjs_util_1.rlphash)(message);\n  };\n  /**\n   * Returns the public key of the sender\n   */\n  Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n    var msgHash = this.getMessageToVerifySignature();\n    // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n      throw new Error(msg);\n    }\n    var _b = this,\n      v = _b.v,\n      r = _b.r,\n      s = _b.s;\n    try {\n      return (0, ethereumjs_util_1.ecrecover)(msgHash, v, (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined);\n    } catch (e) {\n      var msg = this._errorMsg('Invalid Signature');\n      throw new Error(msg);\n    }\n  };\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n  Transaction.prototype._processSignature = function (v, r, s) {\n    var vBN = new ethereumjs_util_1.BN(v);\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      vBN.iadd(this.common.chainIdBN().muln(2).addn(8));\n    }\n    var opts = {\n      common: this.common\n    };\n    return Transaction.fromTxData({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v: vBN,\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n  Transaction.prototype.toJSON = function () {\n    return {\n      nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n      gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),\n      gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, ethereumjs_util_1.bnToHex)(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined\n    };\n  };\n  /**\n   * Validates tx's `v` value\n   */\n  Transaction.prototype._validateTxV = function (v, common) {\n    var chainIdBN;\n    // No unsigned tx and EIP-155 activated and chain ID included\n    if (v !== undefined && !v.eqn(0) && (!common || common.gteHardfork('spuriousDragon')) && !v.eqn(27) && !v.eqn(28)) {\n      if (common) {\n        var chainIdDoubled = common.chainIdBN().muln(2);\n        var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n        if (!isValidEIP155V) {\n          throw new Error(\"Incompatible EIP155-based V \".concat(v, \" and chain id \").concat(common.chainIdBN(), \". See the Common parameter of the Transaction constructor to set the chain id.\"));\n        }\n      } else {\n        // Derive the original chain ID\n        var numSub = void 0;\n        if (v.subn(35).isEven()) {\n          numSub = 35;\n        } else {\n          numSub = 36;\n        }\n        // Use derived chain ID to create a proper Common\n        chainIdBN = v.subn(numSub).divn(2);\n      }\n    }\n    return this._getCommon(common, chainIdBN);\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n  Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n    return this.common.gteHardfork('spuriousDragon');\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n  Transaction.prototype._signedTxImplementsEIP155 = function () {\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('This transaction is not signed');\n      throw new Error(msg);\n    }\n    var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon');\n    // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n    var v = this.v;\n    var chainIdDoubled = this.common.chainIdBN().muln(2);\n    var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n  };\n  /**\n   * Return a compact error string representation of the object\n   */\n  Transaction.prototype.errorStr = function () {\n    var errorStr = this._getSharedErrorPostfix();\n    errorStr += \" gasPrice=\".concat(this.gasPrice);\n    return errorStr;\n  };\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  Transaction.prototype._errorMsg = function (msg) {\n    return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n  };\n  return Transaction;\n}(baseTransaction_1.BaseTransaction);\nexports.default = Transaction;","map":{"version":3,"mappings":"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","names":["TRANSACTION_TYPE","__extends","txData","opts","_super","type","_this","common","_validateTxV","v","gasPrice","ethereumjs_util_1","mul","gasLimit","gt","msg","_errorMsg","Error","_validateCannotExceedMaxInteger","gteHardfork","isSigned","activeCapabilities","push","types_1","EIP155ReplayProtection","chainIdDoubled","chainIdBN","muln","eq","addn","freeze","Object","Transaction","serialized","values","decode","Array","isArray","fromValuesArray","fromSerializedTx","length","nonce","to","value","data","r","s","undefined","buf","Buffer","from","encode","raw","supports","hashMessage","message","_getMessageToSign","cache","dataFee","hardfork","isFrozen","getDataFee","add","hash","msgHash","getMessageToVerifySignature","e","vBN","iadd","fromTxData","toString","eqn","isValidEIP155V","numSub","subn","isEven","divn","_getCommon","onEIP155BlockOrLater","vAndChainIdMeetEIP155Conditions","errorStr","_getSharedErrorPostfix","baseTransaction_1"],"sourceRoot":"","sources":["../src/legacyTransaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}