{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar _1 = require(\".\");\nvar TransactionFactory = /** @class */function () {\n  // It is not possible to instantiate a TransactionFactory object.\n  function TransactionFactory() {}\n  /**\n   * Create a transaction from a `txData` object\n   *\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n   * @param txOptions - Options to pass on to the constructor of the transaction\n   */\n  TransactionFactory.fromTxData = function (txData, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return _1.Transaction.fromTxData(txData, txOptions);\n    } else {\n      var txType = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.type)).toNumber();\n      if (txType === 0) {\n        return _1.Transaction.fromTxData(txData, txOptions);\n      } else if (txType === 1) {\n        return _1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\n      } else if (txType === 2) {\n        return _1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\n      } else {\n        throw new Error(\"Tx instantiation with type \".concat(txType, \" not supported\"));\n      }\n    }\n  };\n  /**\n   * This method tries to decode serialized data.\n   *\n   * @param data - The data Buffer\n   * @param txOptions - The transaction options\n   */\n  TransactionFactory.fromSerializedData = function (data, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      var EIP = void 0;\n      switch (data[0]) {\n        case 1:\n          EIP = 2930;\n          break;\n        case 2:\n          EIP = 1559;\n          break;\n        default:\n          throw new Error(\"TypedTransaction with ID \".concat(data[0], \" unknown\"));\n      }\n      if (EIP === 1559) {\n        return _1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n      } else {\n        // EIP === 2930\n        return _1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n      }\n    } else {\n      return _1.Transaction.fromSerializedTx(data, txOptions);\n    }\n  };\n  /**\n   * When decoding a BlockBody, in the transactions field, a field is either:\n   * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n   * A Buffer[] (Legacy Transaction)\n   * This method returns the right transaction.\n   *\n   * @param data - A Buffer or Buffer[]\n   * @param txOptions - The transaction options\n   */\n  TransactionFactory.fromBlockBodyData = function (data, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n    if (Buffer.isBuffer(data)) {\n      return this.fromSerializedData(data, txOptions);\n    } else if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return _1.Transaction.fromValuesArray(data, txOptions);\n    } else {\n      throw new Error('Cannot decode transaction: unknown type input');\n    }\n  };\n  /**\n   * This helper method allows one to retrieve the class which matches the transactionID\n   * If transactionID is undefined, returns the legacy transaction class.\n   * @deprecated - This method is deprecated and will be removed on the next major release\n   * @param transactionID\n   * @param _common - This option is not used\n   */\n  TransactionFactory.getTransactionClass = function (transactionID, _common) {\n    if (transactionID === void 0) {\n      transactionID = 0;\n    }\n    var legacyTxn = transactionID == 0 || transactionID >= 0x80 && transactionID <= 0xff;\n    if (legacyTxn) {\n      return _1.Transaction;\n    }\n    switch (transactionID) {\n      case 1:\n        return _1.AccessListEIP2930Transaction;\n      case 2:\n        return _1.FeeMarketEIP1559Transaction;\n      default:\n        throw new Error(\"TypedTransaction with ID \".concat(transactionID, \" unknown\"));\n    }\n  };\n  return TransactionFactory;\n}();\nexports.default = TransactionFactory;","map":{"version":3,"mappings":"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","names":["TransactionFactory","txData","txOptions","type","undefined","_1","fromTxData","txType","ethereumjs_util_1","toNumber","Error","data","EIP","fromSerializedTx","Buffer","isBuffer","fromSerializedData","Array","isArray","fromValuesArray","transactionID","_common","legacyTxn"],"sourceRoot":"","sources":["../src/transactionFactory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}