{"ast":null,"code":"const inherits = require('util').inherits;\nconst Transaction = require('ethereumjs-tx');\nconst ethUtil = require('ethereumjs-util');\nconst Subprovider = require('./subprovider.js');\nconst blockTagForPayload = require('../util/rpc-cache-utils').blockTagForPayload;\nmodule.exports = NonceTrackerSubprovider;\n\n// handles the following RPC methods:\n//   eth_getTransactionCount (pending only)\n//\n// observes the following RPC methods:\n//   eth_sendRawTransaction\n//   evm_revert (to clear the nonce cache)\n\ninherits(NonceTrackerSubprovider, Subprovider);\nfunction NonceTrackerSubprovider(opts) {\n  const self = this;\n  self.nonceCache = {};\n}\nNonceTrackerSubprovider.prototype.handleRequest = function (payload, next, end) {\n  const self = this;\n  switch (payload.method) {\n    case 'eth_getTransactionCount':\n      var blockTag = blockTagForPayload(payload);\n      var address = payload.params[0].toLowerCase();\n      var cachedResult = self.nonceCache[address];\n      // only handle requests against the 'pending' blockTag\n      if (blockTag === 'pending') {\n        // has a result\n        if (cachedResult) {\n          end(null, cachedResult);\n          // fallthrough then populate cache\n        } else {\n          next(function (err, result, cb) {\n            if (err) return cb();\n            if (self.nonceCache[address] === undefined) {\n              self.nonceCache[address] = result;\n            }\n            cb();\n          });\n        }\n      } else {\n        next();\n      }\n      return;\n    case 'eth_sendRawTransaction':\n      // allow the request to continue normally\n      next(function (err, result, cb) {\n        // only update local nonce if tx was submitted correctly\n        if (err) return cb();\n        // parse raw tx\n        var rawTx = payload.params[0];\n        var stripped = ethUtil.stripHexPrefix(rawTx);\n        var rawData = Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex');\n        var tx = new Transaction(Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex'));\n        // extract address\n        var address = '0x' + tx.getSenderAddress().toString('hex').toLowerCase();\n        // extract nonce and increment\n        var nonce = ethUtil.bufferToInt(tx.nonce);\n        nonce++;\n        // hexify and normalize\n        var hexNonce = nonce.toString(16);\n        if (hexNonce.length % 2) hexNonce = '0' + hexNonce;\n        hexNonce = '0x' + hexNonce;\n        // dont update our record on the nonce until the submit was successful\n        // update cache\n        self.nonceCache[address] = hexNonce;\n        cb();\n      });\n      return;\n\n    // Clear cache on a testrpc revert\n    case 'evm_revert':\n      self.nonceCache = {};\n      next();\n      return;\n    default:\n      next();\n      return;\n  }\n};","map":{"version":3,"names":["inherits","require","Transaction","ethUtil","Subprovider","blockTagForPayload","module","exports","NonceTrackerSubprovider","opts","self","nonceCache","prototype","handleRequest","payload","next","end","method","blockTag","address","params","toLowerCase","cachedResult","err","result","cb","undefined","rawTx","stripped","stripHexPrefix","rawData","Buffer","from","tx","getSenderAddress","toString","nonce","bufferToInt","hexNonce","length"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/web3-provider-engine/subproviders/nonce-tracker.js"],"sourcesContent":["const inherits = require('util').inherits\nconst Transaction = require('ethereumjs-tx')\nconst ethUtil = require('ethereumjs-util')\nconst Subprovider = require('./subprovider.js')\nconst blockTagForPayload = require('../util/rpc-cache-utils').blockTagForPayload\n\nmodule.exports = NonceTrackerSubprovider\n\n// handles the following RPC methods:\n//   eth_getTransactionCount (pending only)\n//\n// observes the following RPC methods:\n//   eth_sendRawTransaction\n//   evm_revert (to clear the nonce cache)\n\ninherits(NonceTrackerSubprovider, Subprovider)\n\nfunction NonceTrackerSubprovider(opts){\n  const self = this\n\n  self.nonceCache = {}\n}\n\nNonceTrackerSubprovider.prototype.handleRequest = function(payload, next, end){\n  const self = this\n\n  switch(payload.method) {\n\n    case 'eth_getTransactionCount':\n      var blockTag = blockTagForPayload(payload)\n      var address = payload.params[0].toLowerCase()\n      var cachedResult = self.nonceCache[address]\n      // only handle requests against the 'pending' blockTag\n      if (blockTag === 'pending') {\n        // has a result\n        if (cachedResult) {\n          end(null, cachedResult)\n        // fallthrough then populate cache\n        } else {\n          next(function(err, result, cb){\n            if (err) return cb()\n            if (self.nonceCache[address] === undefined) {\n              self.nonceCache[address] = result\n            }\n            cb()\n          })\n        }\n      } else {\n        next()\n      }\n      return\n\n    case 'eth_sendRawTransaction':\n      // allow the request to continue normally\n      next(function(err, result, cb){\n        // only update local nonce if tx was submitted correctly\n        if (err) return cb()\n        // parse raw tx\n        var rawTx = payload.params[0]\n        var stripped = ethUtil.stripHexPrefix(rawTx)\n        var rawData = Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex')\n        var tx = new Transaction(Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex'))\n        // extract address\n        var address = '0x'+tx.getSenderAddress().toString('hex').toLowerCase()\n        // extract nonce and increment\n        var nonce = ethUtil.bufferToInt(tx.nonce)\n        nonce++\n        // hexify and normalize\n        var hexNonce = nonce.toString(16)\n        if (hexNonce.length%2) hexNonce = '0'+hexNonce\n        hexNonce = '0x'+hexNonce\n        // dont update our record on the nonce until the submit was successful\n        // update cache\n        self.nonceCache[address] = hexNonce\n        cb()\n      })\n      return\n\n   // Clear cache on a testrpc revert\n   case 'evm_revert':\n      self.nonceCache = {}\n      next()\n      return\n\n    default:\n      next()\n      return\n\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}