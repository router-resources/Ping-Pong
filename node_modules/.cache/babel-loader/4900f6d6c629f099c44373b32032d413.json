{"ast":null,"code":"import OpenLogin, { OPENLOGIN_NETWORK, UX_MODE, getHashQueryParams } from '@toruslabs/openlogin';\nimport { getChainConfig, BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, CHAIN_NAMESPACES, WalletInitializationError, ADAPTER_EVENTS, WalletLoginError } from '@web3auth/base';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport log from 'loglevel';\nconst getOpenloginDefaultOptions = (chainNamespace, chainId) => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : undefined,\n    loginSettings: {\n      relogin: true\n    }\n  };\n};\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass OpenloginAdapter extends BaseAdapter {\n  constructor(params) {\n    var _params$chainConfig, _params$chainConfig2, _params$chainConfig3;\n    super();\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.OPENLOGIN);\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.MULTICHAIN);\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.IN_APP);\n    _defineProperty(this, \"openloginInstance\", null);\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n    _defineProperty(this, \"openloginOptions\", void 0);\n    _defineProperty(this, \"loginSettings\", {});\n    _defineProperty(this, \"privKeyProvider\", null);\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);\n    this.openloginOptions = _objectSpread(_objectSpread({\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET\n    }, defaultOptions.adapterSettings), params.adapterSettings || {});\n    this.loginSettings = _objectSpread(_objectSpread({}, defaultOptions.loginSettings), params.loginSettings); // if no chainNamespace is passed then chain config should be set before calling init\n\n    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {\n      var _params$chainConfig4;\n      this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n      if (!this.chainConfig.rpcTarget) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n  get chainConfigProxy() {\n    return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n  }\n  get provider() {\n    var _this$privKeyProvider;\n    return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;\n  }\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n  async init(options) {\n    var _this$openloginOption;\n    super.checkInitializationRequirements();\n    if (!((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.clientId)) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    const redirectResult = getHashQueryParams();\n    let isRedirectResult = true;\n    if (Object.keys(redirectResult).length > 0 && redirectResult.result) {\n      isRedirectResult = true;\n    }\n    await this.openloginInstance.init();\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n    try {\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n  async connect(params) {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {\n      adapter: WALLET_ADAPTERS.OPENLOGIN\n    }));\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error) {\n      log.error(\"Failed to connect with openlogin provider\", error); // ready again to be connected\n\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error !== null && error !== void 0 && error.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  } // should be called only before initialization.\n\n  setAdapterSettings(adapterSettings) {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions || {}), adapterSettings);\n  } // should be called only before initialization.\n\n  setChainConfig(customChainConfig) {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n  async connectWithProvider(params) {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const {\n        SolanaPrivateKeyProvider\n      } = await import('@web3auth/solana-provider');\n      this.privKeyProvider = new SolanaPrivateKeyProvider({\n        config: {\n          chainConfig: this.chainConfig\n        }\n      });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const {\n        EthereumPrivateKeyProvider\n      } = await import('@web3auth/ethereum-provider');\n      this.privKeyProvider = new EthereumPrivateKeyProvider({\n        config: {\n          chainConfig: this.chainConfig\n        }\n      });\n    } else {\n      throw new Error(\"Invalid chainNamespace: \".concat(this.currentChainNamespace, \" found while connecting to wallet\"));\n    } // if not logged in then login\n\n    if (!this.openloginInstance.privKey && params) {\n      await this.openloginInstance.login(merge(this.loginSettings, {\n        loginProvider: params.loginProvider\n      }, {\n        extraLoginOptions: {\n          login_hint: params === null || params === void 0 ? void 0 : params.login_hint\n        }\n      }));\n    }\n    let finalPrivKey = this.openloginInstance.privKey;\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const {\n          getED25519Key\n        } = await import('@toruslabs/openlogin-ed25519');\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.OPENLOGIN,\n        reconnected: !params\n      });\n    }\n  }\n}\nexport { OpenloginAdapter, getOpenloginDefaultOptions };","map":{"version":3,"mappings":"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","names":["getOpenloginDefaultOptions","chainNamespace","chainId","adapterSettings","network","OPENLOGIN_NETWORK","MAINNET","clientId","uxMode","UX_MODE","POPUP","chainConfig","getChainConfig","undefined","loginSettings","relogin","OpenloginAdapter","BaseAdapter","constructor","params","WALLET_ADAPTERS","OPENLOGIN","ADAPTER_NAMESPACES","MULTICHAIN","ADAPTER_CATEGORY","IN_APP","ADAPTER_STATUS","NOT_READY","CHAIN_NAMESPACES","EIP155","log","debug","defaultOptions","_params$chainConfig","_params$chainConfig2","openloginOptions","_params$chainConfig3","currentChainNamespace","_params$chainConfig4","defaultChainIdConfig","rpcTarget","WalletInitializationError","invalidParams","chainConfigProxy","provider","privKeyProvider","_","Error","init","options","checkInitializationRequirements","_this$openloginOption","openloginInstance","OpenLogin","redirectResult","getHashQueryParams","isRedirectResult","Object","keys","length","result","status","READY","emit","ADAPTER_EVENTS","privKey","autoConnect","connect","error","checkConnectionRequirements","CONNECTING","adapter","connectWithProvider","ERRORED","message","includes","WalletLoginError","popupClosed","connectionError","disconnect","cleanup","CONNECTED","notConnectedError","notReady","logout","DISCONNECTED","getUserInfo","userInfo","setAdapterSettings","setChainConfig","customChainConfig","SOLANA","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","login","merge","loginProvider","extraLoginOptions","login_hint","finalPrivKey","getED25519Key","sk","toString","setupProvider","reconnected"],"sources":["../src/config.ts","../src/openloginAdapter.ts"],"sourcesContent":[null,null]},"metadata":{},"sourceType":"module"}