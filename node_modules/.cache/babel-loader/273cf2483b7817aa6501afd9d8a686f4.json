{"ast":null,"code":"\"use strict\";\n\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport class TupleCoder extends Coder {\n  constructor(coders, localName) {\n    let dynamic = false;\n    const types = [];\n    coders.forEach(coder => {\n      if (coder.dynamic) {\n        dynamic = true;\n      }\n      types.push(coder.type);\n    });\n    const type = \"tuple(\" + types.join(\",\") + \")\";\n    super(\"tuple\", type, localName, dynamic);\n    this.coders = coders;\n  }\n  encode(writer, value) {\n    return pack(writer, this.coders, value);\n  }\n  decode(reader) {\n    return reader.coerce(this.name, unpack(reader, this.coders));\n  }\n}","map":{"version":3,"mappings":"AAAA,YAAY;;AAEZ,SAASA,KAAK,QAAwB,kBAAkB;AACxD,SAASC,IAAI,EAAEC,MAAM,QAAQ,SAAS;AAEtC,OAAM,MAAOC,UAAW,SAAQH,KAAK;EAGjCI,YAAYC,MAAoB,EAAEC,SAAiB;IAC/C,IAAIC,OAAO,GAAG,KAAK;IACnB,MAAMC,KAAK,GAAkB,EAAE;IAC/BH,MAAM,CAACI,OAAO,CAAEC,KAAK,IAAI;MACrB,IAAIA,KAAK,CAACH,OAAO,EAAE;QAAEA,OAAO,GAAG,IAAI;;MACnCC,KAAK,CAACG,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;IAC1B,CAAC,CAAC;IACF,MAAMA,IAAI,GAAI,QAAQ,GAAGJ,KAAK,CAACK,IAAI,CAAC,GAAG,CAAC,GAAG,GAAI;IAE/C,KAAK,CAAC,OAAO,EAAED,IAAI,EAAEN,SAAS,EAAEC,OAAO,CAAC;IACxC,IAAI,CAACF,MAAM,GAAGA,MAAM;EACxB;EAEAS,MAAM,CAACC,MAAc,EAAEC,KAA6C;IAChE,OAAOf,IAAI,CAACc,MAAM,EAAE,IAAI,CAACV,MAAM,EAAEW,KAAK,CAAC;EAC3C;EAEAC,MAAM,CAACC,MAAc;IACjB,OAAOA,MAAM,CAACC,MAAM,CAAC,IAAI,CAACC,IAAI,EAAElB,MAAM,CAACgB,MAAM,EAAE,IAAI,CAACb,MAAM,CAAC,CAAC;EAChE","names":["Coder","pack","unpack","TupleCoder","constructor","coders","localName","dynamic","types","forEach","coder","push","type","join","encode","writer","value","decode","reader","coerce","name"],"sourceRoot":"","sources":["../../src.ts/coders/tuple.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}