{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow-weak\n */\n\nvar _require = require('uuid'),\n  uuidv4 = _require.v4;\nvar registered = false;\n/**\n * Provides utility functions for working with Anonymously logged-in users. <br />\n * Anonymous users have some unique characteristics:\n * <ul>\n *  <li>Anonymous users don't need a user name or password.</li>\n *  <ul>\n *    <li>Once logged out, an anonymous user cannot be recovered.</li>\n *  </ul>\n *  <li>signUp converts an anonymous user to a standard user with the given username and password.</li>\n *  <ul>\n *    <li>Data associated with the anonymous user is retained.</li>\n *  </ul>\n *  <li>logIn switches users without converting the anonymous user.</li>\n *  <ul>\n *    <li>Data associated with the anonymous user will be lost.</li>\n *  </ul>\n *  <li>Service logIn (e.g. Facebook, Twitter) will attempt to convert\n *  the anonymous user into a standard user by linking it to the service.</li>\n *  <ul>\n *    <li>If a user already exists that is linked to the service, it will instead switch to the existing user.</li>\n *  </ul>\n *  <li>Service linking (e.g. Facebook, Twitter) will convert the anonymous user\n *  into a standard user by linking it to the service.</li>\n * </ul>\n *\n * @class Parse.AnonymousUtils\n * @static\n */\n\nvar AnonymousUtils = {\n  /**\n   * Gets whether the user has their account linked to anonymous user.\n   *\n   * @function isLinked\n   * @name Parse.AnonymousUtils.isLinked\n   * @param {Parse.User} user User to check for.\n   *     The user must be logged in on this device.\n   * @returns {boolean} <code>true</code> if the user has their account\n   *     linked to an anonymous user.\n   * @static\n   */\n  isLinked: function (user\n  /*: ParseUser*/) {\n    var provider = this._getAuthProvider();\n    return user._isLinked(provider.getAuthType());\n  },\n  /**\n   * Logs in a user Anonymously.\n   *\n   * @function logIn\n   * @name Parse.AnonymousUtils.logIn\n   * @param {object} options MasterKey / SessionToken.\n   * @returns {Promise} Logged in user\n   * @static\n   */\n  logIn: function (options\n  /*:: ?: RequestOptions*/) /*: Promise<ParseUser>*/\n  {\n    var provider = this._getAuthProvider();\n    return _ParseUser.default.logInWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n  /**\n   * Links Anonymous User to an existing PFUser.\n   *\n   * @function link\n   * @name Parse.AnonymousUtils.link\n   * @param {Parse.User} user User to link. This must be the current user.\n   * @param {object} options MasterKey / SessionToken.\n   * @returns {Promise} Linked with User\n   * @static\n   */\n  link: function (user\n  /*: ParseUser*/, options\n  /*:: ?: RequestOptions*/) /*: Promise<ParseUser>*/\n  {\n    var provider = this._getAuthProvider();\n    return user.linkWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n  _getAuthProvider: function () {\n    var provider = {\n      restoreAuthentication: function () {\n        return true;\n      },\n      getAuthType: function () {\n        return 'anonymous';\n      },\n      getAuthData: function () {\n        return {\n          authData: {\n            id: uuidv4()\n          }\n        };\n      }\n    };\n    if (!registered) {\n      _ParseUser.default._registerAuthenticationProvider(provider);\n      registered = true;\n    }\n    return provider;\n  }\n};\nvar _default = AnonymousUtils;\nexports.default = _default;","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_ParseUser","_require","uuidv4","v4","registered","AnonymousUtils","isLinked","user","provider","_getAuthProvider","_isLinked","getAuthType","logIn","options","logInWith","getAuthData","link","linkWith","restoreAuthentication","authData","id","_registerAuthenticationProvider","_default"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/moralis/lib/browser/AnonymousUtils.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow-weak\n */\n\n\nvar _require = require('uuid'),\n    uuidv4 = _require.v4;\n\nvar registered = false;\n/**\n * Provides utility functions for working with Anonymously logged-in users. <br />\n * Anonymous users have some unique characteristics:\n * <ul>\n *  <li>Anonymous users don't need a user name or password.</li>\n *  <ul>\n *    <li>Once logged out, an anonymous user cannot be recovered.</li>\n *  </ul>\n *  <li>signUp converts an anonymous user to a standard user with the given username and password.</li>\n *  <ul>\n *    <li>Data associated with the anonymous user is retained.</li>\n *  </ul>\n *  <li>logIn switches users without converting the anonymous user.</li>\n *  <ul>\n *    <li>Data associated with the anonymous user will be lost.</li>\n *  </ul>\n *  <li>Service logIn (e.g. Facebook, Twitter) will attempt to convert\n *  the anonymous user into a standard user by linking it to the service.</li>\n *  <ul>\n *    <li>If a user already exists that is linked to the service, it will instead switch to the existing user.</li>\n *  </ul>\n *  <li>Service linking (e.g. Facebook, Twitter) will convert the anonymous user\n *  into a standard user by linking it to the service.</li>\n * </ul>\n *\n * @class Parse.AnonymousUtils\n * @static\n */\n\nvar AnonymousUtils = {\n  /**\n   * Gets whether the user has their account linked to anonymous user.\n   *\n   * @function isLinked\n   * @name Parse.AnonymousUtils.isLinked\n   * @param {Parse.User} user User to check for.\n   *     The user must be logged in on this device.\n   * @returns {boolean} <code>true</code> if the user has their account\n   *     linked to an anonymous user.\n   * @static\n   */\n  isLinked: function (user\n  /*: ParseUser*/\n  ) {\n    var provider = this._getAuthProvider();\n\n    return user._isLinked(provider.getAuthType());\n  },\n\n  /**\n   * Logs in a user Anonymously.\n   *\n   * @function logIn\n   * @name Parse.AnonymousUtils.logIn\n   * @param {object} options MasterKey / SessionToken.\n   * @returns {Promise} Logged in user\n   * @static\n   */\n  logIn: function (options\n  /*:: ?: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var provider = this._getAuthProvider();\n\n    return _ParseUser.default.logInWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n\n  /**\n   * Links Anonymous User to an existing PFUser.\n   *\n   * @function link\n   * @name Parse.AnonymousUtils.link\n   * @param {Parse.User} user User to link. This must be the current user.\n   * @param {object} options MasterKey / SessionToken.\n   * @returns {Promise} Linked with User\n   * @static\n   */\n  link: function (user\n  /*: ParseUser*/\n  , options\n  /*:: ?: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var provider = this._getAuthProvider();\n\n    return user.linkWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n  _getAuthProvider: function () {\n    var provider = {\n      restoreAuthentication: function () {\n        return true;\n      },\n      getAuthType: function () {\n        return 'anonymous';\n      },\n      getAuthData: function () {\n        return {\n          authData: {\n            id: uuidv4()\n          }\n        };\n      }\n    };\n\n    if (!registered) {\n      _ParseUser.default._registerAuthenticationProvider(provider);\n\n      registered = true;\n    }\n\n    return provider;\n  }\n};\nvar _default = AnonymousUtils;\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8DAA8D,CAAC;AAEpG,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,sDAAsD,CAAC;AAE5FD,sBAAsB,CAACG,OAAO,EAAE,YAAY,EAAE;EAC5CC,KAAK,EAAE;AACT,CAAC,CAAC;AAEFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AAExB,IAAIC,UAAU,GAAGJ,sBAAsB,CAACD,OAAO,CAAC,aAAa,CAAC,CAAC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAIM,QAAQ,GAAGN,OAAO,CAAC,MAAM,CAAC;EAC1BO,MAAM,GAAGD,QAAQ,CAACE,EAAE;AAExB,IAAIC,UAAU,GAAG,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,cAAc,GAAG;EACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAE,UAAUC;EACpB,iBACE;IACA,IAAIC,QAAQ,GAAG,IAAI,CAACC,gBAAgB,EAAE;IAEtC,OAAOF,IAAI,CAACG,SAAS,CAACF,QAAQ,CAACG,WAAW,EAAE,CAAC;EAC/C,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,KAAK,EAAE,UAAUC;EACjB,0BAEA;EACA;IACE,IAAIL,QAAQ,GAAG,IAAI,CAACC,gBAAgB,EAAE;IAEtC,OAAOT,UAAU,CAACD,OAAO,CAACe,SAAS,CAACN,QAAQ,CAACG,WAAW,EAAE,EAAEH,QAAQ,CAACO,WAAW,EAAE,EAAEF,OAAO,CAAC;EAC9F,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,IAAI,EAAE,UAAUT;EAChB,iBACEM;EACF,0BAEA;EACA;IACE,IAAIL,QAAQ,GAAG,IAAI,CAACC,gBAAgB,EAAE;IAEtC,OAAOF,IAAI,CAACU,QAAQ,CAACT,QAAQ,CAACG,WAAW,EAAE,EAAEH,QAAQ,CAACO,WAAW,EAAE,EAAEF,OAAO,CAAC;EAC/E,CAAC;EACDJ,gBAAgB,EAAE,YAAY;IAC5B,IAAID,QAAQ,GAAG;MACbU,qBAAqB,EAAE,YAAY;QACjC,OAAO,IAAI;MACb,CAAC;MACDP,WAAW,EAAE,YAAY;QACvB,OAAO,WAAW;MACpB,CAAC;MACDI,WAAW,EAAE,YAAY;QACvB,OAAO;UACLI,QAAQ,EAAE;YACRC,EAAE,EAAElB,MAAM;UACZ;QACF,CAAC;MACH;IACF,CAAC;IAED,IAAI,CAACE,UAAU,EAAE;MACfJ,UAAU,CAACD,OAAO,CAACsB,+BAA+B,CAACb,QAAQ,CAAC;MAE5DJ,UAAU,GAAG,IAAI;IACnB;IAEA,OAAOI,QAAQ;EACjB;AACF,CAAC;AACD,IAAIc,QAAQ,GAAGjB,cAAc;AAC7BR,OAAO,CAACE,OAAO,GAAGuB,QAAQ"},"metadata":{},"sourceType":"script"}