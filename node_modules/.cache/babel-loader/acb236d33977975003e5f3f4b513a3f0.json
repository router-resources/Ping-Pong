{"ast":null,"code":"'use strict';\n\nvar isHexPrefixed = require('is-hex-prefixed');\nvar stripHexPrefix = require('strip-hex-prefix');\n\n/**\n * Pads a `String` to have an even length\n * @param {String} value\n * @return {String} output\n */\nfunction padToEven(value) {\n  var a = value; // eslint-disable-line\n\n  if (typeof a !== 'string') {\n    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');\n  }\n  if (a.length % 2) {\n    a = '0' + a;\n  }\n  return a;\n}\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nfunction intToHex(i) {\n  var hex = i.toString(16); // eslint-disable-line\n\n  return '0x' + hex;\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nfunction intToBuffer(i) {\n  var hex = intToHex(i);\n  return new Buffer(padToEven(hex.slice(2)), 'hex');\n}\n\n/**\n * Get the binary size of a string\n * @param {String} str\n * @return {Number}\n */\nfunction getBinarySize(str) {\n  if (typeof str !== 'string') {\n    throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \\'str\\' to be type String, got \\'' + typeof str + '\\'.');\n  }\n  return Buffer.byteLength(str, 'utf8');\n}\n\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param {array} superset\n * @param {array} subset\n *\n * @returns {boolean}\n */\nfunction arrayContainsArray(superset, subset, some) {\n  if (Array.isArray(superset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'superset\\' to be an array got type \\'' + typeof superset + '\\'');\n  }\n  if (Array.isArray(subset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'subset\\' to be an array got type \\'' + typeof subset + '\\'');\n  }\n  return subset[Boolean(some) && 'some' || 'every'](function (value) {\n    return superset.indexOf(value) >= 0;\n  });\n}\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toUtf8(hex) {\n  var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');\n  return bufferValue.toString('utf8');\n}\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toAscii(hex) {\n  var str = ''; // eslint-disable-line\n  var i = 0,\n    l = hex.length; // eslint-disable-line\n\n  if (hex.substring(0, 2) === '0x') {\n    i = 2;\n  }\n  for (; i < l; i += 2) {\n    var code = parseInt(hex.substr(i, 2), 16);\n    str += String.fromCharCode(code);\n  }\n  return str;\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromUtf8(stringValue) {\n  var str = new Buffer(stringValue, 'utf8');\n  return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromAscii(stringValue) {\n  var hex = ''; // eslint-disable-line\n  for (var i = 0; i < stringValue.length; i++) {\n    // eslint-disable-line\n    var code = stringValue.charCodeAt(i);\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n;\n  }\n  return '0x' + hex;\n}\n\n/**\n * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]\n *\n * @method getKeys get specific key from inner object array of objects\n * @param {String} params\n * @param {String} key\n * @param {Boolean} allowEmpty\n * @returns {Array} output just a simple array of output keys\n */\nfunction getKeys(params, key, allowEmpty) {\n  if (!Array.isArray(params)) {\n    throw new Error('[ethjs-util] method getKeys expecting type Array as \\'params\\' input, got \\'' + typeof params + '\\'');\n  }\n  if (typeof key !== 'string') {\n    throw new Error('[ethjs-util] method getKeys expecting type String for input \\'key\\' got \\'' + typeof key + '\\'.');\n  }\n  var result = []; // eslint-disable-line\n\n  for (var i = 0; i < params.length; i++) {\n    // eslint-disable-line\n    var value = params[i][key]; // eslint-disable-line\n    if (allowEmpty && !value) {\n      value = '';\n    } else if (typeof value !== 'string') {\n      throw new Error('invalid abi');\n    }\n    result.push(value);\n  }\n  return result;\n}\n\n/**\n * Is the string a hex string.\n *\n * @method check if string is hex string of specific length\n * @param {String} value\n * @param {Number} length\n * @returns {Boolean} output the string is a hex string\n */\nfunction isHexString(value, length) {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n  return true;\n}\nmodule.exports = {\n  arrayContainsArray: arrayContainsArray,\n  intToBuffer: intToBuffer,\n  getBinarySize: getBinarySize,\n  isHexPrefixed: isHexPrefixed,\n  stripHexPrefix: stripHexPrefix,\n  padToEven: padToEven,\n  intToHex: intToHex,\n  fromAscii: fromAscii,\n  fromUtf8: fromUtf8,\n  toAscii: toAscii,\n  toUtf8: toUtf8,\n  getKeys: getKeys,\n  isHexString: isHexString\n};","map":{"version":3,"names":["isHexPrefixed","require","stripHexPrefix","padToEven","value","a","Error","length","intToHex","i","hex","toString","intToBuffer","Buffer","slice","getBinarySize","str","byteLength","arrayContainsArray","superset","subset","some","Array","isArray","Boolean","indexOf","toUtf8","bufferValue","replace","toAscii","l","substring","code","parseInt","substr","String","fromCharCode","fromUtf8","stringValue","fromAscii","charCodeAt","n","getKeys","params","key","allowEmpty","result","push","isHexString","match","module","exports"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/ethjs-util/lib/index.js"],"sourcesContent":["'use strict';\n\nvar isHexPrefixed = require('is-hex-prefixed');\nvar stripHexPrefix = require('strip-hex-prefix');\n\n/**\n * Pads a `String` to have an even length\n * @param {String} value\n * @return {String} output\n */\nfunction padToEven(value) {\n  var a = value; // eslint-disable-line\n\n  if (typeof a !== 'string') {\n    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');\n  }\n\n  if (a.length % 2) {\n    a = '0' + a;\n  }\n\n  return a;\n}\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nfunction intToHex(i) {\n  var hex = i.toString(16); // eslint-disable-line\n\n  return '0x' + hex;\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nfunction intToBuffer(i) {\n  var hex = intToHex(i);\n\n  return new Buffer(padToEven(hex.slice(2)), 'hex');\n}\n\n/**\n * Get the binary size of a string\n * @param {String} str\n * @return {Number}\n */\nfunction getBinarySize(str) {\n  if (typeof str !== 'string') {\n    throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \\'str\\' to be type String, got \\'' + typeof str + '\\'.');\n  }\n\n  return Buffer.byteLength(str, 'utf8');\n}\n\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param {array} superset\n * @param {array} subset\n *\n * @returns {boolean}\n */\nfunction arrayContainsArray(superset, subset, some) {\n  if (Array.isArray(superset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'superset\\' to be an array got type \\'' + typeof superset + '\\'');\n  }\n  if (Array.isArray(subset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'subset\\' to be an array got type \\'' + typeof subset + '\\'');\n  }\n\n  return subset[Boolean(some) && 'some' || 'every'](function (value) {\n    return superset.indexOf(value) >= 0;\n  });\n}\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toUtf8(hex) {\n  var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');\n\n  return bufferValue.toString('utf8');\n}\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toAscii(hex) {\n  var str = ''; // eslint-disable-line\n  var i = 0,\n      l = hex.length; // eslint-disable-line\n\n  if (hex.substring(0, 2) === '0x') {\n    i = 2;\n  }\n\n  for (; i < l; i += 2) {\n    var code = parseInt(hex.substr(i, 2), 16);\n    str += String.fromCharCode(code);\n  }\n\n  return str;\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromUtf8(stringValue) {\n  var str = new Buffer(stringValue, 'utf8');\n\n  return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromAscii(stringValue) {\n  var hex = ''; // eslint-disable-line\n  for (var i = 0; i < stringValue.length; i++) {\n    // eslint-disable-line\n    var code = stringValue.charCodeAt(i);\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n;\n  }\n\n  return '0x' + hex;\n}\n\n/**\n * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]\n *\n * @method getKeys get specific key from inner object array of objects\n * @param {String} params\n * @param {String} key\n * @param {Boolean} allowEmpty\n * @returns {Array} output just a simple array of output keys\n */\nfunction getKeys(params, key, allowEmpty) {\n  if (!Array.isArray(params)) {\n    throw new Error('[ethjs-util] method getKeys expecting type Array as \\'params\\' input, got \\'' + typeof params + '\\'');\n  }\n  if (typeof key !== 'string') {\n    throw new Error('[ethjs-util] method getKeys expecting type String for input \\'key\\' got \\'' + typeof key + '\\'.');\n  }\n\n  var result = []; // eslint-disable-line\n\n  for (var i = 0; i < params.length; i++) {\n    // eslint-disable-line\n    var value = params[i][key]; // eslint-disable-line\n    if (allowEmpty && !value) {\n      value = '';\n    } else if (typeof value !== 'string') {\n      throw new Error('invalid abi');\n    }\n    result.push(value);\n  }\n\n  return result;\n}\n\n/**\n * Is the string a hex string.\n *\n * @method check if string is hex string of specific length\n * @param {String} value\n * @param {Number} length\n * @returns {Boolean} output the string is a hex string\n */\nfunction isHexString(value, length) {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = {\n  arrayContainsArray: arrayContainsArray,\n  intToBuffer: intToBuffer,\n  getBinarySize: getBinarySize,\n  isHexPrefixed: isHexPrefixed,\n  stripHexPrefix: stripHexPrefix,\n  padToEven: padToEven,\n  intToHex: intToHex,\n  fromAscii: fromAscii,\n  fromUtf8: fromUtf8,\n  toAscii: toAscii,\n  toUtf8: toUtf8,\n  getKeys: getKeys,\n  isHexString: isHexString\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}