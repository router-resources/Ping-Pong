{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Creates a new Polygon with any of the following forms:<br>\n *   <pre>\n *   new Polygon([[0,0],[0,1],[1,1],[1,0]])\n *   new Polygon([GeoPoint, GeoPoint, GeoPoint])\n *   </pre>\n *\n * <p>Represents a coordinates that may be associated\n * with a key in a ParseObject or used as a reference point for geo queries.\n * This allows proximity-based queries on the key.</p>\n *\n * <p>Example:<pre>\n *   var polygon = new Parse.Polygon([[0,0],[0,1],[1,1],[1,0]]);\n *   var object = new Parse.Object(\"PlaceObject\");\n *   object.set(\"area\", polygon);\n *   object.save();</pre></p>\n *\n * @alias Parse.Polygon\n */\n\nvar ParsePolygon = /*#__PURE__*/function () {\n  /**\n   * @param {(number[][] | Parse.GeoPoint[])} coordinates An Array of coordinate pairs\n   */\n  function ParsePolygon(coordinates\n  /*: Array<Array<number>> | Array<ParseGeoPoint>*/) {\n    (0, _classCallCheck2.default)(this, ParsePolygon);\n    (0, _defineProperty2.default)(this, \"_coordinates\", void 0);\n    this._coordinates = ParsePolygon._validate(coordinates);\n  }\n  /**\n   * Coordinates value for this Polygon.\n   * Throws an exception if not valid type.\n   *\n   * @property {(number[][] | Parse.GeoPoint[])} coordinates list of coordinates\n   * @returns {number[][]}\n   */\n\n  (0, _createClass2.default)(ParsePolygon, [{\n    key: \"coordinates\",\n    get: function () /*: Array<Array<number>>*/\n    {\n      return this._coordinates;\n    },\n    set: function (coords\n    /*: Array<Array<number>> | Array<ParseGeoPoint>*/) {\n      this._coordinates = ParsePolygon._validate(coords);\n    }\n    /**\n     * Returns a JSON representation of the Polygon, suitable for Parse.\n     *\n     * @returns {object}\n     */\n  }, {\n    key: \"toJSON\",\n    value: function () /*: { __type: string, coordinates: Array<Array<number>> }*/\n    {\n      ParsePolygon._validate(this._coordinates);\n      return {\n        __type: 'Polygon',\n        coordinates: this._coordinates\n      };\n    }\n    /**\n     * Checks if two polygons are equal\n     *\n     * @param {(Parse.Polygon | object)} other\n     * @returns {boolean}\n     */\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/) /*: boolean*/\n    {\n      if (!(other instanceof ParsePolygon) || this.coordinates.length !== other.coordinates.length) {\n        return false;\n      }\n      var isEqual = true;\n      for (var i = 1; i < this._coordinates.length; i += 1) {\n        if (this._coordinates[i][0] !== other.coordinates[i][0] || this._coordinates[i][1] !== other.coordinates[i][1]) {\n          isEqual = false;\n          break;\n        }\n      }\n      return isEqual;\n    }\n    /**\n     *\n     * @param {Parse.GeoPoint} point\n     * @returns {boolean} Returns if the point is contained in the polygon\n     */\n  }, {\n    key: \"containsPoint\",\n    value: function (point\n    /*: ParseGeoPoint*/) /*: boolean*/\n    {\n      var minX = this._coordinates[0][0];\n      var maxX = this._coordinates[0][0];\n      var minY = this._coordinates[0][1];\n      var maxY = this._coordinates[0][1];\n      for (var i = 1; i < this._coordinates.length; i += 1) {\n        var p = this._coordinates[i];\n        minX = Math.min(p[0], minX);\n        maxX = Math.max(p[0], maxX);\n        minY = Math.min(p[1], minY);\n        maxY = Math.max(p[1], maxY);\n      }\n      var outside = point.latitude < minX || point.latitude > maxX || point.longitude < minY || point.longitude > maxY;\n      if (outside) {\n        return false;\n      }\n      var inside = false;\n      for (var _i = 0, j = this._coordinates.length - 1; _i < this._coordinates.length; j = _i++) {\n        var startX = this._coordinates[_i][0];\n        var startY = this._coordinates[_i][1];\n        var endX = this._coordinates[j][0];\n        var endY = this._coordinates[j][1];\n        var intersect = startY > point.longitude !== endY > point.longitude && point.latitude < (endX - startX) * (point.longitude - startY) / (endY - startY) + startX;\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n      return inside;\n    }\n    /**\n     * Validates that the list of coordinates can form a valid polygon\n     *\n     * @param {Array} coords the list of coordinates to validate as a polygon\n     * @throws {TypeError}\n     * @returns {number[][]} Array of coordinates if validated.\n     */\n  }], [{\n    key: \"_validate\",\n    value: function (coords\n    /*: Array<Array<number>> | Array<ParseGeoPoint>*/) /*: Array<Array<number>>*/\n    {\n      if (!(0, _isArray.default)(coords)) {\n        throw new TypeError('Coordinates must be an Array');\n      }\n      if (coords.length < 3) {\n        throw new TypeError('Polygon must have at least 3 GeoPoints or Points');\n      }\n      var points = [];\n      for (var i = 0; i < coords.length; i += 1) {\n        var coord = coords[i];\n        var geoPoint = void 0;\n        if (coord instanceof _ParseGeoPoint.default) {\n          geoPoint = coord;\n        } else if ((0, _isArray.default)(coord) && coord.length === 2) {\n          geoPoint = new _ParseGeoPoint.default(coord[0], coord[1]);\n        } else {\n          throw new TypeError('Coordinates must be an Array of GeoPoints or Points');\n        }\n        points.push([geoPoint.latitude, geoPoint.longitude]);\n      }\n      return points;\n    }\n  }]);\n  return ParsePolygon;\n}();\nvar _default = ParsePolygon;\nexports.default = _default;","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_isArray","_classCallCheck2","_createClass2","_defineProperty2","_ParseGeoPoint","ParsePolygon","coordinates","_coordinates","_validate","key","get","set","coords","__type","other","length","isEqual","i","point","minX","maxX","minY","maxY","p","Math","min","max","outside","latitude","longitude","inside","_i","j","startX","startY","endX","endY","intersect","TypeError","points","coord","geoPoint","push","_default"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/moralis/lib/browser/ParsePolygon.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Creates a new Polygon with any of the following forms:<br>\n *   <pre>\n *   new Polygon([[0,0],[0,1],[1,1],[1,0]])\n *   new Polygon([GeoPoint, GeoPoint, GeoPoint])\n *   </pre>\n *\n * <p>Represents a coordinates that may be associated\n * with a key in a ParseObject or used as a reference point for geo queries.\n * This allows proximity-based queries on the key.</p>\n *\n * <p>Example:<pre>\n *   var polygon = new Parse.Polygon([[0,0],[0,1],[1,1],[1,0]]);\n *   var object = new Parse.Object(\"PlaceObject\");\n *   object.set(\"area\", polygon);\n *   object.save();</pre></p>\n *\n * @alias Parse.Polygon\n */\n\n\nvar ParsePolygon = /*#__PURE__*/function () {\n  /**\n   * @param {(number[][] | Parse.GeoPoint[])} coordinates An Array of coordinate pairs\n   */\n  function ParsePolygon(coordinates\n  /*: Array<Array<number>> | Array<ParseGeoPoint>*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParsePolygon);\n    (0, _defineProperty2.default)(this, \"_coordinates\", void 0);\n    this._coordinates = ParsePolygon._validate(coordinates);\n  }\n  /**\n   * Coordinates value for this Polygon.\n   * Throws an exception if not valid type.\n   *\n   * @property {(number[][] | Parse.GeoPoint[])} coordinates list of coordinates\n   * @returns {number[][]}\n   */\n\n\n  (0, _createClass2.default)(ParsePolygon, [{\n    key: \"coordinates\",\n    get: function ()\n    /*: Array<Array<number>>*/\n    {\n      return this._coordinates;\n    },\n    set: function (coords\n    /*: Array<Array<number>> | Array<ParseGeoPoint>*/\n    ) {\n      this._coordinates = ParsePolygon._validate(coords);\n    }\n    /**\n     * Returns a JSON representation of the Polygon, suitable for Parse.\n     *\n     * @returns {object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { __type: string, coordinates: Array<Array<number>> }*/\n    {\n      ParsePolygon._validate(this._coordinates);\n\n      return {\n        __type: 'Polygon',\n        coordinates: this._coordinates\n      };\n    }\n    /**\n     * Checks if two polygons are equal\n     *\n     * @param {(Parse.Polygon | object)} other\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (!(other instanceof ParsePolygon) || this.coordinates.length !== other.coordinates.length) {\n        return false;\n      }\n\n      var isEqual = true;\n\n      for (var i = 1; i < this._coordinates.length; i += 1) {\n        if (this._coordinates[i][0] !== other.coordinates[i][0] || this._coordinates[i][1] !== other.coordinates[i][1]) {\n          isEqual = false;\n          break;\n        }\n      }\n\n      return isEqual;\n    }\n    /**\n     *\n     * @param {Parse.GeoPoint} point\n     * @returns {boolean} Returns if the point is contained in the polygon\n     */\n\n  }, {\n    key: \"containsPoint\",\n    value: function (point\n    /*: ParseGeoPoint*/\n    )\n    /*: boolean*/\n    {\n      var minX = this._coordinates[0][0];\n      var maxX = this._coordinates[0][0];\n      var minY = this._coordinates[0][1];\n      var maxY = this._coordinates[0][1];\n\n      for (var i = 1; i < this._coordinates.length; i += 1) {\n        var p = this._coordinates[i];\n        minX = Math.min(p[0], minX);\n        maxX = Math.max(p[0], maxX);\n        minY = Math.min(p[1], minY);\n        maxY = Math.max(p[1], maxY);\n      }\n\n      var outside = point.latitude < minX || point.latitude > maxX || point.longitude < minY || point.longitude > maxY;\n\n      if (outside) {\n        return false;\n      }\n\n      var inside = false;\n\n      for (var _i = 0, j = this._coordinates.length - 1; _i < this._coordinates.length; j = _i++) {\n        var startX = this._coordinates[_i][0];\n        var startY = this._coordinates[_i][1];\n        var endX = this._coordinates[j][0];\n        var endY = this._coordinates[j][1];\n        var intersect = startY > point.longitude !== endY > point.longitude && point.latitude < (endX - startX) * (point.longitude - startY) / (endY - startY) + startX;\n\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n\n      return inside;\n    }\n    /**\n     * Validates that the list of coordinates can form a valid polygon\n     *\n     * @param {Array} coords the list of coordinates to validate as a polygon\n     * @throws {TypeError}\n     * @returns {number[][]} Array of coordinates if validated.\n     */\n\n  }], [{\n    key: \"_validate\",\n    value: function (coords\n    /*: Array<Array<number>> | Array<ParseGeoPoint>*/\n    )\n    /*: Array<Array<number>>*/\n    {\n      if (!(0, _isArray.default)(coords)) {\n        throw new TypeError('Coordinates must be an Array');\n      }\n\n      if (coords.length < 3) {\n        throw new TypeError('Polygon must have at least 3 GeoPoints or Points');\n      }\n\n      var points = [];\n\n      for (var i = 0; i < coords.length; i += 1) {\n        var coord = coords[i];\n        var geoPoint = void 0;\n\n        if (coord instanceof _ParseGeoPoint.default) {\n          geoPoint = coord;\n        } else if ((0, _isArray.default)(coord) && coord.length === 2) {\n          geoPoint = new _ParseGeoPoint.default(coord[0], coord[1]);\n        } else {\n          throw new TypeError('Coordinates must be an Array of GeoPoints or Points');\n        }\n\n        points.push([geoPoint.latitude, geoPoint.longitude]);\n      }\n\n      return points;\n    }\n  }]);\n  return ParsePolygon;\n}();\n\nvar _default = ParsePolygon;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}