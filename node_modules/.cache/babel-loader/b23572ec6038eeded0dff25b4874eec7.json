{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/toConsumableArray\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\nvar _map2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\nvar _filter2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\nvar _keys2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\nvar _sort = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/sort\"));\nvar _splice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/splice\"));\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\nvar _entries = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/entries\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _encode = _interopRequireDefault(require(\"./encode\"));\nvar _promiseUtils = require(\"./promiseUtils\");\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\nvar _OfflineQuery = _interopRequireDefault(require(\"./OfflineQuery\"));\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Converts a string into a regex that matches it.\n * Surrounding with \\Q .. \\E does this, we just need to escape any \\E's in\n * the text separately.\n *\n * @param s\n * @private\n * @returns {string}\n */\n\nfunction quote(s\n/*: string*/) /*: string*/\n{\n  return \"\\\\Q\".concat(s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q'), \"\\\\E\");\n}\n/**\n * Extracts the class name from queries. If not all queries have the same\n * class name an error will be thrown.\n *\n * @param queries\n * @private\n * @returns {string}\n */\n\nfunction _getClassNameFromQueries(queries\n/*: Array<ParseQuery>*/) /*: ?string*/\n{\n  var className = null;\n  (0, _forEach.default)(queries).call(queries, function (q) {\n    if (!className) {\n      // eslint-disable-next-line prefer-destructuring\n      className = q.className;\n    }\n    if (className !== q.className) {\n      throw new Error('All queries must be for the same class.');\n    }\n  });\n  return className;\n}\n/*\n * Handles pre-populating the result data of a query with select fields,\n * making sure that the data object contains keys for all objects that have\n * been requested with a select, so that our cached state updates correctly.\n */\n\nfunction handleSelectResult(data\n/*: any*/, select\n/*: Array<string>*/) {\n  var serverDataMask = {};\n  (0, _forEach.default)(select).call(select, function (field) {\n    var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, '.') !== -1;\n    if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {\n      // this field was selected, but is missing from the retrieved data\n      data[field] = undefined;\n    } else if (hasSubObjectSelect) {\n      // this field references a sub-object,\n      // so we need to walk down the path components\n      var pathComponents = field.split('.');\n      var _obj = data;\n      var serverMask = serverDataMask;\n      (0, _forEach.default)(pathComponents).call(pathComponents, function (component, index, arr) {\n        // add keys if the expected data is missing\n        if (_obj && !_obj.hasOwnProperty(component)) {\n          _obj[component] = undefined;\n        }\n        if (_obj && (0, _typeof2.default)(_obj) === 'object') {\n          _obj = _obj[component];\n        } // add this path component to the server mask so we can fill it in later if needed\n\n        if (index < arr.length - 1) {\n          if (!serverMask[component]) {\n            serverMask[component] = {};\n          }\n          serverMask = serverMask[component];\n        }\n      });\n    }\n  });\n  if ((0, _keys.default)(serverDataMask).length > 0) {\n    // When selecting from sub-objects, we don't want to blow away the missing\n    // information that we may have retrieved before. We've already added any\n    // missing selected keys to sub-objects, but we still need to add in the\n    // data for any previously retrieved sub-objects that were not selected.\n    var serverData = _CoreManager.default.getObjectStateController().getServerData({\n      id: data.objectId,\n      className: data.className\n    });\n    copyMissingDataWithMask(serverData, data, serverDataMask, false);\n  }\n}\nfunction copyMissingDataWithMask(src, dest, mask, copyThisLevel) {\n  // copy missing elements at this level\n  if (copyThisLevel) {\n    for (var _key in src) {\n      if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {\n        dest[_key] = src[_key];\n      }\n    }\n  }\n  for (var _key2 in mask) {\n    if (dest[_key2] !== undefined && dest[_key2] !== null && src !== undefined && src !== null) {\n      // traverse into objects as needed\n      copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);\n    }\n  }\n}\nfunction handleOfflineSort(a, b, sorts) {\n  var order = sorts[0];\n  var operator = (0, _slice.default)(order).call(order, 0, 1);\n  var isDescending = operator === '-';\n  if (isDescending) {\n    order = order.substring(1);\n  }\n  if (order === '_created_at') {\n    order = 'createdAt';\n  }\n  if (order === '_updated_at') {\n    order = 'updatedAt';\n  }\n  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === 'password') {\n    throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, \"Invalid Key: \".concat(order));\n  }\n  var field1 = a.get(order);\n  var field2 = b.get(order);\n  if (field1 < field2) {\n    return isDescending ? 1 : -1;\n  }\n  if (field1 > field2) {\n    return isDescending ? -1 : 1;\n  }\n  if (sorts.length > 1) {\n    var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);\n    return handleOfflineSort(a, b, remainingSorts);\n  }\n  return 0;\n}\n/**\n * Creates a new parse Parse.Query for the given Parse.Object subclass.\n *\n * <p>Parse.Query defines a query that is used to fetch Parse.Objects. The\n * most common use case is finding all objects that match a query through the\n * <code>find</code> method. for example, this sample code fetches all objects\n * of class <code>myclass</code>. it calls a different function depending on\n * whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.find().then((results) => {\n *   // results is an array of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to retrieve a single object whose id is\n * known, through the get method. for example, this sample code fetches an\n * object of class <code>myclass</code> and id <code>myid</code>. it calls a\n * different function depending on whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.get(myid).then((object) => {\n *     // object is an instance of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to count the number of objects that match\n * the query without retrieving all of those objects. for example, this\n * sample code counts the number of objects of the class <code>myclass</code>\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.count().then((number) => {\n *     // there are number instances of myclass.\n * }).catch((error) => {\n *     // error is an instance of Parse.Error.\n * });</pre></p>\n *\n * @alias Parse.Query\n */\n\nvar ParseQuery = /*#__PURE__*/function () {\n  /**\n   * @property {string} className\n   */\n\n  /**\n   * @param {(string | Parse.Object)} objectClass An instance of a subclass of Parse.Object, or a Parse className string.\n   */\n  function ParseQuery(objectClass\n  /*: string | ParseObject*/) {\n    (0, _classCallCheck2.default)(this, ParseQuery);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    (0, _defineProperty2.default)(this, \"_where\", void 0);\n    (0, _defineProperty2.default)(this, \"_include\", void 0);\n    (0, _defineProperty2.default)(this, \"_exclude\", void 0);\n    (0, _defineProperty2.default)(this, \"_select\", void 0);\n    (0, _defineProperty2.default)(this, \"_limit\", void 0);\n    (0, _defineProperty2.default)(this, \"_skip\", void 0);\n    (0, _defineProperty2.default)(this, \"_count\", void 0);\n    (0, _defineProperty2.default)(this, \"_order\", void 0);\n    (0, _defineProperty2.default)(this, \"_readPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_includeReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_subqueryReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_queriesLocalDatastore\", void 0);\n    (0, _defineProperty2.default)(this, \"_localDatastorePinName\", void 0);\n    (0, _defineProperty2.default)(this, \"_extraOptions\", void 0);\n    (0, _defineProperty2.default)(this, \"_hint\", void 0);\n    (0, _defineProperty2.default)(this, \"_explain\", void 0);\n    (0, _defineProperty2.default)(this, \"_xhrRequest\", void 0);\n    if (typeof objectClass === 'string') {\n      if (objectClass === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        this.className = '_User';\n      } else {\n        this.className = objectClass;\n      }\n    } else if (objectClass instanceof _ParseObject.default) {\n      this.className = objectClass.className;\n    } else if (typeof objectClass === 'function') {\n      if (typeof objectClass.className === 'string') {\n        this.className = objectClass.className;\n      } else {\n        var _obj2 = new objectClass();\n        this.className = _obj2.className;\n      }\n    } else {\n      throw new TypeError('A ParseQuery must be constructed with a ParseObject or class name.');\n    }\n    this._where = {};\n    this._include = [];\n    this._exclude = [];\n    this._count = false; // negative limit is not sent in the server request\n\n    this._limit = -1;\n    this._skip = 0;\n    this._readPreference = null;\n    this._includeReadPreference = null;\n    this._subqueryReadPreference = null;\n    this._queriesLocalDatastore = false;\n    this._localDatastorePinName = null;\n    this._extraOptions = {};\n    this._xhrRequest = {\n      task: null,\n      onchange: function () {}\n    };\n  }\n  /**\n   * Adds constraint that at least one of the passed in queries matches.\n   *\n   * @param {Array} queries\n   * @returns {Parse.Query} Returns the query, so you can chain this call.\n   */\n\n  (0, _createClass2.default)(ParseQuery, [{\n    key: \"_orQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/) /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$or = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that all of the passed in queries match.\n     *\n     * @param {Array} queries\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"_andQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/) /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$and = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that none of the passed in queries match.\n     *\n     * @param {Array} queries\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"_norQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/) /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$nor = queryJSON;\n      return this;\n    }\n    /**\n     * Helper for condition queries\n     *\n     * @param key\n     * @param condition\n     * @param value\n     * @returns {Parse.Query}\n     */\n  }, {\n    key: \"_addCondition\",\n    value: function (key\n    /*: string*/, condition\n    /*: string*/, value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      if (!this._where[key] || typeof this._where[key] === 'string') {\n        this._where[key] = {};\n      }\n      this._where[key][condition] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Converts string for regular expression at the beginning\n     *\n     * @param string\n     * @returns {string}\n     */\n  }, {\n    key: \"_regexStartWith\",\n    value: function (string\n    /*: string*/) /*: string*/\n    {\n      return \"^\".concat(quote(string));\n    }\n  }, {\n    key: \"_handleOfflineQuery\",\n    value: function () {\n      var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(params\n      /*: any*/) {\n        var _context,\n          _this2 = this;\n        var localDatastore, objects, results, keys, alwaysSelectedKeys, sorts, count, limit;\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _OfflineQuery.default.validateQuery(this);\n                localDatastore = _CoreManager.default.getLocalDatastore();\n                _context3.next = 4;\n                return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);\n              case 4:\n                objects = _context3.sent;\n                results = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function (json, index, arr) {\n                  var object = _ParseObject.default.fromJSON(json, false);\n                  if (json._localId && !json.objectId) {\n                    object._localId = json._localId;\n                  }\n                  if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {\n                    return null;\n                  }\n                  return object;\n                })).call(_context, function (object) {\n                  return object !== null;\n                });\n                if ((0, _keys2.default)(params)) {\n                  keys = (0, _keys2.default)(params).split(',');\n                  alwaysSelectedKeys = ['className', 'objectId', 'createdAt', 'updatedAt', 'ACL'];\n                  keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);\n                  results = (0, _map2.default)(results).call(results, function (object) {\n                    var _context2;\n                    var json = object._toFullJSON();\n                    (0, _forEach.default)(_context2 = (0, _keys.default)(json)).call(_context2, function (key) {\n                      if (!(0, _includes.default)(keys).call(keys, key)) {\n                        delete json[key];\n                      }\n                    });\n                    return _ParseObject.default.fromJSON(json, false);\n                  });\n                }\n                if (params.order) {\n                  sorts = params.order.split(',');\n                  (0, _sort.default)(results).call(results, function (a, b) {\n                    return handleOfflineSort(a, b, sorts);\n                  });\n                } // count total before applying limit/skip\n\n                if (params.count) {\n                  // total count from response\n                  count = results.length;\n                }\n                if (params.skip) {\n                  if (params.skip >= results.length) {\n                    results = [];\n                  } else {\n                    results = (0, _splice.default)(results).call(results, params.skip, results.length);\n                  }\n                }\n                limit = results.length;\n                if (params.limit !== 0 && params.limit < results.length) {\n                  // eslint-disable-next-line prefer-destructuring\n                  limit = params.limit;\n                }\n                results = (0, _splice.default)(results).call(results, 0, limit);\n                if (!(typeof count === 'number')) {\n                  _context3.next = 15;\n                  break;\n                }\n                return _context3.abrupt(\"return\", {\n                  results: results,\n                  count: count\n                });\n              case 15:\n                return _context3.abrupt(\"return\", results);\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      return function () {\n        return _handleOfflineQuery2.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns a JSON representation of this query.\n     *\n     * @returns {object} The JSON representation of the query.\n     */\n  }, {\n    key: \"toJSON\",\n    value: function () /*: QueryJSON*/\n    {\n      var params\n      /*: QueryJSON*/ = {\n        where: this._where\n      };\n      if (this._include.length) {\n        params.include = this._include.join(',');\n      }\n      if (this._exclude.length) {\n        params.excludeKeys = this._exclude.join(',');\n      }\n      if (this._select) {\n        params.keys = this._select.join(',');\n      }\n      if (this._count) {\n        params.count = 1;\n      }\n      if (this._limit >= 0) {\n        params.limit = this._limit;\n      }\n      if (this._skip > 0) {\n        params.skip = this._skip;\n      }\n      if (this._order) {\n        params.order = this._order.join(',');\n      }\n      if (this._readPreference) {\n        params.readPreference = this._readPreference;\n      }\n      if (this._includeReadPreference) {\n        params.includeReadPreference = this._includeReadPreference;\n      }\n      if (this._subqueryReadPreference) {\n        params.subqueryReadPreference = this._subqueryReadPreference;\n      }\n      if (this._hint) {\n        params.hint = this._hint;\n      }\n      if (this._explain) {\n        params.explain = true;\n      }\n      for (var _key3 in this._extraOptions) {\n        params[_key3] = this._extraOptions[_key3];\n      }\n      return params;\n    }\n    /**\n     * Return a query with conditions from json, can be useful to send query from server side to client\n     * Not static, all query conditions was set before calling this method will be deleted.\n     * For example on the server side we have\n     * var query = new Parse.Query(\"className\");\n     * query.equalTo(key: value);\n     * query.limit(100);\n     * ... (others queries)\n     * Create JSON representation of Query Object\n     * var jsonFromServer = query.fromJSON();\n     *\n     * On client side getting query:\n     * var query = new Parse.Query(\"className\");\n     * query.fromJSON(jsonFromServer);\n     *\n     * and continue to query...\n     * query.skip(100).find().then(...);\n     *\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"withJSON\",\n    value: function (json\n    /*: QueryJSON*/) /*: ParseQuery*/\n    {\n      if (json.where) {\n        this._where = json.where;\n      }\n      if (json.include) {\n        this._include = json.include.split(',');\n      }\n      if ((0, _keys2.default)(json)) {\n        this._select = (0, _keys2.default)(json).split(',');\n      }\n      if (json.excludeKeys) {\n        this._exclude = json.excludeKeys.split(',');\n      }\n      if (json.count) {\n        this._count = json.count === 1;\n      }\n      if (json.limit) {\n        this._limit = json.limit;\n      }\n      if (json.skip) {\n        this._skip = json.skip;\n      }\n      if (json.order) {\n        this._order = json.order.split(',');\n      }\n      if (json.readPreference) {\n        this._readPreference = json.readPreference;\n      }\n      if (json.includeReadPreference) {\n        this._includeReadPreference = json.includeReadPreference;\n      }\n      if (json.subqueryReadPreference) {\n        this._subqueryReadPreference = json.subqueryReadPreference;\n      }\n      if (json.hint) {\n        this._hint = json.hint;\n      }\n      if (json.explain) {\n        this._explain = !!json.explain;\n      }\n      for (var _key4 in json) {\n        if (json.hasOwnProperty(_key4)) {\n          var _context4;\n          if ((0, _indexOf.default)(_context4 = ['where', 'include', 'keys', 'count', 'limit', 'skip', 'order', 'readPreference', 'includeReadPreference', 'subqueryReadPreference', 'hint', 'explain']).call(_context4, _key4) === -1) {\n            this._extraOptions[_key4] = json[_key4];\n          }\n        }\n      }\n      return this;\n    }\n    /**\n     * Static method to restore Parse.Query by json representation\n     * Internally calling Parse.Query.withJSON\n     *\n     * @param {string} className\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\n     * @returns {Parse.Query} new created query\n     */\n  }, {\n    key: \"get\",\n    value:\n    /**\n     * Constructs a Parse.Object whose id is already known by fetching data from\n     * the server. Unlike the <code>first</code> method, it never returns undefined.\n     *\n     * @param {string} objectId The id of the object to be fetched.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n    function (objectId\n    /*: string*/, options\n    /*:: ?: FullOptions*/) /*: Promise<ParseObject>*/\n    {\n      this.equalTo('objectId', objectId);\n      var firstOptions = {};\n      if (options && options.hasOwnProperty('useMasterKey')) {\n        firstOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options && options.hasOwnProperty('sessionToken')) {\n        firstOptions.sessionToken = options.sessionToken;\n      }\n      if (options && options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        firstOptions.context = options.context;\n      }\n      return this.first(firstOptions).then(function (response) {\n        if (response) {\n          return response;\n        }\n        var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'Object not found.');\n        return _promise.default.reject(errorObject);\n      });\n    }\n    /**\n     * Retrieves a list of ParseObjects that satisfy this query.\n     *\n     * @param {object} options Valid options\n     * are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the results when\n     * the query completes.\n     */\n  }, {\n    key: \"find\",\n    value: function (options\n    /*:: ?: FullOptions*/) /*: Promise<Array<ParseObject>>*/\n    {\n      var _this3 = this;\n      options = options || {};\n      var findOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n      this._setRequestTask(findOptions);\n      var controller = _CoreManager.default.getQueryController();\n      var select = this._select;\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(this.toJSON());\n      }\n      return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function (response) {\n        var _context5; // Return generic object when explain is used\n\n        if (_this3._explain) {\n          return response.results;\n        }\n        var results = (0, _map2.default)(_context5 = response.results).call(_context5, function (data) {\n          // In cases of relations, the server may send back a className\n          // on the top level of the payload\n          var override = response.className || _this3.className;\n          if (!data.className) {\n            data.className = override;\n          } // Make sure the data object contains keys for all objects that\n          // have been requested with a select, so that our cached state\n          // updates correctly.\n\n          if (select) {\n            handleSelectResult(data, select);\n          }\n          return _ParseObject.default.fromJSON(data, !select);\n        });\n        var count = response.count;\n        if (typeof count === 'number') {\n          return {\n            results: results,\n            count: count\n          };\n        }\n        return results;\n      });\n    }\n    /**\n     * Retrieves a complete list of ParseObjects that satisfy this query.\n     * Using `eachBatch` under the hood to fetch all the valid objects.\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that is resolved with the results when\n     * the query completes.\n     */\n  }, {\n    key: \"findAll\",\n    value: function () {\n      var _findAll = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options\n      /*:: ?: BatchOptions*/) {\n        var result;\n        return _regenerator.default.wrap(function (_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                result\n                /*: ParseObject[]*/ = [];\n                _context7.next = 3;\n                return this.eachBatch(function (objects\n                /*: ParseObject[]*/) {\n                  var _context6;\n                  result = (0, _concat.default)(_context6 = []).call(_context6, (0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(objects));\n                }, options);\n              case 3:\n                return _context7.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      return function () {\n        return _findAll.apply(this, arguments);\n      };\n    }()\n    /**\n     * Counts the number of objects that match this query.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the count when\n     * the query completes.\n     */\n  }, {\n    key: \"count\",\n    value: function (options\n    /*:: ?: FullOptions*/) /*: Promise<number>*/\n    {\n      options = options || {};\n      var findOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n      this._setRequestTask(findOptions);\n      var controller = _CoreManager.default.getQueryController();\n      var params = this.toJSON();\n      params.limit = 0;\n      params.count = 1;\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (result) {\n        return result.count;\n      });\n    }\n    /**\n     * Executes a distinct query and returns unique values\n     *\n     * @param {string} key A field to find distinct values\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the query completes.\n     */\n  }, {\n    key: \"distinct\",\n    value: function (key\n    /*: string*/, options\n    /*:: ?: FullOptions*/) /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var distinctOptions = {};\n      distinctOptions.useMasterKey = true;\n      if (options.hasOwnProperty('sessionToken')) {\n        distinctOptions.sessionToken = options.sessionToken;\n      }\n      this._setRequestTask(distinctOptions);\n      var controller = _CoreManager.default.getQueryController();\n      var params = {\n        distinct: key,\n        where: this._where,\n        hint: this._hint\n      };\n      return controller.aggregate(this.className, params, distinctOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Executes an aggregate query and returns aggregate results\n     *\n     * @param {(Array|object)} pipeline Array or Object of stages to process query\n     * @param {object} options Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the query completes.\n     */\n  }, {\n    key: \"aggregate\",\n    value: function (pipeline\n    /*: mixed*/, options\n    /*:: ?: FullOptions*/) /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var aggregateOptions = {};\n      aggregateOptions.useMasterKey = true;\n      if (options.hasOwnProperty('sessionToken')) {\n        aggregateOptions.sessionToken = options.sessionToken;\n      }\n      this._setRequestTask(aggregateOptions);\n      var controller = _CoreManager.default.getQueryController();\n      if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== 'object') {\n        throw new Error('Invalid pipeline must be Array or Object');\n      }\n      if ((0, _keys.default)(this._where || {}).length) {\n        if (!(0, _isArray.default)(pipeline)) {\n          pipeline = [pipeline];\n        }\n        pipeline.unshift({\n          match: this._where\n        });\n      }\n      var params = {\n        pipeline: pipeline,\n        hint: this._hint,\n        explain: this._explain,\n        readPreference: this._readPreference\n      };\n      return controller.aggregate(this.className, params, aggregateOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Retrieves at most one Parse.Object that satisfies this query.\n     *\n     * Returns the object if there is one, otherwise undefined.\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the object when\n     * the query completes.\n     */\n  }, {\n    key: \"first\",\n    value: function (options\n    /*:: ?: FullOptions*/) /*: Promise<ParseObject | void>*/\n    {\n      var _this4 = this;\n      options = options || {};\n      var findOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n      this._setRequestTask(findOptions);\n      var controller = _CoreManager.default.getQueryController();\n      var params = this.toJSON();\n      params.limit = 1;\n      var select = this._select;\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(params).then(function (objects) {\n          if (!objects[0]) {\n            return undefined;\n          }\n          return objects[0];\n        });\n      }\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (response) {\n        var objects = response.results;\n        if (!objects[0]) {\n          return undefined;\n        }\n        if (!objects[0].className) {\n          objects[0].className = _this4.className;\n        } // Make sure the data object contains keys for all objects that\n        // have been requested with a select, so that our cached state\n        // updates correctly.\n\n        if (select) {\n          handleSelectResult(objects[0], select);\n        }\n        return _ParseObject.default.fromJSON(objects[0], !select);\n      });\n    }\n    /**\n     * Iterates over objects matching a query, calling a callback for each batch.\n     * If the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are processed\n     * in an unspecified order. The query may not have any sort order, and may\n     * not use limit or skip.\n     *\n     * @param {Function} callback Callback that will be called with each result\n     *     of the query.\n     * @param {object} options Valid options are:<ul>\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n  }, {\n    key: \"eachBatch\",\n    value: function (callback\n    /*: (objs: Array<ParseObject>) => Promise<*>*/, options\n    /*:: ?: BatchOptions*/) /*: Promise<void>*/\n    {\n      var _context8;\n      options = options || {};\n      if (this._order || this._skip || this._limit >= 0) {\n        return _promise.default.reject('Cannot iterate on a query with sort, skip, or limit.');\n      }\n      var query = new ParseQuery(this.className);\n      query._limit = options.batchSize || 100;\n      query._include = (0, _map2.default)(_context8 = this._include).call(_context8, function (i) {\n        return i;\n      });\n      if (this._select) {\n        var _context9;\n        query._select = (0, _map2.default)(_context9 = this._select).call(_context9, function (s) {\n          return s;\n        });\n      }\n      query._hint = this._hint;\n      query._where = {};\n      for (var _attr in this._where) {\n        var val = this._where[_attr];\n        if ((0, _isArray.default)(val)) {\n          query._where[_attr] = (0, _map2.default)(val).call(val, function (v) {\n            return v;\n          });\n        } else if (val && (0, _typeof2.default)(val) === 'object') {\n          var conditionMap = {};\n          query._where[_attr] = conditionMap;\n          for (var cond in val) {\n            conditionMap[cond] = val[cond];\n          }\n        } else {\n          query._where[_attr] = val;\n        }\n      }\n      query.ascending('objectId');\n      var findOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n      var finished = false;\n      var previousResults = [];\n      return (0, _promiseUtils.continueWhile)(function () {\n        return !finished;\n      }, /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var _yield$Promise$all, _yield$Promise$all2, results;\n        return _regenerator.default.wrap(function (_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return _promise.default.all([(0, _find.default)(query).call(query, findOptions), _promise.default.resolve(previousResults.length > 0 && callback(previousResults))]);\n              case 2:\n                _yield$Promise$all = _context10.sent;\n                _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);\n                results = _yield$Promise$all2[0];\n                if (!(results.length >= query._limit)) {\n                  _context10.next = 10;\n                  break;\n                }\n                query.greaterThan('objectId', results[results.length - 1].id);\n                previousResults = results;\n                _context10.next = 17;\n                break;\n              case 10:\n                if (!(results.length > 0)) {\n                  _context10.next = 16;\n                  break;\n                }\n                _context10.next = 13;\n                return _promise.default.resolve(callback(results));\n              case 13:\n                finished = true;\n                _context10.next = 17;\n                break;\n              case 16:\n                finished = true;\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee3);\n      })));\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback that will be called with each result\n     *     of the query.\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n  }, {\n    key: \"each\",\n    value: function (callback\n    /*: (obj: ParseObject) => any*/, options\n    /*:: ?: BatchOptions*/) /*: Promise<void>*/\n    {\n      return this.eachBatch(function (results) {\n        var callbacksDone = _promise.default.resolve();\n        (0, _forEach.default)(results).call(results, function (result) {\n          callbacksDone = callbacksDone.then(function () {\n            return callback(result);\n          });\n        });\n        return callbacksDone;\n      }, options);\n    }\n    /**\n     * Adds a hint to force index selection. (https://docs.mongodb.com/manual/reference/operator/meta/hint/)\n     *\n     * @param {(string|object)} value String or Object of index that should be used when executing query\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"hint\",\n    value: function (value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      if (typeof value === 'undefined') {\n        delete this._hint;\n      }\n      this._hint = value;\n      return this;\n    }\n    /**\n     * Investigates the query execution plan. Useful for optimizing queries. (https://docs.mongodb.com/manual/reference/operator/meta/explain/)\n     *\n     * @param {boolean} explain Used to toggle the information on the query plan.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"explain\",\n    value: function () /*: ParseQuery*/\n    {\n      var _explain\n      /*: boolean*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (typeof _explain !== 'boolean') {\n        throw new Error('You can only set explain to a boolean value');\n      }\n      this._explain = _explain;\n      return this;\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query map was called upon.</li>\n     * </ul>\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n  }, {\n    key: \"map\",\n    value: function () {\n      var _map = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => any*/, options\n      /*:: ?: BatchOptions*/) {\n        var _this5 = this;\n        var array, index;\n        return _regenerator.default.wrap(function (_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context11.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this5)).then(function (result) {\n                    array.push(result);\n                    index += 1;\n                  });\n                }, options);\n              case 4:\n                return _context11.abrupt(\"return\", array);\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      return function () {\n        return _map.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>accumulator: The accumulator accumulates the callback's return values. It is the accumulated value previously returned in the last invocation of the callback.</li>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     * </ul>\n     * @param {*} initialValue A value to use as the first argument to the first call of the callback. If no initialValue is supplied, the first object in the query will be used and skipped.\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n  }, {\n    key: \"reduce\",\n    value: function () {\n      var _reduce = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(callback\n      /*: (accumulator: any, currentObject: ParseObject, index: number) => any*/, initialValue\n      /*: any*/, options\n      /*:: ?: BatchOptions*/) {\n        var accumulator, index;\n        return _regenerator.default.wrap(function (_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                accumulator = initialValue;\n                index = 0;\n                _context12.next = 4;\n                return this.each(function (object) {\n                  // If no initial value was given, we take the first object from the query\n                  // as the initial value and don't call the callback with it.\n                  if (index === 0 && initialValue === undefined) {\n                    accumulator = object;\n                    index += 1;\n                    return;\n                  }\n                  return _promise.default.resolve(callback(accumulator, object, index)).then(function (result) {\n                    accumulator = result;\n                    index += 1;\n                  });\n                }, options);\n              case 4:\n                if (!(index === 0 && initialValue === undefined)) {\n                  _context12.next = 6;\n                  break;\n                }\n                throw new TypeError('Reducing empty query result set with no initial value');\n              case 6:\n                return _context12.abrupt(\"return\", accumulator);\n              case 7:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      return function () {\n        return _reduce.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query filter was called upon.</li>\n     * </ul>\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n  }, {\n    key: \"filter\",\n    value: function () {\n      var _filter = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => boolean*/, options\n      /*:: ?: BatchOptions*/) {\n        var _this6 = this;\n        var array, index;\n        return _regenerator.default.wrap(function (_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context13.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this6)).then(function (flag) {\n                    if (flag) {\n                      array.push(object);\n                    }\n                    index += 1;\n                  });\n                }, options);\n              case 4:\n                return _context13.abrupt(\"return\", array);\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      return function () {\n        return _filter.apply(this, arguments);\n      };\n    }()\n    /** Query Conditions * */\n\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that the Parse.Object must contain.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"equalTo\",\n    value: function (key\n    /*: string | { [key: string]: any }*/, value\n    /*: ?mixed*/) /*: ParseQuery*/\n    {\n      var _this7 = this;\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context14;\n        (0, _forEach.default)(_context14 = (0, _entries.default)(key)).call(_context14, function (_ref2) {\n          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n            k = _ref3[0],\n            val = _ref3[1];\n          return _this7.equalTo(k, val);\n        });\n        return this;\n      }\n      if (typeof value === 'undefined') {\n        return this.doesNotExist(key);\n      }\n      this._where[key] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be not equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that must not be equalled.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"notEqualTo\",\n    value: function (key\n    /*: string | { [key: string]: any }*/, value\n    /*: ?mixed*/) /*: ParseQuery*/\n    {\n      var _this8 = this;\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context15;\n        (0, _forEach.default)(_context15 = (0, _entries.default)(key)).call(_context15, function (_ref4) {\n          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\n            k = _ref5[0],\n            val = _ref5[1];\n          return _this8.notEqualTo(k, val);\n        });\n        return this;\n      }\n      return this._addCondition(key, '$ne', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"lessThan\",\n    value: function (key\n    /*: string*/, value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an lower bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"greaterThan\",\n    value: function (key\n    /*: string*/, value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than or equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"lessThanOrEqualTo\",\n    value: function (key\n    /*: string*/, value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than or equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The value that provides an lower bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"greaterThanOrEqualTo\",\n    value: function (key\n    /*: string*/, value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained in the provided list of values.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"containedIn\",\n    value: function (key\n    /*: string*/, value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$in', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * not be contained in the provided list of values.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The values that will not match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"notContainedIn\",\n    value: function (key\n    /*: string*/, value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$nin', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained by the provided list of values. Get objects where all array elements match.\n     *\n     * @param {string} key The key to check.\n     * @param {Array} values The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"containedBy\",\n    value: function (key\n    /*: string*/, values\n    /*: Array<mixed>*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$containedBy', values);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values.\n     *\n     * @param {string} key The key to check.  This key's value must be an array.\n     * @param {Array} values The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"containsAll\",\n    value: function (key\n    /*: string*/, values\n    /*: Array<mixed>*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$all', values);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values starting with given strings.\n     *\n     * @param {string} key The key to check.  This key's value must be an array.\n     * @param {Array<string>} values The string values that will match as starting string.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"containsAllStartingWith\",\n    value: function (key\n    /*: string*/, values\n    /*: Array<string>*/) /*: ParseQuery*/\n    {\n      var _this = this;\n      if (!(0, _isArray.default)(values)) {\n        values = [values];\n      }\n      var regexObject = (0, _map2.default)(values).call(values, function (value) {\n        return {\n          $regex: _this._regexStartWith(value)\n        };\n      });\n      return this.containsAll(key, regexObject);\n    }\n    /**\n     * Adds a constraint for finding objects that contain the given key.\n     *\n     * @param {string} key The key that should exist.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"exists\",\n    value: function (key\n    /*: string*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', true);\n    }\n    /**\n     * Adds a constraint for finding objects that do not contain a given key.\n     *\n     * @param {string} key The key that should not exist\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"doesNotExist\",\n    value: function (key\n    /*: string*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', false);\n    }\n    /**\n     * Adds a regular expression constraint for finding string values that match\n     * the provided regular expression.\n     * This may be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {RegExp} regex The regular expression pattern to match.\n     * @param {string} modifiers The regular expression mode.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"matches\",\n    value: function (key\n    /*: string*/, regex\n    /*: RegExp*/, modifiers\n    /*: string*/) /*: ParseQuery*/\n    {\n      this._addCondition(key, '$regex', regex);\n      if (!modifiers) {\n        modifiers = '';\n      }\n      if (regex.ignoreCase) {\n        modifiers += 'i';\n      }\n      if (regex.multiline) {\n        modifiers += 'm';\n      }\n      if (modifiers.length) {\n        this._addCondition(key, '$options', modifiers);\n      }\n      return this;\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a Parse.Query\n     * constraint.\n     *\n     * @param {string} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"matchesQuery\",\n    value: function (key\n    /*: string*/, query\n    /*: ParseQuery*/) /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$inQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value not matches a\n     * Parse.Query constraint.\n     *\n     * @param {string} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should not match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"doesNotMatchQuery\",\n    value: function (key\n    /*: string*/, query\n    /*: ParseQuery*/) /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$notInQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a value in\n     * an object returned by a different Parse.Query.\n     *\n     * @param {string} key The key that contains the value that is being\n     *                     matched.\n     * @param {string} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"matchesKeyInQuery\",\n    value: function (key\n    /*: string*/, queryKey\n    /*: string*/, query\n    /*: ParseQuery*/) /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$select', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint that requires that a key's value not match a value in\n     * an object returned by a different Parse.Query.\n     *\n     * @param {string} key The key that contains the value that is being\n     *                     excluded.\n     * @param {string} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"doesNotMatchKeyInQuery\",\n    value: function (key\n    /*: string*/, queryKey\n    /*: string*/, query\n    /*: ParseQuery*/) /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$dontSelect', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint for finding string values that contain a provided\n     * string.  This may be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} substring The substring that the value must contain.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"contains\",\n    value: function (key\n    /*: string*/, substring\n    /*: string*/) /*: ParseQuery*/\n    {\n      if (typeof substring !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n      return this._addCondition(key, '$regex', quote(substring));\n    }\n    /**\n     * Adds a constraint for finding string values that contain a provided\n     * string. This may be slow for large datasets. Requires Parse-Server > 2.5.0\n     *\n     * In order to sort you must use select and ascending ($score is required)\n     *  <pre>\n     *   query.fullText('field', 'term');\n     *   query.ascending('$score');\n     *   query.select('$score');\n     *  </pre>\n     *\n     * To retrieve the weight / rank\n     *  <pre>\n     *   object->get('score');\n     *  </pre>\n     *\n     * You can define optionals by providing an object as a third parameter\n     *  <pre>\n     *   query.fullText('field', 'term', { language: 'es', diacriticSensitive: true });\n     *  </pre>\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} value The string to search\n     * @param {object} options (Optional)\n     * @param {string} options.language The language that determines the list of stop words for the search and the rules for the stemmer and tokenizer.\n     * @param {boolean} options.caseSensitive A boolean flag to enable or disable case sensitive search.\n     * @param {boolean} options.diacriticSensitive A boolean flag to enable or disable diacritic sensitive search.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"fullText\",\n    value: function (key\n    /*: string*/, value\n    /*: string*/, options\n    /*: ?Object*/) /*: ParseQuery*/\n    {\n      options = options || {};\n      if (!key) {\n        throw new Error('A key is required.');\n      }\n      if (!value) {\n        throw new Error('A search term is required');\n      }\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n      var fullOptions = {};\n      fullOptions.$term = value;\n      for (var option in options) {\n        switch (option) {\n          case 'language':\n            fullOptions.$language = options[option];\n            break;\n          case 'caseSensitive':\n            fullOptions.$caseSensitive = options[option];\n            break;\n          case 'diacriticSensitive':\n            fullOptions.$diacriticSensitive = options[option];\n            break;\n          default:\n            throw new Error(\"Unknown option: \".concat(option));\n        }\n      }\n      return this._addCondition(key, '$text', {\n        $search: fullOptions\n      });\n    }\n    /**\n     * Method to sort the full text search by text score\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"sortByTextScore\",\n    value: function () {\n      this.ascending('$score');\n      this.select(['$score']);\n      return this;\n    }\n    /**\n     * Adds a constraint for finding string values that start with a provided\n     * string.  This query will use the backend index, so it will be fast even\n     * for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} prefix The substring that the value must start with.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"startsWith\",\n    value: function (key\n    /*: string*/, prefix\n    /*: string*/) /*: ParseQuery*/\n    {\n      if (typeof prefix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n      return this._addCondition(key, '$regex', this._regexStartWith(prefix));\n    }\n    /**\n     * Adds a constraint for finding string values that end with a provided\n     * string.  This will be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} suffix The substring that the value must end with.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"endsWith\",\n    value: function (key\n    /*: string*/, suffix\n    /*: string*/) /*: ParseQuery*/\n    {\n      if (typeof suffix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n      return this._addCondition(key, '$regex', \"\".concat(quote(suffix), \"$\"));\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"near\",\n    value: function (key\n    /*: string*/, point\n    /*: ParseGeoPoint*/) /*: ParseQuery*/\n    {\n      if (!(point instanceof _ParseGeoPoint.default)) {\n        // Try to cast it as a GeoPoint\n        point = new _ParseGeoPoint.default(point);\n      }\n      return this._addCondition(key, '$nearSphere', point);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in radians) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"withinRadians\",\n    value: function (key\n    /*: string*/, point\n    /*: ParseGeoPoint*/, maxDistance\n    /*: number*/, sorted\n    /*: boolean*/) /*: ParseQuery*/\n    {\n      if (sorted || sorted === undefined) {\n        this.near(key, point);\n        return this._addCondition(key, '$maxDistance', maxDistance);\n      }\n      return this._addCondition(key, '$geoWithin', {\n        $centerSphere: [[point.longitude, point.latitude], maxDistance]\n      });\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 3958.8 miles.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in miles) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"withinMiles\",\n    value: function (key\n    /*: string*/, point\n    /*: ParseGeoPoint*/, maxDistance\n    /*: number*/, sorted\n    /*: boolean*/) /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 3958.8, sorted);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 6371.0 kilometers.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in kilometers) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"withinKilometers\",\n    value: function (key\n    /*: string*/, point\n    /*: ParseGeoPoint*/, maxDistance\n    /*: number*/, sorted\n    /*: boolean*/) /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 6371.0, sorted);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within a given rectangular geographic bounding\n     * box.\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Parse.GeoPoint} southwest\n     *     The lower-left inclusive corner of the box.\n     * @param {Parse.GeoPoint} northeast\n     *     The upper-right inclusive corner of the box.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"withinGeoBox\",\n    value: function (key\n    /*: string*/, southwest\n    /*: ParseGeoPoint*/, northeast\n    /*: ParseGeoPoint*/) /*: ParseQuery*/\n    {\n      if (!(southwest instanceof _ParseGeoPoint.default)) {\n        southwest = new _ParseGeoPoint.default(southwest);\n      }\n      if (!(northeast instanceof _ParseGeoPoint.default)) {\n        northeast = new _ParseGeoPoint.default(northeast);\n      }\n      this._addCondition(key, '$within', {\n        $box: [southwest, northeast]\n      });\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within and on the bounds of a given polygon.\n     * Supports closed and open (last point is connected to first) paths\n     *\n     * Polygon must have at least 3 points\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Array} points Array of Coordinates / GeoPoints\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"withinPolygon\",\n    value: function (key\n    /*: string*/, points\n    /*: Array<Array<number>>*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoWithin', {\n        $polygon: points\n      });\n    }\n    /**\n     * Add a constraint to the query that requires a particular key's\n     * coordinates that contains a ParseGeoPoint\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Parse.GeoPoint} point\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"polygonContains\",\n    value: function (key\n    /*: string*/, point\n    /*: ParseGeoPoint*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoIntersects', {\n        $point: point\n      });\n    }\n    /** Query Orderings * */\n\n    /**\n     * Sorts the results in ascending order by the given key.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"ascending\",\n    value: function () /*: ParseQuery*/\n    {\n      this._order = [];\n      for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {\n        keys[_key5] = arguments[_key5];\n      }\n      return this.addAscending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in ascending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"addAscending\",\n    value: function () /*: ParseQuery*/\n    {\n      var _this9 = this;\n      if (!this._order) {\n        this._order = [];\n      }\n      for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {\n        keys[_key6] = arguments[_key6];\n      }\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context16;\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n        _this9._order = (0, _concat.default)(_context16 = _this9._order).call(_context16, key.replace(/\\s/g, '').split(','));\n      });\n      return this;\n    }\n    /**\n     * Sorts the results in descending order by the given key.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"descending\",\n    value: function () /*: ParseQuery*/\n    {\n      this._order = [];\n      for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {\n        keys[_key7] = arguments[_key7];\n      }\n      return this.addDescending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in descending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"addDescending\",\n    value: function () /*: ParseQuery*/\n    {\n      var _this10 = this;\n      if (!this._order) {\n        this._order = [];\n      }\n      for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {\n        keys[_key8] = arguments[_key8];\n      }\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context17, _context18;\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n        _this10._order = (0, _concat.default)(_context17 = _this10._order).call(_context17, (0, _map2.default)(_context18 = key.replace(/\\s/g, '').split(',')).call(_context18, function (k) {\n          return \"-\".concat(k);\n        }));\n      });\n      return this;\n    }\n    /** Query Options * */\n\n    /**\n     * Sets the number of results to skip before returning any results.\n     * This is useful for pagination.\n     * Default is to skip zero results.\n     *\n     * @param {number} n the number of results to skip.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"skip\",\n    value: function (n\n    /*: number*/) /*: ParseQuery*/\n    {\n      if (typeof n !== 'number' || n < 0) {\n        throw new Error('You can only skip by a positive number');\n      }\n      this._skip = n;\n      return this;\n    }\n    /**\n     * Sets the limit of the number of results to return. The default limit is 100.\n     *\n     * @param {number} n the number of results to limit to.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"limit\",\n    value: function (n\n    /*: number*/) /*: ParseQuery*/\n    {\n      if (typeof n !== 'number') {\n        throw new Error('You can only set the limit to a numeric value');\n      }\n      this._limit = n;\n      return this;\n    }\n    /**\n     * Sets the flag to include with response the total number of objects satisfying this query,\n     * despite limits/skip. Might be useful for pagination.\n     * Note that result of this query will be wrapped as an object with\n     * `results`: holding {ParseObject} array and `count`: integer holding total number\n     *\n     * @param {boolean} includeCount false - disable, true - enable.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"withCount\",\n    value: function () /*: ParseQuery*/\n    {\n      var includeCount\n      /*: boolean*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (typeof includeCount !== 'boolean') {\n        throw new Error('You can only set withCount to a boolean value');\n      }\n      this._count = includeCount;\n      return this;\n    }\n    /**\n     * Includes nested Parse.Objects for the provided key.  You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * You can include all nested Parse.Objects by passing in '*'.\n     * Requires Parse Server 3.0.0+\n     * <pre>query.include('*');</pre>\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"include\",\n    value: function () /*: ParseQuery*/\n    {\n      var _this11 = this;\n      for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {\n        keys[_key9] = arguments[_key9];\n      }\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context19;\n          _this11._include = (0, _concat.default)(_context19 = _this11._include).call(_context19, key);\n        } else {\n          _this11._include.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Includes all nested Parse.Objects.\n     *\n     * Requires Parse Server 3.0.0+\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"includeAll\",\n    value: function () /*: ParseQuery*/\n    {\n      return this.include('*');\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to include only the\n     * provided keys.  If this is called multiple times, then all of the keys\n     * specified in each of the calls will be included.\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"select\",\n    value: function () /*: ParseQuery*/\n    {\n      var _this12 = this;\n      if (!this._select) {\n        this._select = [];\n      }\n      for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {\n        keys[_key10] = arguments[_key10];\n      }\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context20;\n          _this12._select = (0, _concat.default)(_context20 = _this12._select).call(_context20, key);\n        } else {\n          _this12._select.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to all keys except the\n     * provided keys. Exclude takes precedence over select and include.\n     *\n     * Requires Parse Server 3.6.0+\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to exclude.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"exclude\",\n    value: function () /*: ParseQuery*/\n    {\n      var _this13 = this;\n      for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {\n        keys[_key11] = arguments[_key11];\n      }\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context21;\n          _this13._exclude = (0, _concat.default)(_context21 = _this13._exclude).call(_context21, key);\n        } else {\n          _this13._exclude.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Changes the read preference that the backend will use when performing the query to the database.\n     *\n     * @param {string} readPreference The read preference for the main query.\n     * @param {string} includeReadPreference The read preference for the queries to include pointers.\n     * @param {string} subqueryReadPreference The read preference for the sub queries.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"readPreference\",\n    value: function (_readPreference\n    /*: string*/, includeReadPreference\n    /*:: ?: string*/, subqueryReadPreference\n    /*:: ?: string*/) /*: ParseQuery*/\n    {\n      this._readPreference = _readPreference;\n      this._includeReadPreference = includeReadPreference;\n      this._subqueryReadPreference = subqueryReadPreference;\n      return this;\n    }\n  }, {\n    key: \"onChange\",\n    value: function (onUpdate\n    /*: any*/, onError\n    /*:: ?: any*/\n\n    /*:: ?: string*/) /*: Promise<LiveQuerySubscription>*/\n    {\n      var sub = null;\n      this.subscribe().then(function (subscription) {\n        sub = subscription;\n        subscription.on('create', function (object) {\n          onUpdate(object);\n        });\n        subscription.on('update', function (object) {\n          onUpdate(object);\n        });\n        subscription.on('error', function (err) {\n          if (onError) {\n            onError(err);\n          } else {\n            // eslint-disable-next-line no-console\n            console.warn('Subscription error', err);\n          }\n        });\n      }).catch(function (err) {\n        if (onError) {\n          onError(err);\n        } else {\n          // eslint-disable-next-line no-console\n          console.warn('Subscription connection error', err);\n        }\n      });\n      return function () {\n        if (sub) {\n          sub.unsubscribe();\n        }\n      };\n    }\n    /**\n     * Subscribe this query to get liveQuery updates\n     *\n     * @param {string} sessionToken (optional) Defaults to the currentUser\n     * @returns {Promise<LiveQuerySubscription>} Returns the liveQuerySubscription, it's an event emitter\n     * which can be used to get liveQuery updates.\n     */\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(sessionToken\n      /*:: ?: string*/) {\n        var currentUser, liveQueryClient, subscription;\n        return _regenerator.default.wrap(function (_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return _CoreManager.default.getUserController().currentUserAsync();\n              case 2:\n                currentUser = _context22.sent;\n                if (!sessionToken) {\n                  sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n                }\n                _context22.next = 6;\n                return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n              case 6:\n                liveQueryClient = _context22.sent;\n                if (liveQueryClient.shouldOpen()) {\n                  liveQueryClient.open();\n                }\n                subscription = liveQueryClient.subscribe(this, sessionToken);\n                return _context22.abrupt(\"return\", subscription.subscribePromise.then(function () {\n                  return subscription;\n                }));\n              case 10:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      return function () {\n        return _subscribe.apply(this, arguments);\n      };\n    }()\n    /**\n     * Constructs a Parse.Query that is the OR of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an or of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to OR.\n     * @static\n     * @returns {Parse.Query} The query that is the OR of the passed in queries.\n     */\n  }, {\n    key: \"fromNetwork\",\n    value:\n    /**\n     * Change the source of this query to the server.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n    function () /*: ParseQuery*/\n    {\n      this._queriesLocalDatastore = false;\n      this._localDatastorePinName = null;\n      return this;\n    }\n    /**\n     * Changes the source of this query to all pinned objects.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"fromLocalDatastore\",\n    value: function () /*: ParseQuery*/\n    {\n      return this.fromPinWithName(null);\n    }\n    /**\n     * Changes the source of this query to the default group of pinned objects.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"fromPin\",\n    value: function () /*: ParseQuery*/\n    {\n      return this.fromPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Changes the source of this query to a specific group of pinned objects.\n     *\n     * @param {string} name The name of query source.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"fromPinWithName\",\n    value: function (name\n    /*:: ?: string*/) /*: ParseQuery*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (localDatastore.checkIfEnabled()) {\n        this._queriesLocalDatastore = true;\n        this._localDatastorePinName = name;\n      }\n      return this;\n    }\n    /**\n     * Cancels the current network request (if any is running).\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n  }, {\n    key: \"cancel\",\n    value: function () /*: ParseQuery*/\n    {\n      var _this14 = this;\n      if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === 'function') {\n        this._xhrRequest.task._aborted = true;\n        this._xhrRequest.task.abort();\n        this._xhrRequest.task = null;\n        this._xhrRequest.onchange = function () {};\n        return this;\n      }\n      return this._xhrRequest.onchange = function () {\n        return _this14.cancel();\n      };\n    }\n  }, {\n    key: \"_setRequestTask\",\n    value: function (options) {\n      var _this15 = this;\n      options.requestTask = function (task) {\n        _this15._xhrRequest.task = task;\n        _this15._xhrRequest.onchange();\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function (className\n    /*: string*/, json\n    /*: QueryJSON*/) /*: ParseQuery*/\n    {\n      var query = new ParseQuery(className);\n      return query.withJSON(json);\n    }\n  }, {\n    key: \"or\",\n    value: function () /*: ParseQuery*/\n    {\n      for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {\n        queries[_key12] = arguments[_key12];\n      }\n      var className = _getClassNameFromQueries(queries);\n      var query = new ParseQuery(className);\n      query._orQuery(queries);\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the AND of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.and(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an and of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to AND.\n     * @static\n     * @returns {Parse.Query} The query that is the AND of the passed in queries.\n     */\n  }, {\n    key: \"and\",\n    value: function () /*: ParseQuery*/\n    {\n      for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {\n        queries[_key13] = arguments[_key13];\n      }\n      var className = _getClassNameFromQueries(queries);\n      var query = new ParseQuery(className);\n      query._andQuery(queries);\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the NOR of the passed in queries.  For\n     * example:\n     * <pre>const compoundQuery = Parse.Query.nor(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is a nor of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to NOR.\n     * @static\n     * @returns {Parse.Query} The query that is the NOR of the passed in queries.\n     */\n  }, {\n    key: \"nor\",\n    value: function () /*: ParseQuery*/\n    {\n      for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {\n        queries[_key14] = arguments[_key14];\n      }\n      var className = _getClassNameFromQueries(queries);\n      var query = new ParseQuery(className);\n      query._norQuery(queries);\n      return query;\n    }\n  }]);\n  return ParseQuery;\n}();\nvar DefaultController = {\n  find: function (className\n  /*: string*/, params\n  /*: QueryJSON*/, options\n  /*: RequestOptions*/) /*: Promise<Array<ParseObject>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', \"classes/\".concat(className), params, options);\n  },\n  aggregate: function (className\n  /*: string*/, params\n  /*: any*/, options\n  /*: RequestOptions*/) /*: Promise<Array<mixed>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', \"aggregate/\".concat(className), params, options);\n  }\n};\n_CoreManager.default.setQueryController(DefaultController);\nvar _default = ParseQuery;\nexports.default = _default;","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_regenerator","_slicedToArray2","_toConsumableArray2","_asyncToGenerator2","_classCallCheck2","_createClass2","_defineProperty2","_typeof2","_forEach","_indexOf","_keys","_slice","_map2","_filter2","_keys2","_concat","_includes","_sort","_splice","_promise","_find","_isArray","_entries","_CoreManager","_encode","_promiseUtils","_ParseError","_ParseGeoPoint","_ParseObject","_OfflineQuery","_LocalDatastoreUtils","quote","s","concat","replace","_getClassNameFromQueries","queries","className","call","q","Error","handleSelectResult","data","select","serverDataMask","field","hasSubObjectSelect","hasOwnProperty","undefined","pathComponents","split","_obj","serverMask","component","index","arr","length","serverData","getObjectStateController","getServerData","id","objectId","copyMissingDataWithMask","src","dest","mask","copyThisLevel","_key","_key2","handleOfflineSort","a","b","sorts","order","operator","isDescending","substring","test","INVALID_KEY_NAME","field1","get","field2","remainingSorts","ParseQuery","objectClass","_obj2","TypeError","_where","_include","_exclude","_count","_limit","_skip","_readPreference","_includeReadPreference","_subqueryReadPreference","_queriesLocalDatastore","_localDatastorePinName","_extraOptions","_xhrRequest","task","onchange","key","queryJSON","toJSON","where","$or","$and","$nor","condition","string","_handleOfflineQuery2","mark","_callee","params","_context","_this2","localDatastore","objects","results","keys","alwaysSelectedKeys","count","limit","wrap","_context3","prev","next","validateQuery","getLocalDatastore","_serializeObjectsFromPinName","sent","json","object","fromJSON","_localId","matchesQuery","_context2","_toFullJSON","skip","abrupt","stop","apply","arguments","include","join","excludeKeys","_select","_order","readPreference","includeReadPreference","subqueryReadPreference","_hint","hint","_explain","explain","_key3","_key4","_context4","options","equalTo","firstOptions","useMasterKey","sessionToken","context","first","then","response","errorObject","OBJECT_NOT_FOUND","reject","_this3","findOptions","_setRequestTask","controller","getQueryController","_handleOfflineQuery","_context5","override","_findAll","_callee2","result","_context7","eachBatch","_context6","distinctOptions","distinct","aggregate","pipeline","aggregateOptions","unshift","match","_this4","callback","_context8","query","batchSize","i","_context9","_attr","val","v","conditionMap","cond","ascending","finished","previousResults","continueWhile","_callee3","_yield$Promise$all","_yield$Promise$all2","_context10","all","resolve","greaterThan","callbacksDone","_map","_callee4","_this5","array","_context11","each","push","_reduce","_callee5","initialValue","accumulator","_context12","_filter","_callee6","_this6","_context13","flag","_this7","_context14","_ref2","_ref3","k","doesNotExist","_this8","_context15","_ref4","_ref5","notEqualTo","_addCondition","values","_this","regexObject","$regex","_regexStartWith","containsAll","regex","modifiers","ignoreCase","multiline","queryKey","fullOptions","$term","option","$language","$caseSensitive","$diacriticSensitive","$search","prefix","suffix","point","maxDistance","sorted","near","$centerSphere","longitude","latitude","withinRadians","southwest","northeast","$box","points","$polygon","$point","_len","Array","_key5","addAscending","_this9","_len2","_key6","_context16","_len3","_key7","addDescending","_this10","_len4","_key8","_context17","_context18","n","includeCount","_this11","_len5","_key9","_context19","_this12","_len6","_key10","_context20","_this13","_len7","_key11","_context21","onUpdate","onError","sub","subscribe","subscription","on","err","console","warn","catch","unsubscribe","_subscribe","_callee7","currentUser","liveQueryClient","_context22","getUserController","currentUserAsync","getSessionToken","getLiveQueryController","getDefaultLiveQueryClient","shouldOpen","open","subscribePromise","fromPinWithName","DEFAULT_PIN","name","checkIfEnabled","_this14","abort","_aborted","cancel","_this15","requestTask","withJSON","_len8","_key12","_orQuery","_len9","_key13","_andQuery","_len10","_key14","_norQuery","DefaultController","find","RESTController","getRESTController","request","setQueryController","_default"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/moralis/lib/browser/ParseQuery.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/toConsumableArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _map2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _filter2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _keys2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _sort = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/sort\"));\n\nvar _splice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/splice\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _entries = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/entries\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _OfflineQuery = _interopRequireDefault(require(\"./OfflineQuery\"));\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Converts a string into a regex that matches it.\n * Surrounding with \\Q .. \\E does this, we just need to escape any \\E's in\n * the text separately.\n *\n * @param s\n * @private\n * @returns {string}\n */\n\n\nfunction quote(s\n/*: string*/\n)\n/*: string*/\n{\n  return \"\\\\Q\".concat(s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q'), \"\\\\E\");\n}\n/**\n * Extracts the class name from queries. If not all queries have the same\n * class name an error will be thrown.\n *\n * @param queries\n * @private\n * @returns {string}\n */\n\n\nfunction _getClassNameFromQueries(queries\n/*: Array<ParseQuery>*/\n)\n/*: ?string*/\n{\n  var className = null;\n  (0, _forEach.default)(queries).call(queries, function (q) {\n    if (!className) {\n      // eslint-disable-next-line prefer-destructuring\n      className = q.className;\n    }\n\n    if (className !== q.className) {\n      throw new Error('All queries must be for the same class.');\n    }\n  });\n  return className;\n}\n/*\n * Handles pre-populating the result data of a query with select fields,\n * making sure that the data object contains keys for all objects that have\n * been requested with a select, so that our cached state updates correctly.\n */\n\n\nfunction handleSelectResult(data\n/*: any*/\n, select\n/*: Array<string>*/\n) {\n  var serverDataMask = {};\n  (0, _forEach.default)(select).call(select, function (field) {\n    var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, '.') !== -1;\n\n    if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {\n      // this field was selected, but is missing from the retrieved data\n      data[field] = undefined;\n    } else if (hasSubObjectSelect) {\n      // this field references a sub-object,\n      // so we need to walk down the path components\n      var pathComponents = field.split('.');\n      var _obj = data;\n      var serverMask = serverDataMask;\n      (0, _forEach.default)(pathComponents).call(pathComponents, function (component, index, arr) {\n        // add keys if the expected data is missing\n        if (_obj && !_obj.hasOwnProperty(component)) {\n          _obj[component] = undefined;\n        }\n\n        if (_obj && (0, _typeof2.default)(_obj) === 'object') {\n          _obj = _obj[component];\n        } // add this path component to the server mask so we can fill it in later if needed\n\n\n        if (index < arr.length - 1) {\n          if (!serverMask[component]) {\n            serverMask[component] = {};\n          }\n\n          serverMask = serverMask[component];\n        }\n      });\n    }\n  });\n\n  if ((0, _keys.default)(serverDataMask).length > 0) {\n    // When selecting from sub-objects, we don't want to blow away the missing\n    // information that we may have retrieved before. We've already added any\n    // missing selected keys to sub-objects, but we still need to add in the\n    // data for any previously retrieved sub-objects that were not selected.\n    var serverData = _CoreManager.default.getObjectStateController().getServerData({\n      id: data.objectId,\n      className: data.className\n    });\n\n    copyMissingDataWithMask(serverData, data, serverDataMask, false);\n  }\n}\n\nfunction copyMissingDataWithMask(src, dest, mask, copyThisLevel) {\n  // copy missing elements at this level\n  if (copyThisLevel) {\n    for (var _key in src) {\n      if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {\n        dest[_key] = src[_key];\n      }\n    }\n  }\n\n  for (var _key2 in mask) {\n    if (dest[_key2] !== undefined && dest[_key2] !== null && src !== undefined && src !== null) {\n      // traverse into objects as needed\n      copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);\n    }\n  }\n}\n\nfunction handleOfflineSort(a, b, sorts) {\n  var order = sorts[0];\n  var operator = (0, _slice.default)(order).call(order, 0, 1);\n  var isDescending = operator === '-';\n\n  if (isDescending) {\n    order = order.substring(1);\n  }\n\n  if (order === '_created_at') {\n    order = 'createdAt';\n  }\n\n  if (order === '_updated_at') {\n    order = 'updatedAt';\n  }\n\n  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === 'password') {\n    throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, \"Invalid Key: \".concat(order));\n  }\n\n  var field1 = a.get(order);\n  var field2 = b.get(order);\n\n  if (field1 < field2) {\n    return isDescending ? 1 : -1;\n  }\n\n  if (field1 > field2) {\n    return isDescending ? -1 : 1;\n  }\n\n  if (sorts.length > 1) {\n    var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);\n    return handleOfflineSort(a, b, remainingSorts);\n  }\n\n  return 0;\n}\n/**\n * Creates a new parse Parse.Query for the given Parse.Object subclass.\n *\n * <p>Parse.Query defines a query that is used to fetch Parse.Objects. The\n * most common use case is finding all objects that match a query through the\n * <code>find</code> method. for example, this sample code fetches all objects\n * of class <code>myclass</code>. it calls a different function depending on\n * whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.find().then((results) => {\n *   // results is an array of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to retrieve a single object whose id is\n * known, through the get method. for example, this sample code fetches an\n * object of class <code>myclass</code> and id <code>myid</code>. it calls a\n * different function depending on whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.get(myid).then((object) => {\n *     // object is an instance of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to count the number of objects that match\n * the query without retrieving all of those objects. for example, this\n * sample code counts the number of objects of the class <code>myclass</code>\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.count().then((number) => {\n *     // there are number instances of myclass.\n * }).catch((error) => {\n *     // error is an instance of Parse.Error.\n * });</pre></p>\n *\n * @alias Parse.Query\n */\n\n\nvar ParseQuery = /*#__PURE__*/function () {\n  /**\n   * @property {string} className\n   */\n\n  /**\n   * @param {(string | Parse.Object)} objectClass An instance of a subclass of Parse.Object, or a Parse className string.\n   */\n  function ParseQuery(objectClass\n  /*: string | ParseObject*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseQuery);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    (0, _defineProperty2.default)(this, \"_where\", void 0);\n    (0, _defineProperty2.default)(this, \"_include\", void 0);\n    (0, _defineProperty2.default)(this, \"_exclude\", void 0);\n    (0, _defineProperty2.default)(this, \"_select\", void 0);\n    (0, _defineProperty2.default)(this, \"_limit\", void 0);\n    (0, _defineProperty2.default)(this, \"_skip\", void 0);\n    (0, _defineProperty2.default)(this, \"_count\", void 0);\n    (0, _defineProperty2.default)(this, \"_order\", void 0);\n    (0, _defineProperty2.default)(this, \"_readPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_includeReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_subqueryReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_queriesLocalDatastore\", void 0);\n    (0, _defineProperty2.default)(this, \"_localDatastorePinName\", void 0);\n    (0, _defineProperty2.default)(this, \"_extraOptions\", void 0);\n    (0, _defineProperty2.default)(this, \"_hint\", void 0);\n    (0, _defineProperty2.default)(this, \"_explain\", void 0);\n    (0, _defineProperty2.default)(this, \"_xhrRequest\", void 0);\n\n    if (typeof objectClass === 'string') {\n      if (objectClass === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        this.className = '_User';\n      } else {\n        this.className = objectClass;\n      }\n    } else if (objectClass instanceof _ParseObject.default) {\n      this.className = objectClass.className;\n    } else if (typeof objectClass === 'function') {\n      if (typeof objectClass.className === 'string') {\n        this.className = objectClass.className;\n      } else {\n        var _obj2 = new objectClass();\n\n        this.className = _obj2.className;\n      }\n    } else {\n      throw new TypeError('A ParseQuery must be constructed with a ParseObject or class name.');\n    }\n\n    this._where = {};\n    this._include = [];\n    this._exclude = [];\n    this._count = false; // negative limit is not sent in the server request\n\n    this._limit = -1;\n    this._skip = 0;\n    this._readPreference = null;\n    this._includeReadPreference = null;\n    this._subqueryReadPreference = null;\n    this._queriesLocalDatastore = false;\n    this._localDatastorePinName = null;\n    this._extraOptions = {};\n    this._xhrRequest = {\n      task: null,\n      onchange: function () {}\n    };\n  }\n  /**\n   * Adds constraint that at least one of the passed in queries matches.\n   *\n   * @param {Array} queries\n   * @returns {Parse.Query} Returns the query, so you can chain this call.\n   */\n\n\n  (0, _createClass2.default)(ParseQuery, [{\n    key: \"_orQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$or = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that all of the passed in queries match.\n     *\n     * @param {Array} queries\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_andQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$and = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that none of the passed in queries match.\n     *\n     * @param {Array} queries\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_norQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$nor = queryJSON;\n      return this;\n    }\n    /**\n     * Helper for condition queries\n     *\n     * @param key\n     * @param condition\n     * @param value\n     * @returns {Parse.Query}\n     */\n\n  }, {\n    key: \"_addCondition\",\n    value: function (key\n    /*: string*/\n    , condition\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!this._where[key] || typeof this._where[key] === 'string') {\n        this._where[key] = {};\n      }\n\n      this._where[key][condition] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Converts string for regular expression at the beginning\n     *\n     * @param string\n     * @returns {string}\n     */\n\n  }, {\n    key: \"_regexStartWith\",\n    value: function (string\n    /*: string*/\n    )\n    /*: string*/\n    {\n      return \"^\".concat(quote(string));\n    }\n  }, {\n    key: \"_handleOfflineQuery\",\n    value: function () {\n      var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(params\n      /*: any*/\n      ) {\n        var _context,\n            _this2 = this;\n\n        var localDatastore, objects, results, keys, alwaysSelectedKeys, sorts, count, limit;\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _OfflineQuery.default.validateQuery(this);\n\n                localDatastore = _CoreManager.default.getLocalDatastore();\n                _context3.next = 4;\n                return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);\n\n              case 4:\n                objects = _context3.sent;\n                results = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function (json, index, arr) {\n                  var object = _ParseObject.default.fromJSON(json, false);\n\n                  if (json._localId && !json.objectId) {\n                    object._localId = json._localId;\n                  }\n\n                  if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {\n                    return null;\n                  }\n\n                  return object;\n                })).call(_context, function (object) {\n                  return object !== null;\n                });\n\n                if ((0, _keys2.default)(params)) {\n                  keys = (0, _keys2.default)(params).split(',');\n                  alwaysSelectedKeys = ['className', 'objectId', 'createdAt', 'updatedAt', 'ACL'];\n                  keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);\n                  results = (0, _map2.default)(results).call(results, function (object) {\n                    var _context2;\n\n                    var json = object._toFullJSON();\n\n                    (0, _forEach.default)(_context2 = (0, _keys.default)(json)).call(_context2, function (key) {\n                      if (!(0, _includes.default)(keys).call(keys, key)) {\n                        delete json[key];\n                      }\n                    });\n                    return _ParseObject.default.fromJSON(json, false);\n                  });\n                }\n\n                if (params.order) {\n                  sorts = params.order.split(',');\n                  (0, _sort.default)(results).call(results, function (a, b) {\n                    return handleOfflineSort(a, b, sorts);\n                  });\n                } // count total before applying limit/skip\n\n\n                if (params.count) {\n                  // total count from response\n                  count = results.length;\n                }\n\n                if (params.skip) {\n                  if (params.skip >= results.length) {\n                    results = [];\n                  } else {\n                    results = (0, _splice.default)(results).call(results, params.skip, results.length);\n                  }\n                }\n\n                limit = results.length;\n\n                if (params.limit !== 0 && params.limit < results.length) {\n                  // eslint-disable-next-line prefer-destructuring\n                  limit = params.limit;\n                }\n\n                results = (0, _splice.default)(results).call(results, 0, limit);\n\n                if (!(typeof count === 'number')) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  results: results,\n                  count: count\n                });\n\n              case 15:\n                return _context3.abrupt(\"return\", results);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _handleOfflineQuery2.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns a JSON representation of this query.\n     *\n     * @returns {object} The JSON representation of the query.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: QueryJSON*/\n    {\n      var params\n      /*: QueryJSON*/\n      = {\n        where: this._where\n      };\n\n      if (this._include.length) {\n        params.include = this._include.join(',');\n      }\n\n      if (this._exclude.length) {\n        params.excludeKeys = this._exclude.join(',');\n      }\n\n      if (this._select) {\n        params.keys = this._select.join(',');\n      }\n\n      if (this._count) {\n        params.count = 1;\n      }\n\n      if (this._limit >= 0) {\n        params.limit = this._limit;\n      }\n\n      if (this._skip > 0) {\n        params.skip = this._skip;\n      }\n\n      if (this._order) {\n        params.order = this._order.join(',');\n      }\n\n      if (this._readPreference) {\n        params.readPreference = this._readPreference;\n      }\n\n      if (this._includeReadPreference) {\n        params.includeReadPreference = this._includeReadPreference;\n      }\n\n      if (this._subqueryReadPreference) {\n        params.subqueryReadPreference = this._subqueryReadPreference;\n      }\n\n      if (this._hint) {\n        params.hint = this._hint;\n      }\n\n      if (this._explain) {\n        params.explain = true;\n      }\n\n      for (var _key3 in this._extraOptions) {\n        params[_key3] = this._extraOptions[_key3];\n      }\n\n      return params;\n    }\n    /**\n     * Return a query with conditions from json, can be useful to send query from server side to client\n     * Not static, all query conditions was set before calling this method will be deleted.\n     * For example on the server side we have\n     * var query = new Parse.Query(\"className\");\n     * query.equalTo(key: value);\n     * query.limit(100);\n     * ... (others queries)\n     * Create JSON representation of Query Object\n     * var jsonFromServer = query.fromJSON();\n     *\n     * On client side getting query:\n     * var query = new Parse.Query(\"className\");\n     * query.fromJSON(jsonFromServer);\n     *\n     * and continue to query...\n     * query.skip(100).find().then(...);\n     *\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withJSON\",\n    value: function (json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      if (json.where) {\n        this._where = json.where;\n      }\n\n      if (json.include) {\n        this._include = json.include.split(',');\n      }\n\n      if ((0, _keys2.default)(json)) {\n        this._select = (0, _keys2.default)(json).split(',');\n      }\n\n      if (json.excludeKeys) {\n        this._exclude = json.excludeKeys.split(',');\n      }\n\n      if (json.count) {\n        this._count = json.count === 1;\n      }\n\n      if (json.limit) {\n        this._limit = json.limit;\n      }\n\n      if (json.skip) {\n        this._skip = json.skip;\n      }\n\n      if (json.order) {\n        this._order = json.order.split(',');\n      }\n\n      if (json.readPreference) {\n        this._readPreference = json.readPreference;\n      }\n\n      if (json.includeReadPreference) {\n        this._includeReadPreference = json.includeReadPreference;\n      }\n\n      if (json.subqueryReadPreference) {\n        this._subqueryReadPreference = json.subqueryReadPreference;\n      }\n\n      if (json.hint) {\n        this._hint = json.hint;\n      }\n\n      if (json.explain) {\n        this._explain = !!json.explain;\n      }\n\n      for (var _key4 in json) {\n        if (json.hasOwnProperty(_key4)) {\n          var _context4;\n\n          if ((0, _indexOf.default)(_context4 = ['where', 'include', 'keys', 'count', 'limit', 'skip', 'order', 'readPreference', 'includeReadPreference', 'subqueryReadPreference', 'hint', 'explain']).call(_context4, _key4) === -1) {\n            this._extraOptions[_key4] = json[_key4];\n          }\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Static method to restore Parse.Query by json representation\n     * Internally calling Parse.Query.withJSON\n     *\n     * @param {string} className\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\n     * @returns {Parse.Query} new created query\n     */\n\n  }, {\n    key: \"get\",\n    value:\n    /**\n     * Constructs a Parse.Object whose id is already known by fetching data from\n     * the server. Unlike the <code>first</code> method, it never returns undefined.\n     *\n     * @param {string} objectId The id of the object to be fetched.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n    function (objectId\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject>*/\n    {\n      this.equalTo('objectId', objectId);\n      var firstOptions = {};\n\n      if (options && options.hasOwnProperty('useMasterKey')) {\n        firstOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options && options.hasOwnProperty('sessionToken')) {\n        firstOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options && options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        firstOptions.context = options.context;\n      }\n\n      return this.first(firstOptions).then(function (response) {\n        if (response) {\n          return response;\n        }\n\n        var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'Object not found.');\n        return _promise.default.reject(errorObject);\n      });\n    }\n    /**\n     * Retrieves a list of ParseObjects that satisfy this query.\n     *\n     * @param {object} options Valid options\n     * are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the results when\n     * the query completes.\n     */\n\n  }, {\n    key: \"find\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<ParseObject>>*/\n    {\n      var _this3 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(this.toJSON());\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function (response) {\n        var _context5; // Return generic object when explain is used\n\n\n        if (_this3._explain) {\n          return response.results;\n        }\n\n        var results = (0, _map2.default)(_context5 = response.results).call(_context5, function (data) {\n          // In cases of relations, the server may send back a className\n          // on the top level of the payload\n          var override = response.className || _this3.className;\n\n          if (!data.className) {\n            data.className = override;\n          } // Make sure the data object contains keys for all objects that\n          // have been requested with a select, so that our cached state\n          // updates correctly.\n\n\n          if (select) {\n            handleSelectResult(data, select);\n          }\n\n          return _ParseObject.default.fromJSON(data, !select);\n        });\n        var count = response.count;\n\n        if (typeof count === 'number') {\n          return {\n            results: results,\n            count: count\n          };\n        }\n\n        return results;\n      });\n    }\n    /**\n     * Retrieves a complete list of ParseObjects that satisfy this query.\n     * Using `eachBatch` under the hood to fetch all the valid objects.\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that is resolved with the results when\n     * the query completes.\n     */\n\n  }, {\n    key: \"findAll\",\n    value: function () {\n      var _findAll = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options\n      /*:: ?: BatchOptions*/\n      ) {\n        var result;\n        return _regenerator.default.wrap(function (_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                result\n                /*: ParseObject[]*/\n                = [];\n                _context7.next = 3;\n                return this.eachBatch(function (objects\n                /*: ParseObject[]*/\n                ) {\n                  var _context6;\n\n                  result = (0, _concat.default)(_context6 = []).call(_context6, (0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(objects));\n                }, options);\n\n              case 3:\n                return _context7.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _findAll.apply(this, arguments);\n      };\n    }()\n    /**\n     * Counts the number of objects that match this query.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the count when\n     * the query completes.\n     */\n\n  }, {\n    key: \"count\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<number>*/\n    {\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 0;\n      params.count = 1;\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (result) {\n        return result.count;\n      });\n    }\n    /**\n     * Executes a distinct query and returns unique values\n     *\n     * @param {string} key A field to find distinct values\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"distinct\",\n    value: function (key\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var distinctOptions = {};\n      distinctOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        distinctOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(distinctOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = {\n        distinct: key,\n        where: this._where,\n        hint: this._hint\n      };\n      return controller.aggregate(this.className, params, distinctOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Executes an aggregate query and returns aggregate results\n     *\n     * @param {(Array|object)} pipeline Array or Object of stages to process query\n     * @param {object} options Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"aggregate\",\n    value: function (pipeline\n    /*: mixed*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var aggregateOptions = {};\n      aggregateOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        aggregateOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(aggregateOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== 'object') {\n        throw new Error('Invalid pipeline must be Array or Object');\n      }\n\n      if ((0, _keys.default)(this._where || {}).length) {\n        if (!(0, _isArray.default)(pipeline)) {\n          pipeline = [pipeline];\n        }\n\n        pipeline.unshift({\n          match: this._where\n        });\n      }\n\n      var params = {\n        pipeline: pipeline,\n        hint: this._hint,\n        explain: this._explain,\n        readPreference: this._readPreference\n      };\n      return controller.aggregate(this.className, params, aggregateOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Retrieves at most one Parse.Object that satisfies this query.\n     *\n     * Returns the object if there is one, otherwise undefined.\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the object when\n     * the query completes.\n     */\n\n  }, {\n    key: \"first\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject | void>*/\n    {\n      var _this4 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 1;\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(params).then(function (objects) {\n          if (!objects[0]) {\n            return undefined;\n          }\n\n          return objects[0];\n        });\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (response) {\n        var objects = response.results;\n\n        if (!objects[0]) {\n          return undefined;\n        }\n\n        if (!objects[0].className) {\n          objects[0].className = _this4.className;\n        } // Make sure the data object contains keys for all objects that\n        // have been requested with a select, so that our cached state\n        // updates correctly.\n\n\n        if (select) {\n          handleSelectResult(objects[0], select);\n        }\n\n        return _ParseObject.default.fromJSON(objects[0], !select);\n      });\n    }\n    /**\n     * Iterates over objects matching a query, calling a callback for each batch.\n     * If the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are processed\n     * in an unspecified order. The query may not have any sort order, and may\n     * not use limit or skip.\n     *\n     * @param {Function} callback Callback that will be called with each result\n     *     of the query.\n     * @param {object} options Valid options are:<ul>\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"eachBatch\",\n    value: function (callback\n    /*: (objs: Array<ParseObject>) => Promise<*>*/\n    , options\n    /*:: ?: BatchOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      var _context8;\n\n      options = options || {};\n\n      if (this._order || this._skip || this._limit >= 0) {\n        return _promise.default.reject('Cannot iterate on a query with sort, skip, or limit.');\n      }\n\n      var query = new ParseQuery(this.className);\n      query._limit = options.batchSize || 100;\n      query._include = (0, _map2.default)(_context8 = this._include).call(_context8, function (i) {\n        return i;\n      });\n\n      if (this._select) {\n        var _context9;\n\n        query._select = (0, _map2.default)(_context9 = this._select).call(_context9, function (s) {\n          return s;\n        });\n      }\n\n      query._hint = this._hint;\n      query._where = {};\n\n      for (var _attr in this._where) {\n        var val = this._where[_attr];\n\n        if ((0, _isArray.default)(val)) {\n          query._where[_attr] = (0, _map2.default)(val).call(val, function (v) {\n            return v;\n          });\n        } else if (val && (0, _typeof2.default)(val) === 'object') {\n          var conditionMap = {};\n          query._where[_attr] = conditionMap;\n\n          for (var cond in val) {\n            conditionMap[cond] = val[cond];\n          }\n        } else {\n          query._where[_attr] = val;\n        }\n      }\n\n      query.ascending('objectId');\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      var finished = false;\n      var previousResults = [];\n      return (0, _promiseUtils.continueWhile)(function () {\n        return !finished;\n      }, /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var _yield$Promise$all, _yield$Promise$all2, results;\n\n        return _regenerator.default.wrap(function (_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return _promise.default.all([(0, _find.default)(query).call(query, findOptions), _promise.default.resolve(previousResults.length > 0 && callback(previousResults))]);\n\n              case 2:\n                _yield$Promise$all = _context10.sent;\n                _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);\n                results = _yield$Promise$all2[0];\n\n                if (!(results.length >= query._limit)) {\n                  _context10.next = 10;\n                  break;\n                }\n\n                query.greaterThan('objectId', results[results.length - 1].id);\n                previousResults = results;\n                _context10.next = 17;\n                break;\n\n              case 10:\n                if (!(results.length > 0)) {\n                  _context10.next = 16;\n                  break;\n                }\n\n                _context10.next = 13;\n                return _promise.default.resolve(callback(results));\n\n              case 13:\n                finished = true;\n                _context10.next = 17;\n                break;\n\n              case 16:\n                finished = true;\n\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee3);\n      })));\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback that will be called with each result\n     *     of the query.\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"each\",\n    value: function (callback\n    /*: (obj: ParseObject) => any*/\n    , options\n    /*:: ?: BatchOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      return this.eachBatch(function (results) {\n        var callbacksDone = _promise.default.resolve();\n\n        (0, _forEach.default)(results).call(results, function (result) {\n          callbacksDone = callbacksDone.then(function () {\n            return callback(result);\n          });\n        });\n        return callbacksDone;\n      }, options);\n    }\n    /**\n     * Adds a hint to force index selection. (https://docs.mongodb.com/manual/reference/operator/meta/hint/)\n     *\n     * @param {(string|object)} value String or Object of index that should be used when executing query\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"hint\",\n    value: function (value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value === 'undefined') {\n        delete this._hint;\n      }\n\n      this._hint = value;\n      return this;\n    }\n    /**\n     * Investigates the query execution plan. Useful for optimizing queries. (https://docs.mongodb.com/manual/reference/operator/meta/explain/)\n     *\n     * @param {boolean} explain Used to toggle the information on the query plan.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"explain\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _explain\n      /*: boolean*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (typeof _explain !== 'boolean') {\n        throw new Error('You can only set explain to a boolean value');\n      }\n\n      this._explain = _explain;\n      return this;\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query map was called upon.</li>\n     * </ul>\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"map\",\n    value: function () {\n      var _map = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this5 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context11.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this5)).then(function (result) {\n                    array.push(result);\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                return _context11.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _map.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>accumulator: The accumulator accumulates the callback's return values. It is the accumulated value previously returned in the last invocation of the callback.</li>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     * </ul>\n     * @param {*} initialValue A value to use as the first argument to the first call of the callback. If no initialValue is supplied, the first object in the query will be used and skipped.\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"reduce\",\n    value: function () {\n      var _reduce = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(callback\n      /*: (accumulator: any, currentObject: ParseObject, index: number) => any*/\n      , initialValue\n      /*: any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var accumulator, index;\n        return _regenerator.default.wrap(function (_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                accumulator = initialValue;\n                index = 0;\n                _context12.next = 4;\n                return this.each(function (object) {\n                  // If no initial value was given, we take the first object from the query\n                  // as the initial value and don't call the callback with it.\n                  if (index === 0 && initialValue === undefined) {\n                    accumulator = object;\n                    index += 1;\n                    return;\n                  }\n\n                  return _promise.default.resolve(callback(accumulator, object, index)).then(function (result) {\n                    accumulator = result;\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                if (!(index === 0 && initialValue === undefined)) {\n                  _context12.next = 6;\n                  break;\n                }\n\n                throw new TypeError('Reducing empty query result set with no initial value');\n\n              case 6:\n                return _context12.abrupt(\"return\", accumulator);\n\n              case 7:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _reduce.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query filter was called upon.</li>\n     * </ul>\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"filter\",\n    value: function () {\n      var _filter = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => boolean*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this6 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context13.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this6)).then(function (flag) {\n                    if (flag) {\n                      array.push(object);\n                    }\n\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                return _context13.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function () {\n        return _filter.apply(this, arguments);\n      };\n    }()\n    /** Query Conditions * */\n\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that the Parse.Object must contain.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"equalTo\",\n    value: function (key\n    /*: string | { [key: string]: any }*/\n    , value\n    /*: ?mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this7 = this;\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context14;\n\n        (0, _forEach.default)(_context14 = (0, _entries.default)(key)).call(_context14, function (_ref2) {\n          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n              k = _ref3[0],\n              val = _ref3[1];\n\n          return _this7.equalTo(k, val);\n        });\n        return this;\n      }\n\n      if (typeof value === 'undefined') {\n        return this.doesNotExist(key);\n      }\n\n      this._where[key] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be not equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that must not be equalled.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notEqualTo\",\n    value: function (key\n    /*: string | { [key: string]: any }*/\n    , value\n    /*: ?mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this8 = this;\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context15;\n\n        (0, _forEach.default)(_context15 = (0, _entries.default)(key)).call(_context15, function (_ref4) {\n          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\n              k = _ref5[0],\n              val = _ref5[1];\n\n          return _this8.notEqualTo(k, val);\n        });\n        return this;\n      }\n\n      return this._addCondition(key, '$ne', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an lower bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than or equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than or equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The value that provides an lower bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained in the provided list of values.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$in', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * not be contained in the provided list of values.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The values that will not match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notContainedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$nin', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained by the provided list of values. Get objects where all array elements match.\n     *\n     * @param {string} key The key to check.\n     * @param {Array} values The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedBy\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$containedBy', values);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values.\n     *\n     * @param {string} key The key to check.  This key's value must be an array.\n     * @param {Array} values The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAll\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$all', values);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values starting with given strings.\n     *\n     * @param {string} key The key to check.  This key's value must be an array.\n     * @param {Array<string>} values The string values that will match as starting string.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAllStartingWith\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<string>*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this = this;\n\n      if (!(0, _isArray.default)(values)) {\n        values = [values];\n      }\n\n      var regexObject = (0, _map2.default)(values).call(values, function (value) {\n        return {\n          $regex: _this._regexStartWith(value)\n        };\n      });\n      return this.containsAll(key, regexObject);\n    }\n    /**\n     * Adds a constraint for finding objects that contain the given key.\n     *\n     * @param {string} key The key that should exist.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', true);\n    }\n    /**\n     * Adds a constraint for finding objects that do not contain a given key.\n     *\n     * @param {string} key The key that should not exist\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotExist\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', false);\n    }\n    /**\n     * Adds a regular expression constraint for finding string values that match\n     * the provided regular expression.\n     * This may be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {RegExp} regex The regular expression pattern to match.\n     * @param {string} modifiers The regular expression mode.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matches\",\n    value: function (key\n    /*: string*/\n    , regex\n    /*: RegExp*/\n    , modifiers\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._addCondition(key, '$regex', regex);\n\n      if (!modifiers) {\n        modifiers = '';\n      }\n\n      if (regex.ignoreCase) {\n        modifiers += 'i';\n      }\n\n      if (regex.multiline) {\n        modifiers += 'm';\n      }\n\n      if (modifiers.length) {\n        this._addCondition(key, '$options', modifiers);\n      }\n\n      return this;\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a Parse.Query\n     * constraint.\n     *\n     * @param {string} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$inQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value not matches a\n     * Parse.Query constraint.\n     *\n     * @param {string} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should not match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$notInQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a value in\n     * an object returned by a different Parse.Query.\n     *\n     * @param {string} key The key that contains the value that is being\n     *                     matched.\n     * @param {string} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$select', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint that requires that a key's value not match a value in\n     * an object returned by a different Parse.Query.\n     *\n     * @param {string} key The key that contains the value that is being\n     *                     excluded.\n     * @param {string} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$dontSelect', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint for finding string values that contain a provided\n     * string.  This may be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} substring The substring that the value must contain.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"contains\",\n    value: function (key\n    /*: string*/\n    , substring\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof substring !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', quote(substring));\n    }\n    /**\n     * Adds a constraint for finding string values that contain a provided\n     * string. This may be slow for large datasets. Requires Parse-Server > 2.5.0\n     *\n     * In order to sort you must use select and ascending ($score is required)\n     *  <pre>\n     *   query.fullText('field', 'term');\n     *   query.ascending('$score');\n     *   query.select('$score');\n     *  </pre>\n     *\n     * To retrieve the weight / rank\n     *  <pre>\n     *   object->get('score');\n     *  </pre>\n     *\n     * You can define optionals by providing an object as a third parameter\n     *  <pre>\n     *   query.fullText('field', 'term', { language: 'es', diacriticSensitive: true });\n     *  </pre>\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} value The string to search\n     * @param {object} options (Optional)\n     * @param {string} options.language The language that determines the list of stop words for the search and the rules for the stemmer and tokenizer.\n     * @param {boolean} options.caseSensitive A boolean flag to enable or disable case sensitive search.\n     * @param {boolean} options.diacriticSensitive A boolean flag to enable or disable diacritic sensitive search.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fullText\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    , options\n    /*: ?Object*/\n    )\n    /*: ParseQuery*/\n    {\n      options = options || {};\n\n      if (!key) {\n        throw new Error('A key is required.');\n      }\n\n      if (!value) {\n        throw new Error('A search term is required');\n      }\n\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      var fullOptions = {};\n      fullOptions.$term = value;\n\n      for (var option in options) {\n        switch (option) {\n          case 'language':\n            fullOptions.$language = options[option];\n            break;\n\n          case 'caseSensitive':\n            fullOptions.$caseSensitive = options[option];\n            break;\n\n          case 'diacriticSensitive':\n            fullOptions.$diacriticSensitive = options[option];\n            break;\n\n          default:\n            throw new Error(\"Unknown option: \".concat(option));\n        }\n      }\n\n      return this._addCondition(key, '$text', {\n        $search: fullOptions\n      });\n    }\n    /**\n     * Method to sort the full text search by text score\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"sortByTextScore\",\n    value: function () {\n      this.ascending('$score');\n      this.select(['$score']);\n      return this;\n    }\n    /**\n     * Adds a constraint for finding string values that start with a provided\n     * string.  This query will use the backend index, so it will be fast even\n     * for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} prefix The substring that the value must start with.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"startsWith\",\n    value: function (key\n    /*: string*/\n    , prefix\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof prefix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', this._regexStartWith(prefix));\n    }\n    /**\n     * Adds a constraint for finding string values that end with a provided\n     * string.  This will be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} suffix The substring that the value must end with.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"endsWith\",\n    value: function (key\n    /*: string*/\n    , suffix\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof suffix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', \"\".concat(quote(suffix), \"$\"));\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"near\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(point instanceof _ParseGeoPoint.default)) {\n        // Try to cast it as a GeoPoint\n        point = new _ParseGeoPoint.default(point);\n      }\n\n      return this._addCondition(key, '$nearSphere', point);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in radians) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinRadians\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      if (sorted || sorted === undefined) {\n        this.near(key, point);\n        return this._addCondition(key, '$maxDistance', maxDistance);\n      }\n\n      return this._addCondition(key, '$geoWithin', {\n        $centerSphere: [[point.longitude, point.latitude], maxDistance]\n      });\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 3958.8 miles.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in miles) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinMiles\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 3958.8, sorted);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 6371.0 kilometers.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in kilometers) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinKilometers\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 6371.0, sorted);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within a given rectangular geographic bounding\n     * box.\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Parse.GeoPoint} southwest\n     *     The lower-left inclusive corner of the box.\n     * @param {Parse.GeoPoint} northeast\n     *     The upper-right inclusive corner of the box.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinGeoBox\",\n    value: function (key\n    /*: string*/\n    , southwest\n    /*: ParseGeoPoint*/\n    , northeast\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(southwest instanceof _ParseGeoPoint.default)) {\n        southwest = new _ParseGeoPoint.default(southwest);\n      }\n\n      if (!(northeast instanceof _ParseGeoPoint.default)) {\n        northeast = new _ParseGeoPoint.default(northeast);\n      }\n\n      this._addCondition(key, '$within', {\n        $box: [southwest, northeast]\n      });\n\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within and on the bounds of a given polygon.\n     * Supports closed and open (last point is connected to first) paths\n     *\n     * Polygon must have at least 3 points\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Array} points Array of Coordinates / GeoPoints\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinPolygon\",\n    value: function (key\n    /*: string*/\n    , points\n    /*: Array<Array<number>>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoWithin', {\n        $polygon: points\n      });\n    }\n    /**\n     * Add a constraint to the query that requires a particular key's\n     * coordinates that contains a ParseGeoPoint\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Parse.GeoPoint} point\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"polygonContains\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoIntersects', {\n        $point: point\n      });\n    }\n    /** Query Orderings * */\n\n    /**\n     * Sorts the results in ascending order by the given key.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"ascending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {\n        keys[_key5] = arguments[_key5];\n      }\n\n      return this.addAscending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in ascending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addAscending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this9 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {\n        keys[_key6] = arguments[_key6];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context16;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this9._order = (0, _concat.default)(_context16 = _this9._order).call(_context16, key.replace(/\\s/g, '').split(','));\n      });\n      return this;\n    }\n    /**\n     * Sorts the results in descending order by the given key.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"descending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {\n        keys[_key7] = arguments[_key7];\n      }\n\n      return this.addDescending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in descending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addDescending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this10 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {\n        keys[_key8] = arguments[_key8];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context17, _context18;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this10._order = (0, _concat.default)(_context17 = _this10._order).call(_context17, (0, _map2.default)(_context18 = key.replace(/\\s/g, '').split(',')).call(_context18, function (k) {\n          return \"-\".concat(k);\n        }));\n      });\n      return this;\n    }\n    /** Query Options * */\n\n    /**\n     * Sets the number of results to skip before returning any results.\n     * This is useful for pagination.\n     * Default is to skip zero results.\n     *\n     * @param {number} n the number of results to skip.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"skip\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number' || n < 0) {\n        throw new Error('You can only skip by a positive number');\n      }\n\n      this._skip = n;\n      return this;\n    }\n    /**\n     * Sets the limit of the number of results to return. The default limit is 100.\n     *\n     * @param {number} n the number of results to limit to.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"limit\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number') {\n        throw new Error('You can only set the limit to a numeric value');\n      }\n\n      this._limit = n;\n      return this;\n    }\n    /**\n     * Sets the flag to include with response the total number of objects satisfying this query,\n     * despite limits/skip. Might be useful for pagination.\n     * Note that result of this query will be wrapped as an object with\n     * `results`: holding {ParseObject} array and `count`: integer holding total number\n     *\n     * @param {boolean} includeCount false - disable, true - enable.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withCount\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var includeCount\n      /*: boolean*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (typeof includeCount !== 'boolean') {\n        throw new Error('You can only set withCount to a boolean value');\n      }\n\n      this._count = includeCount;\n      return this;\n    }\n    /**\n     * Includes nested Parse.Objects for the provided key.  You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * You can include all nested Parse.Objects by passing in '*'.\n     * Requires Parse Server 3.0.0+\n     * <pre>query.include('*');</pre>\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"include\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this11 = this;\n\n      for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {\n        keys[_key9] = arguments[_key9];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context19;\n\n          _this11._include = (0, _concat.default)(_context19 = _this11._include).call(_context19, key);\n        } else {\n          _this11._include.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Includes all nested Parse.Objects.\n     *\n     * Requires Parse Server 3.0.0+\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"includeAll\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.include('*');\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to include only the\n     * provided keys.  If this is called multiple times, then all of the keys\n     * specified in each of the calls will be included.\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"select\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this12 = this;\n\n      if (!this._select) {\n        this._select = [];\n      }\n\n      for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {\n        keys[_key10] = arguments[_key10];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context20;\n\n          _this12._select = (0, _concat.default)(_context20 = _this12._select).call(_context20, key);\n        } else {\n          _this12._select.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to all keys except the\n     * provided keys. Exclude takes precedence over select and include.\n     *\n     * Requires Parse Server 3.6.0+\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to exclude.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exclude\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this13 = this;\n\n      for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {\n        keys[_key11] = arguments[_key11];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context21;\n\n          _this13._exclude = (0, _concat.default)(_context21 = _this13._exclude).call(_context21, key);\n        } else {\n          _this13._exclude.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Changes the read preference that the backend will use when performing the query to the database.\n     *\n     * @param {string} readPreference The read preference for the main query.\n     * @param {string} includeReadPreference The read preference for the queries to include pointers.\n     * @param {string} subqueryReadPreference The read preference for the sub queries.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"readPreference\",\n    value: function (_readPreference\n    /*: string*/\n    , includeReadPreference\n    /*:: ?: string*/\n    , subqueryReadPreference\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._readPreference = _readPreference;\n      this._includeReadPreference = includeReadPreference;\n      this._subqueryReadPreference = subqueryReadPreference;\n      return this;\n    }\n  }, {\n    key: \"onChange\",\n    value: function (onUpdate\n    /*: any*/\n    , onError\n    /*:: ?: any*/\n\n    /*:: ?: string*/\n    )\n    /*: Promise<LiveQuerySubscription>*/\n    {\n      var sub = null;\n      this.subscribe().then(function (subscription) {\n        sub = subscription;\n        subscription.on('create', function (object) {\n          onUpdate(object);\n        });\n        subscription.on('update', function (object) {\n          onUpdate(object);\n        });\n        subscription.on('error', function (err) {\n          if (onError) {\n            onError(err);\n          } else {\n            // eslint-disable-next-line no-console\n            console.warn('Subscription error', err);\n          }\n        });\n      }).catch(function (err) {\n        if (onError) {\n          onError(err);\n        } else {\n          // eslint-disable-next-line no-console\n          console.warn('Subscription connection error', err);\n        }\n      });\n      return function () {\n        if (sub) {\n          sub.unsubscribe();\n        }\n      };\n    }\n    /**\n     * Subscribe this query to get liveQuery updates\n     *\n     * @param {string} sessionToken (optional) Defaults to the currentUser\n     * @returns {Promise<LiveQuerySubscription>} Returns the liveQuerySubscription, it's an event emitter\n     * which can be used to get liveQuery updates.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(sessionToken\n      /*:: ?: string*/\n      ) {\n        var currentUser, liveQueryClient, subscription;\n        return _regenerator.default.wrap(function (_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return _CoreManager.default.getUserController().currentUserAsync();\n\n              case 2:\n                currentUser = _context22.sent;\n\n                if (!sessionToken) {\n                  sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n                }\n\n                _context22.next = 6;\n                return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n\n              case 6:\n                liveQueryClient = _context22.sent;\n\n                if (liveQueryClient.shouldOpen()) {\n                  liveQueryClient.open();\n                }\n\n                subscription = liveQueryClient.subscribe(this, sessionToken);\n                return _context22.abrupt(\"return\", subscription.subscribePromise.then(function () {\n                  return subscription;\n                }));\n\n              case 10:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function () {\n        return _subscribe.apply(this, arguments);\n      };\n    }()\n    /**\n     * Constructs a Parse.Query that is the OR of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an or of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to OR.\n     * @static\n     * @returns {Parse.Query} The query that is the OR of the passed in queries.\n     */\n\n  }, {\n    key: \"fromNetwork\",\n    value:\n    /**\n     * Change the source of this query to the server.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n    function ()\n    /*: ParseQuery*/\n    {\n      this._queriesLocalDatastore = false;\n      this._localDatastorePinName = null;\n      return this;\n    }\n    /**\n     * Changes the source of this query to all pinned objects.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromLocalDatastore\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(null);\n    }\n    /**\n     * Changes the source of this query to the default group of pinned objects.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPin\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Changes the source of this query to a specific group of pinned objects.\n     *\n     * @param {string} name The name of query source.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPinWithName\",\n    value: function (name\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (localDatastore.checkIfEnabled()) {\n        this._queriesLocalDatastore = true;\n        this._localDatastorePinName = name;\n      }\n\n      return this;\n    }\n    /**\n     * Cancels the current network request (if any is running).\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this14 = this;\n\n      if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === 'function') {\n        this._xhrRequest.task._aborted = true;\n\n        this._xhrRequest.task.abort();\n\n        this._xhrRequest.task = null;\n\n        this._xhrRequest.onchange = function () {};\n\n        return this;\n      }\n\n      return this._xhrRequest.onchange = function () {\n        return _this14.cancel();\n      };\n    }\n  }, {\n    key: \"_setRequestTask\",\n    value: function (options) {\n      var _this15 = this;\n\n      options.requestTask = function (task) {\n        _this15._xhrRequest.task = task;\n\n        _this15._xhrRequest.onchange();\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function (className\n    /*: string*/\n    , json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      var query = new ParseQuery(className);\n      return query.withJSON(json);\n    }\n  }, {\n    key: \"or\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {\n        queries[_key12] = arguments[_key12];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._orQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the AND of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.and(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an and of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to AND.\n     * @static\n     * @returns {Parse.Query} The query that is the AND of the passed in queries.\n     */\n\n  }, {\n    key: \"and\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {\n        queries[_key13] = arguments[_key13];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._andQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the NOR of the passed in queries.  For\n     * example:\n     * <pre>const compoundQuery = Parse.Query.nor(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is a nor of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to NOR.\n     * @static\n     * @returns {Parse.Query} The query that is the NOR of the passed in queries.\n     */\n\n  }, {\n    key: \"nor\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {\n        queries[_key14] = arguments[_key14];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._norQuery(queries);\n\n      return query;\n    }\n  }]);\n  return ParseQuery;\n}();\n\nvar DefaultController = {\n  find: function (className\n  /*: string*/\n  , params\n  /*: QueryJSON*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<ParseObject>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', \"classes/\".concat(className), params, options);\n  },\n  aggregate: function (className\n  /*: string*/\n  , params\n  /*: any*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<mixed>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', \"aggregate/\".concat(className), params, options);\n  }\n};\n\n_CoreManager.default.setQueryController(DefaultController);\n\nvar _default = ParseQuery;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}