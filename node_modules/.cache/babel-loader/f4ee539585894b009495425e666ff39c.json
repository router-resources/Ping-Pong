{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;\nvar _a = require('ethereum-cryptography/keccak'),\n  keccak224 = _a.keccak224,\n  keccak384 = _a.keccak384,\n  k256 = _a.keccak256,\n  keccak512 = _a.keccak512;\nvar createHash = require('create-hash');\nvar ethjsUtil = require('ethjs-util');\nvar rlp = require(\"rlp\");\nvar bytes_1 = require(\"./bytes\");\n/**\n * Creates Keccak hash of the input\n * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value\n * it's interpreted as hexadecimal, otherwise as utf8.\n * @param bits The Keccak width\n */\nexports.keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {\n    a = Buffer.from(a, 'utf8');\n  } else {\n    a = bytes_1.toBuffer(a);\n  }\n  if (!bits) bits = 256;\n  switch (bits) {\n    case 224:\n      {\n        return keccak224(a);\n      }\n    case 256:\n      {\n        return k256(a);\n      }\n    case 384:\n      {\n        return keccak384(a);\n      }\n    case 512:\n      {\n        return keccak512(a);\n      }\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\" + bits);\n      }\n  }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer|Array|String|Number)\n */\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n/**\n * Creates SHA256 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n */\nexports.sha256 = function (a) {\n  a = bytes_1.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160 = function (a, padded) {\n  a = bytes_1.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n  if (padded === true) {\n    return bytes_1.setLength(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};","map":{"version":3,"mappings":";;;;;;AAAM,SAAuDA,OAAO,CAAC,8BAA8B,CAAC;EAA5FC,SAAS;EAAEC,SAAS;EAAaC,IAAI;EAAEC,SAAS,eAA4C;AACpG,IAAMC,UAAU,GAAGL,OAAO,CAAC,aAAa,CAAC;AACzC,IAAMM,SAAS,GAAGN,OAAO,CAAC,YAAY,CAAC;AACvC;AACA;AAEA;;;;;;AAMaO,cAAM,GAAG,UAASC,CAAM,EAAEC,IAAkB;EAAlB;IAAAA,UAAkB;EAAA;EACvD,IAAI,OAAOD,CAAC,KAAK,QAAQ,IAAI,CAACF,SAAS,CAACI,WAAW,CAACF,CAAC,CAAC,EAAE;IACtDA,CAAC,GAAGG,MAAM,CAACC,IAAI,CAACJ,CAAC,EAAE,MAAM,CAAC;GAC3B,MAAM;IACLA,CAAC,GAAGK,gBAAQ,CAACL,CAAC,CAAC;;EAGjB,IAAI,CAACC,IAAI,EAAEA,IAAI,GAAG,GAAG;EAErB,QAAQA,IAAI;IACV,KAAK,GAAG;MAAE;QACR,OAAOR,SAAS,CAACO,CAAC,CAAC;;IAErB,KAAK,GAAG;MAAE;QACR,OAAOL,IAAI,CAACK,CAAC,CAAC;;IAEhB,KAAK,GAAG;MAAE;QACR,OAAON,SAAS,CAACM,CAAC,CAAC;;IAErB,KAAK,GAAG;MAAE;QACR,OAAOJ,SAAS,CAACI,CAAC,CAAC;;IAErB;MAAS;QACP,MAAM,IAAIM,KAAK,CAAC,6BAA2BL,IAAM,CAAC;;EACnD;AAEL,CAAC;AAED;;;;AAIaF,iBAAS,GAAG,UAASC,CAAM;EACtC,OAAOD,cAAM,CAACC,CAAC,CAAC;AAClB,CAAC;AAED;;;;AAIaD,cAAM,GAAG,UAASC,CAAM;EACnCA,CAAC,GAAGK,gBAAQ,CAACL,CAAC,CAAC;EACf,OAAOH,UAAU,CAAC,QAAQ,CAAC,CACxBU,MAAM,CAACP,CAAC,CAAC,CACTQ,MAAM,EAAE;AACb,CAAC;AAED;;;;;AAKaT,iBAAS,GAAG,UAASC,CAAM,EAAES,MAAe;EACvDT,CAAC,GAAGK,gBAAQ,CAACL,CAAC,CAAC;EACf,IAAMU,IAAI,GAAGb,UAAU,CAAC,QAAQ,CAAC,CAC9BU,MAAM,CAACP,CAAC,CAAC,CACTQ,MAAM,EAAE;EACX,IAAIC,MAAM,KAAK,IAAI,EAAE;IACnB,OAAOJ,iBAAS,CAACK,IAAI,EAAE,EAAE,CAAC;GAC3B,MAAM;IACL,OAAOA,IAAI;;AAEf,CAAC;AAED;;;;AAIaX,eAAO,GAAG,UAASC,CAAY;EAC1C,OAAOD,cAAM,CAACY,GAAG,CAACC,MAAM,CAACZ,CAAC,CAAC,CAAC;AAC9B,CAAC","names":["require","keccak224","keccak384","k256","keccak512","createHash","ethjsUtil","exports","a","bits","isHexString","Buffer","from","bytes_1","Error","update","digest","padded","hash","rlp","encode"],"sourceRoot":"","sources":["../src/hash.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}