{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar ethUtil = require('ethereumjs-util');\nvar fees = require('ethereum-common/params.json');\nvar BN = ethUtil.BN;\n\n// secp256k1n/2\nvar N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n\n/**\n * Creates a new transaction object.\n *\n * @example\n * var rawTx = {\n *   nonce: '00',\n *   gasPrice: '09184e72a000',\n *   gasLimit: '2710',\n *   to: '0000000000000000000000000000000000000000',\n *   value: '00',\n *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',\n *   v: '1c',\n *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\n *   s: '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\n * };\n * var tx = new Transaction(rawTx);\n *\n * @class\n * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple.\n *\n * Or lastly an Object containing the Properties of the transaction like in the Usage example.\n *\n * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum\n *\n * @property {Buffer} raw The raw rlp encoded transaction\n * @param {Buffer} data.nonce nonce number\n * @param {Buffer} data.gasLimit transaction gas limit\n * @param {Buffer} data.gasPrice transaction gas price\n * @param {Buffer} data.to to the to address\n * @param {Buffer} data.value the amount of ether sent\n * @param {Buffer} data.data this will contain the data of the message or the init of a contract\n * @param {Buffer} data.v EC signature parameter\n * @param {Buffer} data.r EC signature parameter\n * @param {Buffer} data.s EC recovery ID\n * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3\n * */\n\nvar Transaction = function () {\n  function Transaction(data) {\n    _classCallCheck(this, Transaction);\n    data = data || {};\n    // Define Properties\n    var fields = [{\n      name: 'nonce',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'gasPrice',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'gasLimit',\n      alias: 'gas',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'to',\n      allowZero: true,\n      length: 20,\n      default: new Buffer([])\n    }, {\n      name: 'value',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'data',\n      alias: 'input',\n      allowZero: true,\n      default: new Buffer([])\n    }, {\n      name: 'v',\n      allowZero: true,\n      default: new Buffer([0x1c])\n    }, {\n      name: 'r',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 's',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new Buffer([])\n    }];\n\n    /**\n     * Returns the rlp encoding of the transaction\n     * @method serialize\n     * @return {Buffer}\n     * @memberof Transaction\n     * @name serialize\n     */\n    // attached serialize\n    ethUtil.defineProperties(this, fields, data);\n\n    /**\n     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.\n     * @name from\n     * @memberof Transaction\n     */\n    Object.defineProperty(this, 'from', {\n      enumerable: true,\n      configurable: true,\n      get: this.getSenderAddress.bind(this)\n    });\n\n    // calculate chainId from signature\n    var sigV = ethUtil.bufferToInt(this.v);\n    var chainId = Math.floor((sigV - 35) / 2);\n    if (chainId < 0) chainId = 0;\n\n    // set chainId\n    this._chainId = chainId || data.chainId || 0;\n    this._homestead = true;\n  }\n\n  /**\n   * If the tx's `to` is to the creation address\n   * @return {Boolean}\n   */\n\n  Transaction.prototype.toCreationAddress = function toCreationAddress() {\n    return this.to.toString('hex') === '';\n  };\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature\n   * @return {Buffer}\n   */\n\n  Transaction.prototype.hash = function hash(includeSignature) {\n    if (includeSignature === undefined) includeSignature = true;\n\n    // EIP155 spec:\n    // when computing the hash of a transaction for purposes of signing or recovering,\n    // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),\n    // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0\n\n    var items = void 0;\n    if (includeSignature) {\n      items = this.raw;\n    } else {\n      if (this._chainId > 0) {\n        var raw = this.raw.slice();\n        this.v = this._chainId;\n        this.r = 0;\n        this.s = 0;\n        items = this.raw;\n        this.raw = raw;\n      } else {\n        items = this.raw.slice(0, 6);\n      }\n    }\n\n    // create hash\n    return ethUtil.rlphash(items);\n  };\n\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n\n  Transaction.prototype.getChainId = function getChainId() {\n    return this._chainId;\n  };\n\n  /**\n   * returns the sender's address\n   * @return {Buffer}\n   */\n\n  Transaction.prototype.getSenderAddress = function getSenderAddress() {\n    if (this._from) {\n      return this._from;\n    }\n    var pubkey = this.getSenderPublicKey();\n    this._from = ethUtil.publicToAddress(pubkey);\n    return this._from;\n  };\n\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n\n  Transaction.prototype.getSenderPublicKey = function getSenderPublicKey() {\n    if (!this._senderPubKey || !this._senderPubKey.length) {\n      if (!this.verifySignature()) throw new Error('Invalid Signature');\n    }\n    return this._senderPubKey;\n  };\n\n  /**\n   * Determines if the signature is valid\n   * @return {Boolean}\n   */\n\n  Transaction.prototype.verifySignature = function verifySignature() {\n    var msgHash = this.hash(false);\n    // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {\n      return false;\n    }\n    try {\n      var v = ethUtil.bufferToInt(this.v);\n      if (this._chainId > 0) {\n        v -= this._chainId * 2 + 8;\n      }\n      this._senderPubKey = ethUtil.ecrecover(msgHash, v, this.r, this.s);\n    } catch (e) {\n      return false;\n    }\n    return !!this._senderPubKey;\n  };\n\n  /**\n   * sign a transaction with a given a private key\n   * @param {Buffer} privateKey\n   */\n\n  Transaction.prototype.sign = function sign(privateKey) {\n    var msgHash = this.hash(false);\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n    if (this._chainId > 0) {\n      sig.v += this._chainId * 2 + 8;\n    }\n    Object.assign(this, sig);\n  };\n\n  /**\n   * The amount of gas paid for the data in this tx\n   * @return {BN}\n   */\n\n  Transaction.prototype.getDataFee = function getDataFee() {\n    var data = this.raw[5];\n    var cost = new BN(0);\n    for (var i = 0; i < data.length; i++) {\n      data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);\n    }\n    return cost;\n  };\n\n  /**\n   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   * @return {BN}\n   */\n\n  Transaction.prototype.getBaseFee = function getBaseFee() {\n    var fee = this.getDataFee().iaddn(fees.txGas.v);\n    if (this._homestead && this.toCreationAddress()) {\n      fee.iaddn(fees.txCreation.v);\n    }\n    return fee;\n  };\n\n  /**\n   * the up front amount that an account must have for this transaction to be valid\n   * @return {BN}\n   */\n\n  Transaction.prototype.getUpfrontCost = function getUpfrontCost() {\n    return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));\n  };\n\n  /**\n   * validates the signature and checks to see if it has enough gas\n   * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean\n   * @return {Boolean|String}\n   */\n\n  Transaction.prototype.validate = function validate(stringError) {\n    var errors = [];\n    if (!this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n    if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {\n      errors.push(['gas limit is too low. Need at least ' + this.getBaseFee()]);\n    }\n    if (stringError === undefined || stringError === false) {\n      return errors.length === 0;\n    } else {\n      return errors.join(' ');\n    }\n  };\n  return Transaction;\n}();\nmodule.exports = Transaction;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","ethUtil","require","fees","BN","N_DIV_2","Transaction","data","fields","name","length","allowLess","default","Buffer","alias","allowZero","defineProperties","Object","defineProperty","enumerable","configurable","get","getSenderAddress","bind","sigV","bufferToInt","v","chainId","Math","floor","_chainId","_homestead","prototype","toCreationAddress","to","toString","hash","includeSignature","undefined","items","raw","slice","r","s","rlphash","getChainId","_from","pubkey","getSenderPublicKey","publicToAddress","_senderPubKey","verifySignature","Error","msgHash","cmp","ecrecover","e","sign","privateKey","sig","ecsign","assign","getDataFee","cost","i","iaddn","txDataZeroGas","txDataNonZeroGas","getBaseFee","fee","txGas","txCreation","getUpfrontCost","gasLimit","imul","gasPrice","iadd","value","validate","stringError","errors","push","join","module","exports"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/ethereumjs-tx/es5/index.js"],"sourcesContent":["'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ethUtil = require('ethereumjs-util');\nvar fees = require('ethereum-common/params.json');\nvar BN = ethUtil.BN;\n\n// secp256k1n/2\nvar N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n\n/**\n * Creates a new transaction object.\n *\n * @example\n * var rawTx = {\n *   nonce: '00',\n *   gasPrice: '09184e72a000',\n *   gasLimit: '2710',\n *   to: '0000000000000000000000000000000000000000',\n *   value: '00',\n *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',\n *   v: '1c',\n *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\n *   s: '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\n * };\n * var tx = new Transaction(rawTx);\n *\n * @class\n * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple.\n *\n * Or lastly an Object containing the Properties of the transaction like in the Usage example.\n *\n * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum\n *\n * @property {Buffer} raw The raw rlp encoded transaction\n * @param {Buffer} data.nonce nonce number\n * @param {Buffer} data.gasLimit transaction gas limit\n * @param {Buffer} data.gasPrice transaction gas price\n * @param {Buffer} data.to to the to address\n * @param {Buffer} data.value the amount of ether sent\n * @param {Buffer} data.data this will contain the data of the message or the init of a contract\n * @param {Buffer} data.v EC signature parameter\n * @param {Buffer} data.r EC signature parameter\n * @param {Buffer} data.s EC recovery ID\n * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3\n * */\n\nvar Transaction = function () {\n  function Transaction(data) {\n    _classCallCheck(this, Transaction);\n\n    data = data || {};\n    // Define Properties\n    var fields = [{\n      name: 'nonce',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'gasPrice',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'gasLimit',\n      alias: 'gas',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'to',\n      allowZero: true,\n      length: 20,\n      default: new Buffer([])\n    }, {\n      name: 'value',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'data',\n      alias: 'input',\n      allowZero: true,\n      default: new Buffer([])\n    }, {\n      name: 'v',\n      allowZero: true,\n      default: new Buffer([0x1c])\n    }, {\n      name: 'r',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 's',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new Buffer([])\n    }];\n\n    /**\n     * Returns the rlp encoding of the transaction\n     * @method serialize\n     * @return {Buffer}\n     * @memberof Transaction\n     * @name serialize\n     */\n    // attached serialize\n    ethUtil.defineProperties(this, fields, data);\n\n    /**\n     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.\n     * @name from\n     * @memberof Transaction\n     */\n    Object.defineProperty(this, 'from', {\n      enumerable: true,\n      configurable: true,\n      get: this.getSenderAddress.bind(this)\n    });\n\n    // calculate chainId from signature\n    var sigV = ethUtil.bufferToInt(this.v);\n    var chainId = Math.floor((sigV - 35) / 2);\n    if (chainId < 0) chainId = 0;\n\n    // set chainId\n    this._chainId = chainId || data.chainId || 0;\n    this._homestead = true;\n  }\n\n  /**\n   * If the tx's `to` is to the creation address\n   * @return {Boolean}\n   */\n\n\n  Transaction.prototype.toCreationAddress = function toCreationAddress() {\n    return this.to.toString('hex') === '';\n  };\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.hash = function hash(includeSignature) {\n    if (includeSignature === undefined) includeSignature = true;\n\n    // EIP155 spec:\n    // when computing the hash of a transaction for purposes of signing or recovering,\n    // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),\n    // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0\n\n    var items = void 0;\n    if (includeSignature) {\n      items = this.raw;\n    } else {\n      if (this._chainId > 0) {\n        var raw = this.raw.slice();\n        this.v = this._chainId;\n        this.r = 0;\n        this.s = 0;\n        items = this.raw;\n        this.raw = raw;\n      } else {\n        items = this.raw.slice(0, 6);\n      }\n    }\n\n    // create hash\n    return ethUtil.rlphash(items);\n  };\n\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getChainId = function getChainId() {\n    return this._chainId;\n  };\n\n  /**\n   * returns the sender's address\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getSenderAddress = function getSenderAddress() {\n    if (this._from) {\n      return this._from;\n    }\n    var pubkey = this.getSenderPublicKey();\n    this._from = ethUtil.publicToAddress(pubkey);\n    return this._from;\n  };\n\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getSenderPublicKey = function getSenderPublicKey() {\n    if (!this._senderPubKey || !this._senderPubKey.length) {\n      if (!this.verifySignature()) throw new Error('Invalid Signature');\n    }\n    return this._senderPubKey;\n  };\n\n  /**\n   * Determines if the signature is valid\n   * @return {Boolean}\n   */\n\n\n  Transaction.prototype.verifySignature = function verifySignature() {\n    var msgHash = this.hash(false);\n    // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {\n      return false;\n    }\n\n    try {\n      var v = ethUtil.bufferToInt(this.v);\n      if (this._chainId > 0) {\n        v -= this._chainId * 2 + 8;\n      }\n      this._senderPubKey = ethUtil.ecrecover(msgHash, v, this.r, this.s);\n    } catch (e) {\n      return false;\n    }\n\n    return !!this._senderPubKey;\n  };\n\n  /**\n   * sign a transaction with a given a private key\n   * @param {Buffer} privateKey\n   */\n\n\n  Transaction.prototype.sign = function sign(privateKey) {\n    var msgHash = this.hash(false);\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n    if (this._chainId > 0) {\n      sig.v += this._chainId * 2 + 8;\n    }\n    Object.assign(this, sig);\n  };\n\n  /**\n   * The amount of gas paid for the data in this tx\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getDataFee = function getDataFee() {\n    var data = this.raw[5];\n    var cost = new BN(0);\n    for (var i = 0; i < data.length; i++) {\n      data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);\n    }\n    return cost;\n  };\n\n  /**\n   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getBaseFee = function getBaseFee() {\n    var fee = this.getDataFee().iaddn(fees.txGas.v);\n    if (this._homestead && this.toCreationAddress()) {\n      fee.iaddn(fees.txCreation.v);\n    }\n    return fee;\n  };\n\n  /**\n   * the up front amount that an account must have for this transaction to be valid\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getUpfrontCost = function getUpfrontCost() {\n    return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));\n  };\n\n  /**\n   * validates the signature and checks to see if it has enough gas\n   * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean\n   * @return {Boolean|String}\n   */\n\n\n  Transaction.prototype.validate = function validate(stringError) {\n    var errors = [];\n    if (!this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n\n    if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {\n      errors.push(['gas limit is too low. Need at least ' + this.getBaseFee()]);\n    }\n\n    if (stringError === undefined || stringError === false) {\n      return errors.length === 0;\n    } else {\n      return errors.join(' ');\n    }\n  };\n\n  return Transaction;\n}();\n\nmodule.exports = Transaction;"],"mappings":"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"},"metadata":{},"sourceType":"script"}