{"ast":null,"code":"\"use strict\";\n\n// This file is imported from secp256k1 v3\n// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar BN = require(\"bn.js\");\nvar EC = require('elliptic').ec;\nvar ec = new EC('secp256k1');\nvar ecparams = ec.curve;\nexports.privateKeyExport = function (privateKey, compressed) {\n  if (compressed === void 0) {\n    compressed = true;\n  }\n  var d = new BN(privateKey);\n  if (d.ucmp(ecparams.n) >= 0) {\n    throw new Error(\"couldn't export to DER format\");\n  }\n  var point = ec.g.mul(d);\n  return toPublicKey(point.getX(), point.getY(), compressed);\n};\nexports.privateKeyModInverse = function (privateKey) {\n  var bn = new BN(privateKey);\n  if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {\n    throw new Error('private key range is invalid');\n  }\n  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);\n};\nexports.signatureImport = function (sigObj) {\n  var r = new BN(sigObj.r);\n  if (r.ucmp(ecparams.n) >= 0) {\n    r = new BN(0);\n  }\n  var s = new BN(sigObj.s);\n  if (s.ucmp(ecparams.n) >= 0) {\n    s = new BN(0);\n  }\n  return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);\n};\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n  if (compressed === void 0) {\n    compressed = true;\n  }\n  var point = ec.keyFromPublic(publicKey);\n  var scalar = new BN(privateKey);\n  if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {\n    throw new Error('scalar was invalid (zero or overflow)');\n  }\n  var shared = point.pub.mul(scalar);\n  return toPublicKey(shared.getX(), shared.getY(), compressed);\n};\nvar toPublicKey = function (x, y, compressed) {\n  var publicKey;\n  if (compressed) {\n    publicKey = Buffer.alloc(33);\n    publicKey[0] = y.isOdd() ? 0x03 : 0x02;\n    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);\n  } else {\n    publicKey = Buffer.alloc(65);\n    publicKey[0] = 0x04;\n    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);\n    y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);\n  }\n  return publicKey;\n};","map":{"version":3,"mappings":"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","names":["EC","require","ec","ecparams","curve","exports","privateKeyExport","privateKey","compressed","d","BN","ucmp","n","Error","point","g","mul","toPublicKey","getX","getY","privateKeyModInverse","bn","isZero","invm","toArrayLike","Buffer","signatureImport","sigObj","r","s","concat","ecdhUnsafe","publicKey","keyFromPublic","scalar","shared","pub","x","y","alloc","isOdd","copy"],"sourceRoot":"","sources":["../../src/secp256k1v3-lib/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}