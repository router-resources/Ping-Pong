{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeError = exports.isValidCode = exports.getMessageFromCode = exports.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;\nconst error_constants_1 = require(\"./error-constants\");\nconst classes_1 = require(\"./classes\");\nconst FALLBACK_ERROR_CODE = error_constants_1.errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n};\nexports.JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n */\nfunction getMessageFromCode(code) {\n  let fallbackMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FALLBACK_MESSAGE;\n  if (Number.isInteger(code)) {\n    const codeString = code.toString();\n    if (hasKey(error_constants_1.errorValues, codeString)) {\n      return error_constants_1.errorValues[codeString].message;\n    }\n    if (isJsonRpcServerError(code)) {\n      return exports.JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n  return fallbackMessage;\n}\nexports.getMessageFromCode = getMessageFromCode;\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n */\nfunction isValidCode(code) {\n  if (!Number.isInteger(code)) {\n    return false;\n  }\n  const codeString = code.toString();\n  if (error_constants_1.errorValues[codeString]) {\n    return true;\n  }\n  if (isJsonRpcServerError(code)) {\n    return true;\n  }\n  return false;\n}\nexports.isValidCode = isValidCode;\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n */\nfunction serializeError(error) {\n  let {\n    fallbackError = FALLBACK_ERROR,\n    shouldIncludeStack = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a, _b;\n  if (!fallbackError || !Number.isInteger(fallbackError.code) || typeof fallbackError.message !== 'string') {\n    throw new Error('Must provide fallback error with integer number code and string message.');\n  }\n  if (error instanceof classes_1.EthereumRpcError) {\n    return error.serialize();\n  }\n  const serialized = {};\n  if (error && typeof error === 'object' && !Array.isArray(error) && hasKey(error, 'code') && isValidCode(error.code)) {\n    const _error = error;\n    serialized.code = _error.code;\n    if (_error.message && typeof _error.message === 'string') {\n      serialized.message = _error.message;\n      if (hasKey(_error, 'data')) {\n        serialized.data = _error.data;\n      }\n    } else {\n      serialized.message = getMessageFromCode(serialized.code);\n      serialized.data = {\n        originalError: assignOriginalError(error)\n      };\n    }\n  } else {\n    serialized.code = fallbackError.code;\n    const message = (_a = error) === null || _a === void 0 ? void 0 : _a.message;\n    serialized.message = message && typeof message === 'string' ? message : fallbackError.message;\n    serialized.data = {\n      originalError: assignOriginalError(error)\n    };\n  }\n  const stack = (_b = error) === null || _b === void 0 ? void 0 : _b.stack;\n  if (shouldIncludeStack && error && stack && typeof stack === 'string') {\n    serialized.stack = stack;\n  }\n  return serialized;\n}\nexports.serializeError = serializeError;\n// Internal\nfunction isJsonRpcServerError(code) {\n  return code >= -32099 && code <= -32000;\n}\nfunction assignOriginalError(error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return Object.assign({}, error);\n  }\n  return error;\n}\nfunction hasKey(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}","map":{"version":3,"mappings":"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","names":["FALLBACK_ERROR_CODE","error_constants_1","rpc","internal","FALLBACK_MESSAGE","FALLBACK_ERROR","code","message","getMessageFromCode","exports","fallbackMessage","Number","isInteger","codeString","toString","hasKey","isJsonRpcServerError","isValidCode","serializeError","error","fallbackError","shouldIncludeStack","Error","classes_1","serialize","serialized","Array","isArray","_error","data","originalError","assignOriginalError","stack","Object","assign","obj","key","prototype","hasOwnProperty","call"],"sourceRoot":"","sources":["../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}