{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys2 = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _ParseFileEncode = require(\"./ParseFileEncode\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys2(object);\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var _context4, _context5;\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? _forEachInstanceProperty2(_context4 = ownKeys(Object(source), !0)).call(_context4, function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context5 = ownKeys(Object(source))).call(_context5, function (key) {\n      _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar ParseError = require('./ParseError').default;\n/*:: type Base64 = { base64: string };*/\n\n/*:: type Uri = { uri: string };*/\n\n/*:: type FileData = Array<number> | Base64 | Blob | Uri;*/\n\n/*:: export type FileSource =\n  | {\n      format: 'file',\n      file: Blob,\n      type: string,\n    }\n  | {\n      format: 'base64',\n      base64: string,\n      type: string,\n    }\n  | {\n      format: 'uri',\n      uri: string,\n      type: string,\n    };*/\n\nvar dataUriRegexp = /^data:([a-zA-Z]+\\/[-a-zA-Z0-9+.]+)(;charset=[a-zA-Z0-9\\-/]*)?;base64,/;\n/**\n * A Parse.File is a local representation of a file that is saved to the Parse\n * cloud.\n *\n * @alias Parse.File\n */\n\nvar ParseFile = /*#__PURE__*/function () {\n  /**\n   * @param name {String} The file's name. This will be prefixed by a unique\n   *     value once the file has finished saving. The file name must begin with\n   *     an alphanumeric character, and consist of alphanumeric characters,\n   *     periods, spaces, underscores, or dashes.\n   * @param data {Array} The data for the file, as either:\n   *     1. an Array of byte value Numbers, or\n   *     2. an Object like { base64: \"...\" } with a base64-encoded String.\n   *     3. an Object like { uri: \"...\" } with a uri String.\n   *     4. a File object selected with a file upload control. (3) only works\n   *        in Firefox 3.6+, Safari 6.0.2+, Chrome 7+, and IE 10+.\n   *        For example:\n   * <pre>\n   * var fileUploadControl = $(\"#profilePhotoFileUpload\")[0];\n   * if (fileUploadControl.files.length > 0) {\n   *   var file = fileUploadControl.files[0];\n   *   var name = \"photo.jpg\";\n   *   var parseFile = new Parse.File(name, file);\n   *   parseFile.save().then(function() {\n   *     // The file has been saved to Parse.\n   *   }, function(error) {\n   *     // The file either could not be read, or could not be saved to Parse.\n   *   });\n   * }</pre>\n   * @param type {String} Optional Content-Type header to use for the file. If\n   *     this is omitted, the content type will be inferred from the name's\n   *     extension.\n   * @param metadata {Object} Optional key value pairs to be stored with file object\n   * @param tags {Object} Optional key value pairs to be stored with file object\n   */\n  function ParseFile(name\n  /*: string*/, data\n  /*:: ?: FileData*/, type\n  /*:: ?: string*/, metadata\n  /*:: ?: Object*/, tags\n  /*:: ?: Object*/) {\n    (0, _classCallCheck2.default)(this, ParseFile);\n    (0, _defineProperty2.default)(this, \"_name\", void 0);\n    (0, _defineProperty2.default)(this, \"_url\", void 0);\n    (0, _defineProperty2.default)(this, \"_hash\", void 0);\n    (0, _defineProperty2.default)(this, \"_ipfs\", void 0);\n    (0, _defineProperty2.default)(this, \"_source\", void 0);\n    (0, _defineProperty2.default)(this, \"_previousSave\", void 0);\n    (0, _defineProperty2.default)(this, \"_data\", void 0);\n    (0, _defineProperty2.default)(this, \"_requestTask\", void 0);\n    (0, _defineProperty2.default)(this, \"_metadata\", void 0);\n    (0, _defineProperty2.default)(this, \"_tags\", void 0);\n    var specifiedType = type || '';\n    this._name = name;\n    this._metadata = metadata || {};\n    this._tags = tags || {};\n    if (data !== undefined) {\n      if ((0, _isArray.default)(data)) {\n        this._data = ParseFile.encodeBase64(data);\n        this._source = {\n          format: 'base64',\n          base64: this._data,\n          type: specifiedType\n        };\n      } else if (typeof Blob !== 'undefined' && data instanceof Blob) {\n        this._source = {\n          format: 'file',\n          file: data,\n          type: specifiedType\n        };\n      } else if (data && typeof data.uri === 'string' && data.uri !== undefined) {\n        this._source = {\n          format: 'uri',\n          uri: data.uri,\n          type: specifiedType\n        };\n      } else if (data && typeof data.base64 === 'string') {\n        var base64 = data.base64;\n        var commaIndex = (0, _indexOf.default)(base64).call(base64, ',');\n        if (commaIndex !== -1) {\n          var matches = dataUriRegexp.exec((0, _slice.default)(base64).call(base64, 0, commaIndex + 1)); // if data URI with type and charset, there will be 4 matches.\n\n          this._data = (0, _slice.default)(base64).call(base64, commaIndex + 1);\n          this._source = {\n            format: 'base64',\n            base64: this._data,\n            type: matches[1]\n          };\n        } else {\n          this._data = base64;\n          this._source = {\n            format: 'base64',\n            base64: base64,\n            type: specifiedType\n          };\n        }\n      } else {\n        throw new TypeError('Cannot create a Parse.File with that data.');\n      }\n    }\n  }\n  /**\n   * Return the data for the file, downloading it if not already present.\n   * Data is present if initialized with Byte Array, Base64 or Saved with Uri.\n   * Data is cleared if saved with File object selected with a file upload control\n   *\n   * @returns {Promise} Promise that is resolve with base64 data\n   */\n\n  (0, _createClass2.default)(ParseFile, [{\n    key: \"getData\",\n    value: function () {\n      var _getData = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n        var _this = this;\n        var options, controller, result;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._data) {\n                  _context.next = 2;\n                  break;\n                }\n                return _context.abrupt(\"return\", this._data);\n              case 2:\n                if (this._url) {\n                  _context.next = 4;\n                  break;\n                }\n                throw new Error('Cannot retrieve data for unsaved ParseFile.');\n              case 4:\n                options = {\n                  requestTask: function (task) {\n                    return _this._requestTask = task;\n                  }\n                };\n                controller = _CoreManager.default.getFileController();\n                _context.next = 8;\n                return controller.download(this._url, options);\n              case 8:\n                result = _context.sent;\n                this._data = result.base64;\n                return _context.abrupt(\"return\", this._data);\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      return function () {\n        return _getData.apply(this, arguments);\n      };\n    }()\n    /**\n     * Gets the name of the file. Before save is called, this is the filename\n     * given by the user. After save is called, that name gets prefixed with a\n     * unique identifier.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: \"name\",\n    value: function () /*: string*/\n    {\n      return this._name;\n    }\n    /**\n     * Gets the url of the file. It is only available after you save the file or\n     * after you get the file from a Parse.Object.\n     *\n     * @param {object} options An object to specify url options\n     * @returns {string}\n     */\n  }, {\n    key: \"url\",\n    value: function (options\n    /*:: ?: { forceSecure?: boolean }*/) /*: ?string*/\n    {\n      options = options || {};\n      if (!this._url) {\n        return;\n      }\n      if (options.forceSecure) {\n        return this._url.replace(/^http:\\/\\//i, 'https://');\n      }\n      return this._url;\n    }\n  }, {\n    key: \"ipfs\",\n    value: function () {\n      return this._ipfs;\n    }\n  }, {\n    key: \"hash\",\n    value: function () {\n      return this._hash;\n    }\n    /**\n     * Gets the metadata of the file.\n     *\n     * @returns {object}\n     */\n  }, {\n    key: \"metadata\",\n    value: function () /*: Object*/\n    {\n      return this._metadata;\n    }\n    /**\n     * Gets the tags of the file.\n     *\n     * @returns {object}\n     */\n  }, {\n    key: \"tags\",\n    value: function () /*: Object*/\n    {\n      return this._tags;\n    }\n    /**\n     * Saves the file to the Parse cloud.\n     *\n     * @param {object} options\n     *  * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *     behalf of a specific user.\n     *   <li>progress: In Browser only, callback for upload progress. For example:\n     * <pre>\n     * let parseFile = new Parse.File(name, file);\n     * parseFile.save({\n     *   progress: (progressValue, loaded, total, { type }) => {\n     *     if (type === \"upload\" && progressValue !== null) {\n     *       // Update the UI using progressValue\n     *     }\n     *   }\n     * });\n     * </pre>\n     * </ul>\n     * @returns {Promise} Promise that is resolved when the save finishes.\n     */\n  }, {\n    key: \"save\",\n    value: function (options\n    /*:: ?: FullOptions*/) {\n      var _this2 = this;\n      options = options || {};\n      options.requestTask = function (task) {\n        return _this2._requestTask = task;\n      };\n      options.metadata = this._metadata;\n      options.tags = this._tags;\n      var controller = _CoreManager.default.getFileController();\n      if (!this._previousSave) {\n        if (this._source.format === 'file') {\n          this._previousSave = controller.saveFile(this._name, this._source, options).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._hash = res.hash;\n            _this2._ipfs = res.ipfs;\n            _this2._data = null;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        } else if (this._source.format === 'uri') {\n          this._previousSave = controller.download(this._source.uri, options).then(function (result) {\n            if (!(result && result.base64)) {\n              return {};\n            }\n            var newSource = {\n              format: 'base64',\n              base64: result.base64,\n              type: result.contentType\n            };\n            _this2._data = result.base64;\n            _this2._requestTask = null;\n            return controller.saveBase64(_this2._name, newSource, options);\n          }).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._hash = res.hash;\n            _this2._ipfs = res.ipfs;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        } else {\n          this._previousSave = controller.saveBase64(this._name, this._source, options).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._hash = res.hash;\n            _this2._ipfs = res.ipfs;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        }\n      }\n      if (this._previousSave) {\n        return this._previousSave;\n      }\n    }\n  }, {\n    key: \"saveIPFS\",\n    value: function (options\n    /*:: ?: FullOptions*/) {\n      return this.save(_objectSpread(_objectSpread({}, options), {}, {\n        ipfs: true\n      }));\n    }\n    /**\n     * Aborts the request if it has already been sent.\n     */\n  }, {\n    key: \"cancel\",\n    value: function () {\n      if (this._requestTask && typeof this._requestTask.abort === 'function') {\n        this._requestTask.abort();\n      }\n      this._requestTask = null;\n    }\n    /**\n     * Deletes the file from the Parse cloud.\n     * In Cloud Code and Node only with Master Key.\n     *\n     * @param {object} options\n     *  * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     * <pre>\n     * @returns {Promise} Promise that is resolved when the delete finishes.\n     */\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _this3 = this;\n      var options\n      /*:: ?: FullOptions*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (!this._name) {\n        throw new ParseError(ParseError.FILE_DELETE_UNNAMED_ERROR, 'Cannot delete an unnamed file.');\n      }\n      var destroyOptions = {\n        useMasterKey: true\n      };\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getFileController();\n      return controller.deleteFile(this._name, destroyOptions).then(function () {\n        _this3._data = null;\n        _this3._requestTask = null;\n        return _this3;\n      });\n    }\n  }, {\n    key: \"toJSON\",\n    value: function () /*: { name: ?string, url: ?string }*/\n    {\n      return {\n        __type: 'File',\n        name: this._name,\n        url: this._url,\n        ipfs: this._ipfs,\n        hash: this._hash\n      };\n    }\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/) /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      } // Unsaved Files are never equal, since they will be saved to different URLs\n\n      return other instanceof ParseFile && this.name() === other.name() && this.url() === other.url() && typeof this.url() !== 'undefined';\n    }\n    /**\n     * Sets metadata to be saved with file object. Overwrites existing metadata\n     *\n     * @param {object} metadata Key value pairs to be stored with file object\n     */\n  }, {\n    key: \"setMetadata\",\n    value: function (metadata\n    /*: any*/) {\n      var _this4 = this;\n      if (metadata && (0, _typeof2.default)(metadata) === 'object') {\n        var _context2;\n        (0, _forEach.default)(_context2 = (0, _keys.default)(metadata)).call(_context2, function (key) {\n          _this4.addMetadata(key, metadata[key]);\n        });\n      }\n    }\n    /**\n     * Sets metadata to be saved with file object. Adds to existing metadata.\n     *\n     * @param {string} key key to store the metadata\n     * @param {*} value metadata\n     */\n  }, {\n    key: \"addMetadata\",\n    value: function (key\n    /*: string*/, value\n    /*: any*/) {\n      if (typeof key === 'string') {\n        this._metadata[key] = value;\n      }\n    }\n    /**\n     * Sets tags to be saved with file object. Overwrites existing tags\n     *\n     * @param {object} tags Key value pairs to be stored with file object\n     */\n  }, {\n    key: \"setTags\",\n    value: function (tags\n    /*: any*/) {\n      var _this5 = this;\n      if (tags && (0, _typeof2.default)(tags) === 'object') {\n        var _context3;\n        (0, _forEach.default)(_context3 = (0, _keys.default)(tags)).call(_context3, function (key) {\n          _this5.addTag(key, tags[key]);\n        });\n      }\n    }\n    /**\n     * Sets tags to be saved with file object. Adds to existing tags.\n     *\n     * @param {string} key key to store tags\n     * @param {*} value tag\n     */\n  }, {\n    key: \"addTag\",\n    value: function (key\n    /*: string*/, value\n    /*: string*/) {\n      if (typeof key === 'string') {\n        this._tags[key] = value;\n      }\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function (obj) /*: ParseFile*/\n    {\n      if (obj.__type !== 'File') {\n        throw new TypeError('JSON object does not represent a ParseFile');\n      }\n      var file = new ParseFile(obj.name);\n      file._url = obj.url;\n      file._hash = obj.hash;\n      file._ipfs = obj.ipfs;\n      return file;\n    }\n  }, {\n    key: \"encodeBase64\",\n    value: function (bytes\n    /*: Array<number>*/) /*: string*/\n    {\n      return (0, _ParseFileEncode.encodeBase64)(bytes);\n    }\n  }]);\n  return ParseFile;\n}();\n_CoreManager.default.setFileController(require('./ParseFileController.default'));\nvar _default = ParseFile;\nexports.default = _default;\nexports.b64Digit = _ParseFileEncode.b64Digit;","map":{"version":3,"names":["_Object$keys2","require","_Object$getOwnPropertySymbols","_filterInstanceProperty","_Object$getOwnPropertyDescriptor","_forEachInstanceProperty2","_Object$getOwnPropertyDescriptors","_Object$defineProperties","_Object$defineProperty","_interopRequireDefault","exports","value","default","_regenerator","_isArray","_indexOf","_slice","_forEach","_keys","_typeof2","_asyncToGenerator2","_classCallCheck2","_createClass2","_defineProperty2","_CoreManager","_ParseFileEncode","ownKeys","object","enumerableOnly","keys","symbols","call","sym","enumerable","push","apply","_objectSpread","target","i","arguments","length","_context4","_context5","source","Object","key","ParseError","dataUriRegexp","ParseFile","name","data","type","metadata","tags","specifiedType","_name","_metadata","_tags","undefined","_data","encodeBase64","_source","format","base64","Blob","file","uri","commaIndex","matches","exec","TypeError","_getData","mark","_callee","_this","options","controller","result","wrap","_context","prev","next","abrupt","_url","Error","requestTask","task","_requestTask","getFileController","download","sent","stop","forceSecure","replace","_ipfs","_hash","_this2","_previousSave","saveFile","then","res","url","hash","ipfs","newSource","contentType","saveBase64","save","abort","_this3","FILE_DELETE_UNNAMED_ERROR","destroyOptions","useMasterKey","hasOwnProperty","deleteFile","__type","other","_this4","_context2","addMetadata","_this5","_context3","addTag","obj","bytes","setFileController","_default","b64Digit"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/moralis/lib/browser/ParseFile.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$keys2 = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\n\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\n\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseFileEncode = require(\"./ParseFileEncode\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys2(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var _context4, _context5;\n\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? _forEachInstanceProperty2(_context4 = ownKeys(Object(source), !0)).call(_context4, function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context5 = ownKeys(Object(source))).call(_context5, function (key) {\n      _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar ParseError = require('./ParseError').default;\n/*:: type Base64 = { base64: string };*/\n\n/*:: type Uri = { uri: string };*/\n\n/*:: type FileData = Array<number> | Base64 | Blob | Uri;*/\n\n/*:: export type FileSource =\n  | {\n      format: 'file',\n      file: Blob,\n      type: string,\n    }\n  | {\n      format: 'base64',\n      base64: string,\n      type: string,\n    }\n  | {\n      format: 'uri',\n      uri: string,\n      type: string,\n    };*/\n\n\nvar dataUriRegexp = /^data:([a-zA-Z]+\\/[-a-zA-Z0-9+.]+)(;charset=[a-zA-Z0-9\\-/]*)?;base64,/;\n/**\n * A Parse.File is a local representation of a file that is saved to the Parse\n * cloud.\n *\n * @alias Parse.File\n */\n\nvar ParseFile = /*#__PURE__*/function () {\n  /**\n   * @param name {String} The file's name. This will be prefixed by a unique\n   *     value once the file has finished saving. The file name must begin with\n   *     an alphanumeric character, and consist of alphanumeric characters,\n   *     periods, spaces, underscores, or dashes.\n   * @param data {Array} The data for the file, as either:\n   *     1. an Array of byte value Numbers, or\n   *     2. an Object like { base64: \"...\" } with a base64-encoded String.\n   *     3. an Object like { uri: \"...\" } with a uri String.\n   *     4. a File object selected with a file upload control. (3) only works\n   *        in Firefox 3.6+, Safari 6.0.2+, Chrome 7+, and IE 10+.\n   *        For example:\n   * <pre>\n   * var fileUploadControl = $(\"#profilePhotoFileUpload\")[0];\n   * if (fileUploadControl.files.length > 0) {\n   *   var file = fileUploadControl.files[0];\n   *   var name = \"photo.jpg\";\n   *   var parseFile = new Parse.File(name, file);\n   *   parseFile.save().then(function() {\n   *     // The file has been saved to Parse.\n   *   }, function(error) {\n   *     // The file either could not be read, or could not be saved to Parse.\n   *   });\n   * }</pre>\n   * @param type {String} Optional Content-Type header to use for the file. If\n   *     this is omitted, the content type will be inferred from the name's\n   *     extension.\n   * @param metadata {Object} Optional key value pairs to be stored with file object\n   * @param tags {Object} Optional key value pairs to be stored with file object\n   */\n  function ParseFile(name\n  /*: string*/\n  , data\n  /*:: ?: FileData*/\n  , type\n  /*:: ?: string*/\n  , metadata\n  /*:: ?: Object*/\n  , tags\n  /*:: ?: Object*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseFile);\n    (0, _defineProperty2.default)(this, \"_name\", void 0);\n    (0, _defineProperty2.default)(this, \"_url\", void 0);\n    (0, _defineProperty2.default)(this, \"_hash\", void 0);\n    (0, _defineProperty2.default)(this, \"_ipfs\", void 0);\n    (0, _defineProperty2.default)(this, \"_source\", void 0);\n    (0, _defineProperty2.default)(this, \"_previousSave\", void 0);\n    (0, _defineProperty2.default)(this, \"_data\", void 0);\n    (0, _defineProperty2.default)(this, \"_requestTask\", void 0);\n    (0, _defineProperty2.default)(this, \"_metadata\", void 0);\n    (0, _defineProperty2.default)(this, \"_tags\", void 0);\n    var specifiedType = type || '';\n    this._name = name;\n    this._metadata = metadata || {};\n    this._tags = tags || {};\n\n    if (data !== undefined) {\n      if ((0, _isArray.default)(data)) {\n        this._data = ParseFile.encodeBase64(data);\n        this._source = {\n          format: 'base64',\n          base64: this._data,\n          type: specifiedType\n        };\n      } else if (typeof Blob !== 'undefined' && data instanceof Blob) {\n        this._source = {\n          format: 'file',\n          file: data,\n          type: specifiedType\n        };\n      } else if (data && typeof data.uri === 'string' && data.uri !== undefined) {\n        this._source = {\n          format: 'uri',\n          uri: data.uri,\n          type: specifiedType\n        };\n      } else if (data && typeof data.base64 === 'string') {\n        var base64 = data.base64;\n        var commaIndex = (0, _indexOf.default)(base64).call(base64, ',');\n\n        if (commaIndex !== -1) {\n          var matches = dataUriRegexp.exec((0, _slice.default)(base64).call(base64, 0, commaIndex + 1)); // if data URI with type and charset, there will be 4 matches.\n\n          this._data = (0, _slice.default)(base64).call(base64, commaIndex + 1);\n          this._source = {\n            format: 'base64',\n            base64: this._data,\n            type: matches[1]\n          };\n        } else {\n          this._data = base64;\n          this._source = {\n            format: 'base64',\n            base64: base64,\n            type: specifiedType\n          };\n        }\n      } else {\n        throw new TypeError('Cannot create a Parse.File with that data.');\n      }\n    }\n  }\n  /**\n   * Return the data for the file, downloading it if not already present.\n   * Data is present if initialized with Byte Array, Base64 or Saved with Uri.\n   * Data is cleared if saved with File object selected with a file upload control\n   *\n   * @returns {Promise} Promise that is resolve with base64 data\n   */\n\n\n  (0, _createClass2.default)(ParseFile, [{\n    key: \"getData\",\n    value: function () {\n      var _getData = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n        var _this = this;\n\n        var options, controller, result;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._data) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this._data);\n\n              case 2:\n                if (this._url) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error('Cannot retrieve data for unsaved ParseFile.');\n\n              case 4:\n                options = {\n                  requestTask: function (task) {\n                    return _this._requestTask = task;\n                  }\n                };\n                controller = _CoreManager.default.getFileController();\n                _context.next = 8;\n                return controller.download(this._url, options);\n\n              case 8:\n                result = _context.sent;\n                this._data = result.base64;\n                return _context.abrupt(\"return\", this._data);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _getData.apply(this, arguments);\n      };\n    }()\n    /**\n     * Gets the name of the file. Before save is called, this is the filename\n     * given by the user. After save is called, that name gets prefixed with a\n     * unique identifier.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"name\",\n    value: function ()\n    /*: string*/\n    {\n      return this._name;\n    }\n    /**\n     * Gets the url of the file. It is only available after you save the file or\n     * after you get the file from a Parse.Object.\n     *\n     * @param {object} options An object to specify url options\n     * @returns {string}\n     */\n\n  }, {\n    key: \"url\",\n    value: function (options\n    /*:: ?: { forceSecure?: boolean }*/\n    )\n    /*: ?string*/\n    {\n      options = options || {};\n\n      if (!this._url) {\n        return;\n      }\n\n      if (options.forceSecure) {\n        return this._url.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      return this._url;\n    }\n  }, {\n    key: \"ipfs\",\n    value: function () {\n      return this._ipfs;\n    }\n  }, {\n    key: \"hash\",\n    value: function () {\n      return this._hash;\n    }\n    /**\n     * Gets the metadata of the file.\n     *\n     * @returns {object}\n     */\n\n  }, {\n    key: \"metadata\",\n    value: function ()\n    /*: Object*/\n    {\n      return this._metadata;\n    }\n    /**\n     * Gets the tags of the file.\n     *\n     * @returns {object}\n     */\n\n  }, {\n    key: \"tags\",\n    value: function ()\n    /*: Object*/\n    {\n      return this._tags;\n    }\n    /**\n     * Saves the file to the Parse cloud.\n     *\n     * @param {object} options\n     *  * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *     behalf of a specific user.\n     *   <li>progress: In Browser only, callback for upload progress. For example:\n     * <pre>\n     * let parseFile = new Parse.File(name, file);\n     * parseFile.save({\n     *   progress: (progressValue, loaded, total, { type }) => {\n     *     if (type === \"upload\" && progressValue !== null) {\n     *       // Update the UI using progressValue\n     *     }\n     *   }\n     * });\n     * </pre>\n     * </ul>\n     * @returns {Promise} Promise that is resolved when the save finishes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    ) {\n      var _this2 = this;\n\n      options = options || {};\n\n      options.requestTask = function (task) {\n        return _this2._requestTask = task;\n      };\n\n      options.metadata = this._metadata;\n      options.tags = this._tags;\n\n      var controller = _CoreManager.default.getFileController();\n\n      if (!this._previousSave) {\n        if (this._source.format === 'file') {\n          this._previousSave = controller.saveFile(this._name, this._source, options).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._hash = res.hash;\n            _this2._ipfs = res.ipfs;\n            _this2._data = null;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        } else if (this._source.format === 'uri') {\n          this._previousSave = controller.download(this._source.uri, options).then(function (result) {\n            if (!(result && result.base64)) {\n              return {};\n            }\n\n            var newSource = {\n              format: 'base64',\n              base64: result.base64,\n              type: result.contentType\n            };\n            _this2._data = result.base64;\n            _this2._requestTask = null;\n            return controller.saveBase64(_this2._name, newSource, options);\n          }).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._hash = res.hash;\n            _this2._ipfs = res.ipfs;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        } else {\n          this._previousSave = controller.saveBase64(this._name, this._source, options).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._hash = res.hash;\n            _this2._ipfs = res.ipfs;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        }\n      }\n\n      if (this._previousSave) {\n        return this._previousSave;\n      }\n    }\n  }, {\n    key: \"saveIPFS\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    ) {\n      return this.save(_objectSpread(_objectSpread({}, options), {}, {\n        ipfs: true\n      }));\n    }\n    /**\n     * Aborts the request if it has already been sent.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function () {\n      if (this._requestTask && typeof this._requestTask.abort === 'function') {\n        this._requestTask.abort();\n      }\n\n      this._requestTask = null;\n    }\n    /**\n     * Deletes the file from the Parse cloud.\n     * In Cloud Code and Node only with Master Key.\n     *\n     * @param {object} options\n     *  * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     * <pre>\n     * @returns {Promise} Promise that is resolved when the delete finishes.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _this3 = this;\n\n      var options\n      /*:: ?: FullOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this._name) {\n        throw new ParseError(ParseError.FILE_DELETE_UNNAMED_ERROR, 'Cannot delete an unnamed file.');\n      }\n\n      var destroyOptions = {\n        useMasterKey: true\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getFileController();\n\n      return controller.deleteFile(this._name, destroyOptions).then(function () {\n        _this3._data = null;\n        _this3._requestTask = null;\n        return _this3;\n      });\n    }\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { name: ?string, url: ?string }*/\n    {\n      return {\n        __type: 'File',\n        name: this._name,\n        url: this._url,\n        ipfs: this._ipfs,\n        hash: this._hash\n      };\n    }\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      } // Unsaved Files are never equal, since they will be saved to different URLs\n\n\n      return other instanceof ParseFile && this.name() === other.name() && this.url() === other.url() && typeof this.url() !== 'undefined';\n    }\n    /**\n     * Sets metadata to be saved with file object. Overwrites existing metadata\n     *\n     * @param {object} metadata Key value pairs to be stored with file object\n     */\n\n  }, {\n    key: \"setMetadata\",\n    value: function (metadata\n    /*: any*/\n    ) {\n      var _this4 = this;\n\n      if (metadata && (0, _typeof2.default)(metadata) === 'object') {\n        var _context2;\n\n        (0, _forEach.default)(_context2 = (0, _keys.default)(metadata)).call(_context2, function (key) {\n          _this4.addMetadata(key, metadata[key]);\n        });\n      }\n    }\n    /**\n     * Sets metadata to be saved with file object. Adds to existing metadata.\n     *\n     * @param {string} key key to store the metadata\n     * @param {*} value metadata\n     */\n\n  }, {\n    key: \"addMetadata\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: any*/\n    ) {\n      if (typeof key === 'string') {\n        this._metadata[key] = value;\n      }\n    }\n    /**\n     * Sets tags to be saved with file object. Overwrites existing tags\n     *\n     * @param {object} tags Key value pairs to be stored with file object\n     */\n\n  }, {\n    key: \"setTags\",\n    value: function (tags\n    /*: any*/\n    ) {\n      var _this5 = this;\n\n      if (tags && (0, _typeof2.default)(tags) === 'object') {\n        var _context3;\n\n        (0, _forEach.default)(_context3 = (0, _keys.default)(tags)).call(_context3, function (key) {\n          _this5.addTag(key, tags[key]);\n        });\n      }\n    }\n    /**\n     * Sets tags to be saved with file object. Adds to existing tags.\n     *\n     * @param {string} key key to store tags\n     * @param {*} value tag\n     */\n\n  }, {\n    key: \"addTag\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    ) {\n      if (typeof key === 'string') {\n        this._tags[key] = value;\n      }\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function (obj)\n    /*: ParseFile*/\n    {\n      if (obj.__type !== 'File') {\n        throw new TypeError('JSON object does not represent a ParseFile');\n      }\n\n      var file = new ParseFile(obj.name);\n      file._url = obj.url;\n      file._hash = obj.hash;\n      file._ipfs = obj.ipfs;\n      return file;\n    }\n  }, {\n    key: \"encodeBase64\",\n    value: function (bytes\n    /*: Array<number>*/\n    )\n    /*: string*/\n    {\n      return (0, _ParseFileEncode.encodeBase64)(bytes);\n    }\n  }]);\n  return ParseFile;\n}();\n\n_CoreManager.default.setFileController(require('./ParseFileController.default'));\n\nvar _default = ParseFile;\nexports.default = _default;\nexports.b64Digit = _ParseFileEncode.b64Digit;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,aAAa,GAAGC,OAAO,CAAC,mDAAmD,CAAC;AAEhF,IAAIC,6BAA6B,GAAGD,OAAO,CAAC,uEAAuE,CAAC;AAEpH,IAAIE,uBAAuB,GAAGF,OAAO,CAAC,uDAAuD,CAAC;AAE9F,IAAIG,gCAAgC,GAAGH,OAAO,CAAC,0EAA0E,CAAC;AAE1H,IAAII,yBAAyB,GAAGJ,OAAO,CAAC,yDAAyD,CAAC;AAElG,IAAIK,iCAAiC,GAAGL,OAAO,CAAC,2EAA2E,CAAC;AAE5H,IAAIM,wBAAwB,GAAGN,OAAO,CAAC,gEAAgE,CAAC;AAExG,IAAIO,sBAAsB,GAAGP,OAAO,CAAC,8DAA8D,CAAC;AAEpG,IAAIQ,sBAAsB,GAAGR,OAAO,CAAC,sDAAsD,CAAC;AAE5FO,sBAAsB,CAACE,OAAO,EAAE,YAAY,EAAE;EAC5CC,KAAK,EAAE;AACT,CAAC,CAAC;AAEFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AAExB,IAAIC,YAAY,GAAGJ,sBAAsB,CAACR,OAAO,CAAC,oCAAoC,CAAC,CAAC;AAExF,IAAIa,QAAQ,GAAGL,sBAAsB,CAACR,OAAO,CAAC,sDAAsD,CAAC,CAAC;AAEtG,IAAIc,QAAQ,GAAGN,sBAAsB,CAACR,OAAO,CAAC,yDAAyD,CAAC,CAAC;AAEzG,IAAIe,MAAM,GAAGP,sBAAsB,CAACR,OAAO,CAAC,sDAAsD,CAAC,CAAC;AAEpG,IAAIgB,QAAQ,GAAGR,sBAAsB,CAACR,OAAO,CAAC,yDAAyD,CAAC,CAAC;AAEzG,IAAIiB,KAAK,GAAGT,sBAAsB,CAACR,OAAO,CAAC,mDAAmD,CAAC,CAAC;AAEhG,IAAIkB,QAAQ,GAAGV,sBAAsB,CAACR,OAAO,CAAC,uCAAuC,CAAC,CAAC;AAEvF,IAAImB,kBAAkB,GAAGX,sBAAsB,CAACR,OAAO,CAAC,iDAAiD,CAAC,CAAC;AAE3G,IAAIoB,gBAAgB,GAAGZ,sBAAsB,CAACR,OAAO,CAAC,+CAA+C,CAAC,CAAC;AAEvG,IAAIqB,aAAa,GAAGb,sBAAsB,CAACR,OAAO,CAAC,4CAA4C,CAAC,CAAC;AAEjG,IAAIsB,gBAAgB,GAAGd,sBAAsB,CAACR,OAAO,CAAC,+CAA+C,CAAC,CAAC;AAEvG,IAAIuB,YAAY,GAAGf,sBAAsB,CAACR,OAAO,CAAC,eAAe,CAAC,CAAC;AAEnE,IAAIwB,gBAAgB,GAAGxB,OAAO,CAAC,mBAAmB,CAAC;AAEnD,SAASyB,OAAO,CAACC,MAAM,EAAEC,cAAc,EAAE;EACvC,IAAIC,IAAI,GAAG7B,aAAa,CAAC2B,MAAM,CAAC;EAEhC,IAAIzB,6BAA6B,EAAE;IACjC,IAAI4B,OAAO,GAAG5B,6BAA6B,CAACyB,MAAM,CAAC;IAEnDC,cAAc,KAAKE,OAAO,GAAG3B,uBAAuB,CAAC2B,OAAO,CAAC,CAACC,IAAI,CAACD,OAAO,EAAE,UAAUE,GAAG,EAAE;MACzF,OAAO5B,gCAAgC,CAACuB,MAAM,EAAEK,GAAG,CAAC,CAACC,UAAU;IACjE,CAAC,CAAC,CAAC,EAAEJ,IAAI,CAACK,IAAI,CAACC,KAAK,CAACN,IAAI,EAAEC,OAAO,CAAC;EACrC;EAEA,OAAOD,IAAI;AACb;AAEA,SAASO,aAAa,CAACC,MAAM,EAAE;EAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;IACzC,IAAIG,SAAS,EAAEC,SAAS;IAExB,IAAIC,MAAM,GAAG,IAAI,IAAIJ,SAAS,CAACD,CAAC,CAAC,GAAGC,SAAS,CAACD,CAAC,CAAC,GAAG,CAAC,CAAC;IACrDA,CAAC,GAAG,CAAC,GAAGjC,yBAAyB,CAACoC,SAAS,GAAGf,OAAO,CAACkB,MAAM,CAACD,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAACZ,IAAI,CAACU,SAAS,EAAE,UAAUI,GAAG,EAAE;MACxG,CAAC,CAAC,EAAEtB,gBAAgB,CAACX,OAAO,EAAEyB,MAAM,EAAEQ,GAAG,EAAEF,MAAM,CAACE,GAAG,CAAC,CAAC;IACzD,CAAC,CAAC,GAAGvC,iCAAiC,GAAGC,wBAAwB,CAAC8B,MAAM,EAAE/B,iCAAiC,CAACqC,MAAM,CAAC,CAAC,GAAGtC,yBAAyB,CAACqC,SAAS,GAAGhB,OAAO,CAACkB,MAAM,CAACD,MAAM,CAAC,CAAC,CAAC,CAACZ,IAAI,CAACW,SAAS,EAAE,UAAUG,GAAG,EAAE;MACnNrC,sBAAsB,CAAC6B,MAAM,EAAEQ,GAAG,EAAEzC,gCAAgC,CAACuC,MAAM,EAAEE,GAAG,CAAC,CAAC;IACpF,CAAC,CAAC;EACJ;EAEA,OAAOR,MAAM;AACf;AAEA,IAAIS,UAAU,GAAG7C,OAAO,CAAC,cAAc,CAAC,CAACW,OAAO;AAChD;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAImC,aAAa,GAAG,uEAAuE;AAC3F;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GAAG,aAAa,YAAY;EACvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,SAAS,CAACC;EACnB,cACEC;EACF,oBACEC;EACF,kBACEC;EACF,kBACEC;EACF,kBACE;IACA,CAAC,CAAC,EAAEhC,gBAAgB,CAACT,OAAO,EAAE,IAAI,EAAEoC,SAAS,CAAC;IAC9C,CAAC,CAAC,EAAEzB,gBAAgB,CAACX,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC,CAAC,EAAEW,gBAAgB,CAACX,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC,CAAC,EAAEW,gBAAgB,CAACX,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC,CAAC,EAAEW,gBAAgB,CAACX,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC,CAAC,EAAEW,gBAAgB,CAACX,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACtD,CAAC,CAAC,EAAEW,gBAAgB,CAACX,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;IAC5D,CAAC,CAAC,EAAEW,gBAAgB,CAACX,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC,CAAC,EAAEW,gBAAgB,CAACX,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;IAC3D,CAAC,CAAC,EAAEW,gBAAgB,CAACX,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;IACxD,CAAC,CAAC,EAAEW,gBAAgB,CAACX,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACpD,IAAI0C,aAAa,GAAGH,IAAI,IAAI,EAAE;IAC9B,IAAI,CAACI,KAAK,GAAGN,IAAI;IACjB,IAAI,CAACO,SAAS,GAAGJ,QAAQ,IAAI,CAAC,CAAC;IAC/B,IAAI,CAACK,KAAK,GAAGJ,IAAI,IAAI,CAAC,CAAC;IAEvB,IAAIH,IAAI,KAAKQ,SAAS,EAAE;MACtB,IAAI,CAAC,CAAC,EAAE5C,QAAQ,CAACF,OAAO,EAAEsC,IAAI,CAAC,EAAE;QAC/B,IAAI,CAACS,KAAK,GAAGX,SAAS,CAACY,YAAY,CAACV,IAAI,CAAC;QACzC,IAAI,CAACW,OAAO,GAAG;UACbC,MAAM,EAAE,QAAQ;UAChBC,MAAM,EAAE,IAAI,CAACJ,KAAK;UAClBR,IAAI,EAAEG;QACR,CAAC;MACH,CAAC,MAAM,IAAI,OAAOU,IAAI,KAAK,WAAW,IAAId,IAAI,YAAYc,IAAI,EAAE;QAC9D,IAAI,CAACH,OAAO,GAAG;UACbC,MAAM,EAAE,MAAM;UACdG,IAAI,EAAEf,IAAI;UACVC,IAAI,EAAEG;QACR,CAAC;MACH,CAAC,MAAM,IAAIJ,IAAI,IAAI,OAAOA,IAAI,CAACgB,GAAG,KAAK,QAAQ,IAAIhB,IAAI,CAACgB,GAAG,KAAKR,SAAS,EAAE;QACzE,IAAI,CAACG,OAAO,GAAG;UACbC,MAAM,EAAE,KAAK;UACbI,GAAG,EAAEhB,IAAI,CAACgB,GAAG;UACbf,IAAI,EAAEG;QACR,CAAC;MACH,CAAC,MAAM,IAAIJ,IAAI,IAAI,OAAOA,IAAI,CAACa,MAAM,KAAK,QAAQ,EAAE;QAClD,IAAIA,MAAM,GAAGb,IAAI,CAACa,MAAM;QACxB,IAAII,UAAU,GAAG,CAAC,CAAC,EAAEpD,QAAQ,CAACH,OAAO,EAAEmD,MAAM,CAAC,CAAChC,IAAI,CAACgC,MAAM,EAAE,GAAG,CAAC;QAEhE,IAAII,UAAU,KAAK,CAAC,CAAC,EAAE;UACrB,IAAIC,OAAO,GAAGrB,aAAa,CAACsB,IAAI,CAAC,CAAC,CAAC,EAAErD,MAAM,CAACJ,OAAO,EAAEmD,MAAM,CAAC,CAAChC,IAAI,CAACgC,MAAM,EAAE,CAAC,EAAEI,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;UAE/F,IAAI,CAACR,KAAK,GAAG,CAAC,CAAC,EAAE3C,MAAM,CAACJ,OAAO,EAAEmD,MAAM,CAAC,CAAChC,IAAI,CAACgC,MAAM,EAAEI,UAAU,GAAG,CAAC,CAAC;UACrE,IAAI,CAACN,OAAO,GAAG;YACbC,MAAM,EAAE,QAAQ;YAChBC,MAAM,EAAE,IAAI,CAACJ,KAAK;YAClBR,IAAI,EAAEiB,OAAO,CAAC,CAAC;UACjB,CAAC;QACH,CAAC,MAAM;UACL,IAAI,CAACT,KAAK,GAAGI,MAAM;UACnB,IAAI,CAACF,OAAO,GAAG;YACbC,MAAM,EAAE,QAAQ;YAChBC,MAAM,EAAEA,MAAM;YACdZ,IAAI,EAAEG;UACR,CAAC;QACH;MACF,CAAC,MAAM;QACL,MAAM,IAAIgB,SAAS,CAAC,4CAA4C,CAAC;MACnE;IACF;EACF;EACA;AACF;AACA;AACA;AACA;AACA;AACA;;EAGE,CAAC,CAAC,EAAEhD,aAAa,CAACV,OAAO,EAAEoC,SAAS,EAAE,CAAC;IACrCH,GAAG,EAAE,SAAS;IACdlC,KAAK,EAAE,YAAY;MACjB,IAAI4D,QAAQ,GAAG,CAAC,CAAC,EAAEnD,kBAAkB,CAACR,OAAO,GAAG,aAAaC,YAAY,CAACD,OAAO,CAAC4D,IAAI,CAAC,SAASC,OAAO,GAAG;QACxG,IAAIC,KAAK,GAAG,IAAI;QAEhB,IAAIC,OAAO,EAAEC,UAAU,EAAEC,MAAM;QAC/B,OAAOhE,YAAY,CAACD,OAAO,CAACkE,IAAI,CAAC,UAAUC,QAAQ,EAAE;UACnD,OAAO,CAAC,EAAE;YACR,QAAQA,QAAQ,CAACC,IAAI,GAAGD,QAAQ,CAACE,IAAI;cACnC,KAAK,CAAC;gBACJ,IAAI,CAAC,IAAI,CAACtB,KAAK,EAAE;kBACfoB,QAAQ,CAACE,IAAI,GAAG,CAAC;kBACjB;gBACF;gBAEA,OAAOF,QAAQ,CAACG,MAAM,CAAC,QAAQ,EAAE,IAAI,CAACvB,KAAK,CAAC;cAE9C,KAAK,CAAC;gBACJ,IAAI,IAAI,CAACwB,IAAI,EAAE;kBACbJ,QAAQ,CAACE,IAAI,GAAG,CAAC;kBACjB;gBACF;gBAEA,MAAM,IAAIG,KAAK,CAAC,6CAA6C,CAAC;cAEhE,KAAK,CAAC;gBACJT,OAAO,GAAG;kBACRU,WAAW,EAAE,UAAUC,IAAI,EAAE;oBAC3B,OAAOZ,KAAK,CAACa,YAAY,GAAGD,IAAI;kBAClC;gBACF,CAAC;gBACDV,UAAU,GAAGpD,YAAY,CAACZ,OAAO,CAAC4E,iBAAiB,EAAE;gBACrDT,QAAQ,CAACE,IAAI,GAAG,CAAC;gBACjB,OAAOL,UAAU,CAACa,QAAQ,CAAC,IAAI,CAACN,IAAI,EAAER,OAAO,CAAC;cAEhD,KAAK,CAAC;gBACJE,MAAM,GAAGE,QAAQ,CAACW,IAAI;gBACtB,IAAI,CAAC/B,KAAK,GAAGkB,MAAM,CAACd,MAAM;gBAC1B,OAAOgB,QAAQ,CAACG,MAAM,CAAC,QAAQ,EAAE,IAAI,CAACvB,KAAK,CAAC;cAE9C,KAAK,EAAE;cACP,KAAK,KAAK;gBACR,OAAOoB,QAAQ,CAACY,IAAI,EAAE;YAAC;UAE7B;QACF,CAAC,EAAElB,OAAO,EAAE,IAAI,CAAC;MACnB,CAAC,CAAC,CAAC;MAEH,OAAO,YAAY;QACjB,OAAOF,QAAQ,CAACpC,KAAK,CAAC,IAAI,EAAEI,SAAS,CAAC;MACxC,CAAC;IACH,CAAC;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDM,GAAG,EAAE,MAAM;IACXlC,KAAK,EAAE,YACP;IACA;MACE,OAAO,IAAI,CAAC4C,KAAK;IACnB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDV,GAAG,EAAE,KAAK;IACVlC,KAAK,EAAE,UAAUgE;IACjB,qCAEA;IACA;MACEA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;MAEvB,IAAI,CAAC,IAAI,CAACQ,IAAI,EAAE;QACd;MACF;MAEA,IAAIR,OAAO,CAACiB,WAAW,EAAE;QACvB,OAAO,IAAI,CAACT,IAAI,CAACU,OAAO,CAAC,aAAa,EAAE,UAAU,CAAC;MACrD;MAEA,OAAO,IAAI,CAACV,IAAI;IAClB;EACF,CAAC,EAAE;IACDtC,GAAG,EAAE,MAAM;IACXlC,KAAK,EAAE,YAAY;MACjB,OAAO,IAAI,CAACmF,KAAK;IACnB;EACF,CAAC,EAAE;IACDjD,GAAG,EAAE,MAAM;IACXlC,KAAK,EAAE,YAAY;MACjB,OAAO,IAAI,CAACoF,KAAK;IACnB;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDlD,GAAG,EAAE,UAAU;IACflC,KAAK,EAAE,YACP;IACA;MACE,OAAO,IAAI,CAAC6C,SAAS;IACvB;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDX,GAAG,EAAE,MAAM;IACXlC,KAAK,EAAE,YACP;IACA;MACE,OAAO,IAAI,CAAC8C,KAAK;IACnB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDZ,GAAG,EAAE,MAAM;IACXlC,KAAK,EAAE,UAAUgE;IACjB,uBACE;MACA,IAAIqB,MAAM,GAAG,IAAI;MAEjBrB,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;MAEvBA,OAAO,CAACU,WAAW,GAAG,UAAUC,IAAI,EAAE;QACpC,OAAOU,MAAM,CAACT,YAAY,GAAGD,IAAI;MACnC,CAAC;MAEDX,OAAO,CAACvB,QAAQ,GAAG,IAAI,CAACI,SAAS;MACjCmB,OAAO,CAACtB,IAAI,GAAG,IAAI,CAACI,KAAK;MAEzB,IAAImB,UAAU,GAAGpD,YAAY,CAACZ,OAAO,CAAC4E,iBAAiB,EAAE;MAEzD,IAAI,CAAC,IAAI,CAACS,aAAa,EAAE;QACvB,IAAI,IAAI,CAACpC,OAAO,CAACC,MAAM,KAAK,MAAM,EAAE;UAClC,IAAI,CAACmC,aAAa,GAAGrB,UAAU,CAACsB,QAAQ,CAAC,IAAI,CAAC3C,KAAK,EAAE,IAAI,CAACM,OAAO,EAAEc,OAAO,CAAC,CAACwB,IAAI,CAAC,UAAUC,GAAG,EAAE;YAC9FJ,MAAM,CAACzC,KAAK,GAAG6C,GAAG,CAACnD,IAAI;YACvB+C,MAAM,CAACb,IAAI,GAAGiB,GAAG,CAACC,GAAG;YACrBL,MAAM,CAACD,KAAK,GAAGK,GAAG,CAACE,IAAI;YACvBN,MAAM,CAACF,KAAK,GAAGM,GAAG,CAACG,IAAI;YACvBP,MAAM,CAACrC,KAAK,GAAG,IAAI;YACnBqC,MAAM,CAACT,YAAY,GAAG,IAAI;YAC1B,OAAOS,MAAM;UACf,CAAC,CAAC;QACJ,CAAC,MAAM,IAAI,IAAI,CAACnC,OAAO,CAACC,MAAM,KAAK,KAAK,EAAE;UACxC,IAAI,CAACmC,aAAa,GAAGrB,UAAU,CAACa,QAAQ,CAAC,IAAI,CAAC5B,OAAO,CAACK,GAAG,EAAES,OAAO,CAAC,CAACwB,IAAI,CAAC,UAAUtB,MAAM,EAAE;YACzF,IAAI,EAAEA,MAAM,IAAIA,MAAM,CAACd,MAAM,CAAC,EAAE;cAC9B,OAAO,CAAC,CAAC;YACX;YAEA,IAAIyC,SAAS,GAAG;cACd1C,MAAM,EAAE,QAAQ;cAChBC,MAAM,EAAEc,MAAM,CAACd,MAAM;cACrBZ,IAAI,EAAE0B,MAAM,CAAC4B;YACf,CAAC;YACDT,MAAM,CAACrC,KAAK,GAAGkB,MAAM,CAACd,MAAM;YAC5BiC,MAAM,CAACT,YAAY,GAAG,IAAI;YAC1B,OAAOX,UAAU,CAAC8B,UAAU,CAACV,MAAM,CAACzC,KAAK,EAAEiD,SAAS,EAAE7B,OAAO,CAAC;UAChE,CAAC,CAAC,CAACwB,IAAI,CAAC,UAAUC,GAAG,EAAE;YACrBJ,MAAM,CAACzC,KAAK,GAAG6C,GAAG,CAACnD,IAAI;YACvB+C,MAAM,CAACb,IAAI,GAAGiB,GAAG,CAACC,GAAG;YACrBL,MAAM,CAACD,KAAK,GAAGK,GAAG,CAACE,IAAI;YACvBN,MAAM,CAACF,KAAK,GAAGM,GAAG,CAACG,IAAI;YACvBP,MAAM,CAACT,YAAY,GAAG,IAAI;YAC1B,OAAOS,MAAM;UACf,CAAC,CAAC;QACJ,CAAC,MAAM;UACL,IAAI,CAACC,aAAa,GAAGrB,UAAU,CAAC8B,UAAU,CAAC,IAAI,CAACnD,KAAK,EAAE,IAAI,CAACM,OAAO,EAAEc,OAAO,CAAC,CAACwB,IAAI,CAAC,UAAUC,GAAG,EAAE;YAChGJ,MAAM,CAACzC,KAAK,GAAG6C,GAAG,CAACnD,IAAI;YACvB+C,MAAM,CAACb,IAAI,GAAGiB,GAAG,CAACC,GAAG;YACrBL,MAAM,CAACD,KAAK,GAAGK,GAAG,CAACE,IAAI;YACvBN,MAAM,CAACF,KAAK,GAAGM,GAAG,CAACG,IAAI;YACvBP,MAAM,CAACT,YAAY,GAAG,IAAI;YAC1B,OAAOS,MAAM;UACf,CAAC,CAAC;QACJ;MACF;MAEA,IAAI,IAAI,CAACC,aAAa,EAAE;QACtB,OAAO,IAAI,CAACA,aAAa;MAC3B;IACF;EACF,CAAC,EAAE;IACDpD,GAAG,EAAE,UAAU;IACflC,KAAK,EAAE,UAAUgE;IACjB,uBACE;MACA,OAAO,IAAI,CAACgC,IAAI,CAACvE,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEuC,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE;QAC7D4B,IAAI,EAAE;MACR,CAAC,CAAC,CAAC;IACL;IACA;AACJ;AACA;EAEE,CAAC,EAAE;IACD1D,GAAG,EAAE,QAAQ;IACblC,KAAK,EAAE,YAAY;MACjB,IAAI,IAAI,CAAC4E,YAAY,IAAI,OAAO,IAAI,CAACA,YAAY,CAACqB,KAAK,KAAK,UAAU,EAAE;QACtE,IAAI,CAACrB,YAAY,CAACqB,KAAK,EAAE;MAC3B;MAEA,IAAI,CAACrB,YAAY,GAAG,IAAI;IAC1B;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1C,GAAG,EAAE,SAAS;IACdlC,KAAK,EAAE,YAAY;MACjB,IAAIkG,MAAM,GAAG,IAAI;MAEjB,IAAIlC;MACJ,wBACEpC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKmB,SAAS,GAAGnB,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAExE,IAAI,CAAC,IAAI,CAACgB,KAAK,EAAE;QACf,MAAM,IAAIT,UAAU,CAACA,UAAU,CAACgE,yBAAyB,EAAE,gCAAgC,CAAC;MAC9F;MAEA,IAAIC,cAAc,GAAG;QACnBC,YAAY,EAAE;MAChB,CAAC;MAED,IAAIrC,OAAO,CAACsC,cAAc,CAAC,cAAc,CAAC,EAAE;QAC1CF,cAAc,CAACC,YAAY,GAAGrC,OAAO,CAACqC,YAAY;MACpD;MAEA,IAAIpC,UAAU,GAAGpD,YAAY,CAACZ,OAAO,CAAC4E,iBAAiB,EAAE;MAEzD,OAAOZ,UAAU,CAACsC,UAAU,CAAC,IAAI,CAAC3D,KAAK,EAAEwD,cAAc,CAAC,CAACZ,IAAI,CAAC,YAAY;QACxEU,MAAM,CAAClD,KAAK,GAAG,IAAI;QACnBkD,MAAM,CAACtB,YAAY,GAAG,IAAI;QAC1B,OAAOsB,MAAM;MACf,CAAC,CAAC;IACJ;EACF,CAAC,EAAE;IACDhE,GAAG,EAAE,QAAQ;IACblC,KAAK,EAAE,YACP;IACA;MACE,OAAO;QACLwG,MAAM,EAAE,MAAM;QACdlE,IAAI,EAAE,IAAI,CAACM,KAAK;QAChB8C,GAAG,EAAE,IAAI,CAAClB,IAAI;QACdoB,IAAI,EAAE,IAAI,CAACT,KAAK;QAChBQ,IAAI,EAAE,IAAI,CAACP;MACb,CAAC;IACH;EACF,CAAC,EAAE;IACDlD,GAAG,EAAE,QAAQ;IACblC,KAAK,EAAE,UAAUyG;IACjB,aAEA;IACA;MACE,IAAI,IAAI,KAAKA,KAAK,EAAE;QAClB,OAAO,IAAI;MACb,CAAC,CAAC;;MAGF,OAAOA,KAAK,YAAYpE,SAAS,IAAI,IAAI,CAACC,IAAI,EAAE,KAAKmE,KAAK,CAACnE,IAAI,EAAE,IAAI,IAAI,CAACoD,GAAG,EAAE,KAAKe,KAAK,CAACf,GAAG,EAAE,IAAI,OAAO,IAAI,CAACA,GAAG,EAAE,KAAK,WAAW;IACtI;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDxD,GAAG,EAAE,aAAa;IAClBlC,KAAK,EAAE,UAAUyC;IACjB,WACE;MACA,IAAIiE,MAAM,GAAG,IAAI;MAEjB,IAAIjE,QAAQ,IAAI,CAAC,CAAC,EAAEjC,QAAQ,CAACP,OAAO,EAAEwC,QAAQ,CAAC,KAAK,QAAQ,EAAE;QAC5D,IAAIkE,SAAS;QAEb,CAAC,CAAC,EAAErG,QAAQ,CAACL,OAAO,EAAE0G,SAAS,GAAG,CAAC,CAAC,EAAEpG,KAAK,CAACN,OAAO,EAAEwC,QAAQ,CAAC,CAAC,CAACrB,IAAI,CAACuF,SAAS,EAAE,UAAUzE,GAAG,EAAE;UAC7FwE,MAAM,CAACE,WAAW,CAAC1E,GAAG,EAAEO,QAAQ,CAACP,GAAG,CAAC,CAAC;QACxC,CAAC,CAAC;MACJ;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDA,GAAG,EAAE,aAAa;IAClBlC,KAAK,EAAE,UAAUkC;IACjB,cACElC;IACF,WACE;MACA,IAAI,OAAOkC,GAAG,KAAK,QAAQ,EAAE;QAC3B,IAAI,CAACW,SAAS,CAACX,GAAG,CAAC,GAAGlC,KAAK;MAC7B;IACF;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDkC,GAAG,EAAE,SAAS;IACdlC,KAAK,EAAE,UAAU0C;IACjB,WACE;MACA,IAAImE,MAAM,GAAG,IAAI;MAEjB,IAAInE,IAAI,IAAI,CAAC,CAAC,EAAElC,QAAQ,CAACP,OAAO,EAAEyC,IAAI,CAAC,KAAK,QAAQ,EAAE;QACpD,IAAIoE,SAAS;QAEb,CAAC,CAAC,EAAExG,QAAQ,CAACL,OAAO,EAAE6G,SAAS,GAAG,CAAC,CAAC,EAAEvG,KAAK,CAACN,OAAO,EAAEyC,IAAI,CAAC,CAAC,CAACtB,IAAI,CAAC0F,SAAS,EAAE,UAAU5E,GAAG,EAAE;UACzF2E,MAAM,CAACE,MAAM,CAAC7E,GAAG,EAAEQ,IAAI,CAACR,GAAG,CAAC,CAAC;QAC/B,CAAC,CAAC;MACJ;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDA,GAAG,EAAE,QAAQ;IACblC,KAAK,EAAE,UAAUkC;IACjB,cACElC;IACF,cACE;MACA,IAAI,OAAOkC,GAAG,KAAK,QAAQ,EAAE;QAC3B,IAAI,CAACY,KAAK,CAACZ,GAAG,CAAC,GAAGlC,KAAK;MACzB;IACF;EACF,CAAC,CAAC,EAAE,CAAC;IACHkC,GAAG,EAAE,UAAU;IACflC,KAAK,EAAE,UAAUgH,GAAG,EACpB;IACA;MACE,IAAIA,GAAG,CAACR,MAAM,KAAK,MAAM,EAAE;QACzB,MAAM,IAAI7C,SAAS,CAAC,4CAA4C,CAAC;MACnE;MAEA,IAAIL,IAAI,GAAG,IAAIjB,SAAS,CAAC2E,GAAG,CAAC1E,IAAI,CAAC;MAClCgB,IAAI,CAACkB,IAAI,GAAGwC,GAAG,CAACtB,GAAG;MACnBpC,IAAI,CAAC8B,KAAK,GAAG4B,GAAG,CAACrB,IAAI;MACrBrC,IAAI,CAAC6B,KAAK,GAAG6B,GAAG,CAACpB,IAAI;MACrB,OAAOtC,IAAI;IACb;EACF,CAAC,EAAE;IACDpB,GAAG,EAAE,cAAc;IACnBlC,KAAK,EAAE,UAAUiH;IACjB,qBAEA;IACA;MACE,OAAO,CAAC,CAAC,EAAEnG,gBAAgB,CAACmC,YAAY,EAAEgE,KAAK,CAAC;IAClD;EACF,CAAC,CAAC,CAAC;EACH,OAAO5E,SAAS;AAClB,CAAC,EAAE;AAEHxB,YAAY,CAACZ,OAAO,CAACiH,iBAAiB,CAAC5H,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAEhF,IAAI6H,QAAQ,GAAG9E,SAAS;AACxBtC,OAAO,CAACE,OAAO,GAAGkH,QAAQ;AAC1BpH,OAAO,CAACqH,QAAQ,GAAGtG,gBAAgB,CAACsG,QAAQ"},"metadata":{},"sourceType":"script"}