{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MergedStore = void 0;\nconst ObservableStore_1 = require(\"./ObservableStore\");\nclass MergedStore extends ObservableStore_1.ObservableStore {\n  constructor() {\n    let children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    // Typecast: Preserve existing behavior\n    super({});\n    this._children = children;\n    // subscribe to children\n    children.forEach(child => this._addChild(child));\n    this._updateWholeState();\n  }\n  _addChild(child) {\n    child.subscribe(() => this._updateWholeState());\n  }\n  _updateWholeState() {\n    const childStates = this._children.map(child => child.getState());\n    // apply shallow merge over states\n    const state = Object.assign({}, ...childStates);\n    this.putState(state);\n  }\n}\nexports.MergedStore = MergedStore;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA,MAAaA,WAEX,SAAQC,iCAAkB;EAG1BC,cAAyB;IAAA,IAAbC,QAAQ,uEAAG,EAAE;IACvB;IACA,KAAK,CAAC,EAAkB,CAAC;IAEzB,IAAI,CAACC,SAAS,GAAGD,QAAQ;IACzB;IACAA,QAAQ,CAACE,OAAO,CAAEC,KAAK,IAAK,IAAI,CAACC,SAAS,CAACD,KAAK,CAAC,CAAC;IAClD,IAAI,CAACE,iBAAiB,EAAE;EAC1B;EAEAD,SAAS,CAACD,KAAkC;IAC1CA,KAAK,CAACG,SAAS,CAAC,MAAM,IAAI,CAACD,iBAAiB,EAAE,CAAC;EACjD;EAEAA,iBAAiB;IACf,MAAME,WAAW,GAAG,IAAI,CAACN,SAAS,CAACO,GAAG,CAAEL,KAAK,IAAKA,KAAK,CAACM,QAAQ,EAAE,CAAC;IACnE;IACA,MAAMC,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,GAAGL,WAAW,CAAC;IAC/C,IAAI,CAACM,QAAQ,CAACH,KAAK,CAAC;EACtB;;AAxBFI","names":["MergedStore","ObservableStore_1","constructor","children","_children","forEach","child","_addChild","_updateWholeState","subscribe","childStates","map","getState","state","Object","assign","putState","exports"],"sourceRoot":"","sources":["../src/MergedStore.ts"],"sourcesContent":["import { ObservableStore } from './ObservableStore';\n\nexport class MergedStore<\n  T extends Record<string, unknown>,\n> extends ObservableStore<T> {\n  private _children: ObservableStore<Partial<T>>[];\n\n  constructor(children = []) {\n    // Typecast: Preserve existing behavior\n    super({} as unknown as T);\n\n    this._children = children;\n    // subscribe to children\n    children.forEach((child) => this._addChild(child));\n    this._updateWholeState();\n  }\n\n  _addChild(child: ObservableStore<Partial<T>>): void {\n    child.subscribe(() => this._updateWholeState());\n  }\n\n  _updateWholeState(): void {\n    const childStates = this._children.map((child) => child.getState());\n    // apply shallow merge over states\n    const state = Object.assign({}, ...childStates);\n    this.putState(state);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}