{"ast":null,"code":"/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\"use strict\";\n\nconst {\n  callbackify\n} = require('util');\nvar errors = require('web3-core-helpers').errors;\nvar Jsonrpc = require('./jsonrpc.js');\nvar BatchManager = require('./batch.js');\nvar givenProvider = require('./givenProvider.js');\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n *\n * @param {string|Object}provider\n * @param {Net.Socket} net\n *\n * @constructor\n */\nvar RequestManager = function RequestManager(provider, net) {\n  this.provider = null;\n  this.providers = RequestManager.providers;\n  this.setProvider(provider, net);\n  this.subscriptions = new Map();\n};\nRequestManager.givenProvider = givenProvider;\nRequestManager.providers = {\n  WebsocketProvider: require('web3-providers-ws'),\n  HttpProvider: require('web3-providers-http'),\n  IpcProvider: require('web3-providers-ipc')\n};\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n *\n * @param {Object} provider\n * @param {net.Socket} net\n *\n * @returns void\n */\nRequestManager.prototype.setProvider = function (provider, net) {\n  var _this = this;\n  // autodetect provider\n  if (provider && typeof provider === 'string' && this.providers) {\n    // HTTP\n    if (/^http(s)?:\\/\\//i.test(provider)) {\n      provider = new this.providers.HttpProvider(provider);\n      // WS\n    } else if (/^ws(s)?:\\/\\//i.test(provider)) {\n      provider = new this.providers.WebsocketProvider(provider);\n      // IPC\n    } else if (provider && typeof net === 'object' && typeof net.connect === 'function') {\n      provider = new this.providers.IpcProvider(provider, net);\n    } else if (provider) {\n      throw new Error('Can\\'t autodetect provider for \"' + provider + '\"');\n    }\n  }\n  // reset the old one before changing, if still connected\n  if (this.provider && this.provider.connected) this.clearSubscriptions();\n  this.provider = provider || null;\n  // listen to incoming notifications\n  if (this.provider && this.provider.on) {\n    if (typeof provider.request === 'function') {\n      // EIP-1193 provider\n      this.provider.on('message', function (payload) {\n        if (payload && payload.type === 'eth_subscription' && payload.data) {\n          const data = payload.data;\n          if (data.subscription && _this.subscriptions.has(data.subscription)) {\n            _this.subscriptions.get(data.subscription).callback(null, data.result);\n          }\n        }\n      });\n    } else {\n      // legacy provider subscription event\n      this.provider.on('data', function data(result, deprecatedResult) {\n        result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n        // if result is a subscription, call callback for that subscription\n        if (result.method && result.params && result.params.subscription && _this.subscriptions.has(result.params.subscription)) {\n          _this.subscriptions.get(result.params.subscription).callback(null, result.params.result);\n        }\n      });\n    }\n    // resubscribe if the provider has reconnected\n    this.provider.on('connect', function connect() {\n      _this.subscriptions.forEach(function (subscription) {\n        subscription.subscription.resubscribe();\n      });\n    });\n    // notify all subscriptions about the error condition\n    this.provider.on('error', function error(error) {\n      _this.subscriptions.forEach(function (subscription) {\n        subscription.callback(error);\n      });\n    });\n    // notify all subscriptions about bad close conditions\n    const disconnect = function disconnect(event) {\n      if (!_this._isCleanCloseEvent(event) || _this._isIpcCloseError(event)) {\n        _this.subscriptions.forEach(function (subscription) {\n          subscription.callback(errors.ConnectionCloseError(event));\n          _this.subscriptions.delete(subscription.subscription.id);\n        });\n        if (_this.provider && _this.provider.emit) {\n          _this.provider.emit('error', errors.ConnectionCloseError(event));\n        }\n      }\n      if (_this.provider && _this.provider.emit) {\n        _this.provider.emit('end', event);\n      }\n    };\n    // TODO: Remove close once the standard allows it\n    this.provider.on('close', disconnect);\n    this.provider.on('disconnect', disconnect);\n    // TODO add end, timeout??\n  }\n};\n/**\n * Asynchronously send request to provider.\n * Prefers to use the `request` method available on the provider as specified in [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).\n * If `request` is not available, falls back to `sendAsync` and `send` respectively.\n * @method send\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.send = function (data, callback) {\n  callback = callback || function () {};\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n  const {\n    method,\n    params\n  } = data;\n  const jsonrpcPayload = Jsonrpc.toPayload(method, params);\n  const jsonrpcResultCallback = this._jsonrpcResultCallback(callback, jsonrpcPayload);\n  if (this.provider.request) {\n    const callbackRequest = callbackify(this.provider.request.bind(this.provider));\n    const requestArgs = {\n      method,\n      params\n    };\n    callbackRequest(requestArgs, callback);\n  } else if (this.provider.sendAsync) {\n    this.provider.sendAsync(jsonrpcPayload, jsonrpcResultCallback);\n  } else if (this.provider.send) {\n    this.provider.send(jsonrpcPayload, jsonrpcResultCallback);\n  } else {\n    throw new Error('Provider does not have a request or send method to use.');\n  }\n};\n/**\n * Asynchronously send batch request.\n * Only works if provider supports batch methods through `sendAsync` or `send`.\n * @method sendBatch\n * @param {Array} data - array of payload objects\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n  var payload = Jsonrpc.toBatchPayload(data);\n  this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n    if (err) {\n      return callback(err);\n    }\n    if (!Array.isArray(results)) {\n      return callback(errors.InvalidResponse(results));\n    }\n    callback(null, results);\n  });\n};\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {Subscription} subscription         the subscription\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */\nRequestManager.prototype.addSubscription = function (subscription, callback) {\n  if (this.provider.on) {\n    this.subscriptions.set(subscription.id, {\n      callback: callback,\n      subscription: subscription\n    });\n  } else {\n    throw new Error('The provider doesn\\'t support subscriptions: ' + this.provider.constructor.name);\n  }\n};\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */\nRequestManager.prototype.removeSubscription = function (id, callback) {\n  if (this.subscriptions.has(id)) {\n    var type = this.subscriptions.get(id).subscription.options.type;\n    // remove subscription first to avoid reentry\n    this.subscriptions.delete(id);\n    // then, try to actually unsubscribe\n    this.send({\n      method: type + '_unsubscribe',\n      params: [id]\n    }, callback);\n    return;\n  }\n  if (typeof callback === 'function') {\n    // call the callback if the subscription was already removed\n    callback(null);\n  }\n};\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n *\n * @returns {boolean}\n */\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n  try {\n    var _this = this;\n    // uninstall all subscriptions\n    if (this.subscriptions.size > 0) {\n      this.subscriptions.forEach(function (value, id) {\n        if (!keepIsSyncing || value.name !== 'syncing') _this.removeSubscription(id);\n      });\n    }\n    //  reset notification callbacks etc.\n    if (this.provider.reset) this.provider.reset();\n    return true;\n  } catch (e) {\n    throw new Error(`Error while clearing subscriptions: ${e}`);\n  }\n};\n/**\n * Evaluates WS close event\n *\n * @method _isCleanClose\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isCleanCloseEvent = function (event) {\n  return typeof event === 'object' && ([1000].includes(event.code) || event.wasClean === true);\n};\n/**\n * Detects Ipc close error. The node.net module emits ('close', isException)\n *\n * @method _isIpcCloseError\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isIpcCloseError = function (event) {\n  return typeof event === 'boolean' && event;\n};\n/**\n * The jsonrpc result callback for RequestManager.send\n *\n * @method _jsonrpcResultCallback\n *\n * @param {Function} callback the callback to use\n * @param {Object} payload the jsonrpc payload\n *\n * @returns {Function} return callback of form (err, result)\n *\n */\nRequestManager.prototype._jsonrpcResultCallback = function (callback, payload) {\n  return function (err, result) {\n    if (result && result.id && payload.id !== result.id) {\n      return callback(new Error(`Wrong response id ${result.id} (expected: ${payload.id}) in ${JSON.stringify(payload)}`));\n    }\n    if (err) {\n      return callback(err);\n    }\n    if (result && result.error) {\n      return callback(errors.ErrorResponse(result));\n    }\n    if (!Jsonrpc.isValidResponse(result)) {\n      return callback(errors.InvalidResponse(result));\n    }\n    callback(null, result.result);\n  };\n};\nmodule.exports = {\n  Manager: RequestManager,\n  BatchManager: BatchManager\n};","map":{"version":3,"names":["callbackify","require","errors","Jsonrpc","BatchManager","givenProvider","RequestManager","provider","net","providers","setProvider","subscriptions","Map","WebsocketProvider","HttpProvider","IpcProvider","prototype","_this","test","connect","Error","connected","clearSubscriptions","on","request","payload","type","data","subscription","has","get","callback","result","deprecatedResult","method","params","forEach","resubscribe","error","disconnect","event","_isCleanCloseEvent","_isIpcCloseError","ConnectionCloseError","delete","id","emit","send","InvalidProvider","jsonrpcPayload","toPayload","jsonrpcResultCallback","_jsonrpcResultCallback","callbackRequest","bind","requestArgs","sendAsync","sendBatch","toBatchPayload","err","results","Array","isArray","InvalidResponse","addSubscription","set","constructor","name","removeSubscription","options","keepIsSyncing","size","value","reset","e","includes","code","wasClean","JSON","stringify","ErrorResponse","isValidResponse","module","exports","Manager"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/web3-core-requestmanager/lib/index.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\"use strict\";\nconst { callbackify } = require('util');\nvar errors = require('web3-core-helpers').errors;\nvar Jsonrpc = require('./jsonrpc.js');\nvar BatchManager = require('./batch.js');\nvar givenProvider = require('./givenProvider.js');\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n *\n * @param {string|Object}provider\n * @param {Net.Socket} net\n *\n * @constructor\n */\nvar RequestManager = function RequestManager(provider, net) {\n    this.provider = null;\n    this.providers = RequestManager.providers;\n    this.setProvider(provider, net);\n    this.subscriptions = new Map();\n};\nRequestManager.givenProvider = givenProvider;\nRequestManager.providers = {\n    WebsocketProvider: require('web3-providers-ws'),\n    HttpProvider: require('web3-providers-http'),\n    IpcProvider: require('web3-providers-ipc')\n};\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n *\n * @param {Object} provider\n * @param {net.Socket} net\n *\n * @returns void\n */\nRequestManager.prototype.setProvider = function (provider, net) {\n    var _this = this;\n    // autodetect provider\n    if (provider && typeof provider === 'string' && this.providers) {\n        // HTTP\n        if (/^http(s)?:\\/\\//i.test(provider)) {\n            provider = new this.providers.HttpProvider(provider);\n            // WS\n        }\n        else if (/^ws(s)?:\\/\\//i.test(provider)) {\n            provider = new this.providers.WebsocketProvider(provider);\n            // IPC\n        }\n        else if (provider && typeof net === 'object' && typeof net.connect === 'function') {\n            provider = new this.providers.IpcProvider(provider, net);\n        }\n        else if (provider) {\n            throw new Error('Can\\'t autodetect provider for \"' + provider + '\"');\n        }\n    }\n    // reset the old one before changing, if still connected\n    if (this.provider && this.provider.connected)\n        this.clearSubscriptions();\n    this.provider = provider || null;\n    // listen to incoming notifications\n    if (this.provider && this.provider.on) {\n        if (typeof provider.request === 'function') { // EIP-1193 provider\n            this.provider.on('message', function (payload) {\n                if (payload && payload.type === 'eth_subscription' && payload.data) {\n                    const data = payload.data;\n                    if (data.subscription && _this.subscriptions.has(data.subscription)) {\n                        _this.subscriptions.get(data.subscription).callback(null, data.result);\n                    }\n                }\n            });\n        }\n        else { // legacy provider subscription event\n            this.provider.on('data', function data(result, deprecatedResult) {\n                result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n                // if result is a subscription, call callback for that subscription\n                if (result.method && result.params && result.params.subscription && _this.subscriptions.has(result.params.subscription)) {\n                    _this.subscriptions.get(result.params.subscription).callback(null, result.params.result);\n                }\n            });\n        }\n        // resubscribe if the provider has reconnected\n        this.provider.on('connect', function connect() {\n            _this.subscriptions.forEach(function (subscription) {\n                subscription.subscription.resubscribe();\n            });\n        });\n        // notify all subscriptions about the error condition\n        this.provider.on('error', function error(error) {\n            _this.subscriptions.forEach(function (subscription) {\n                subscription.callback(error);\n            });\n        });\n        // notify all subscriptions about bad close conditions\n        const disconnect = function disconnect(event) {\n            if (!_this._isCleanCloseEvent(event) || _this._isIpcCloseError(event)) {\n                _this.subscriptions.forEach(function (subscription) {\n                    subscription.callback(errors.ConnectionCloseError(event));\n                    _this.subscriptions.delete(subscription.subscription.id);\n                });\n                if (_this.provider && _this.provider.emit) {\n                    _this.provider.emit('error', errors.ConnectionCloseError(event));\n                }\n            }\n            if (_this.provider && _this.provider.emit) {\n                _this.provider.emit('end', event);\n            }\n        };\n        // TODO: Remove close once the standard allows it\n        this.provider.on('close', disconnect);\n        this.provider.on('disconnect', disconnect);\n        // TODO add end, timeout??\n    }\n};\n/**\n * Asynchronously send request to provider.\n * Prefers to use the `request` method available on the provider as specified in [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).\n * If `request` is not available, falls back to `sendAsync` and `send` respectively.\n * @method send\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.send = function (data, callback) {\n    callback = callback || function () { };\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n    const { method, params } = data;\n    const jsonrpcPayload = Jsonrpc.toPayload(method, params);\n    const jsonrpcResultCallback = this._jsonrpcResultCallback(callback, jsonrpcPayload);\n    if (this.provider.request) {\n        const callbackRequest = callbackify(this.provider.request.bind(this.provider));\n        const requestArgs = { method, params };\n        callbackRequest(requestArgs, callback);\n    }\n    else if (this.provider.sendAsync) {\n        this.provider.sendAsync(jsonrpcPayload, jsonrpcResultCallback);\n    }\n    else if (this.provider.send) {\n        this.provider.send(jsonrpcPayload, jsonrpcResultCallback);\n    }\n    else {\n        throw new Error('Provider does not have a request or send method to use.');\n    }\n};\n/**\n * Asynchronously send batch request.\n * Only works if provider supports batch methods through `sendAsync` or `send`.\n * @method sendBatch\n * @param {Array} data - array of payload objects\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n    var payload = Jsonrpc.toBatchPayload(data);\n    this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n        if (err) {\n            return callback(err);\n        }\n        if (!Array.isArray(results)) {\n            return callback(errors.InvalidResponse(results));\n        }\n        callback(null, results);\n    });\n};\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {Subscription} subscription         the subscription\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */\nRequestManager.prototype.addSubscription = function (subscription, callback) {\n    if (this.provider.on) {\n        this.subscriptions.set(subscription.id, {\n            callback: callback,\n            subscription: subscription\n        });\n    }\n    else {\n        throw new Error('The provider doesn\\'t support subscriptions: ' + this.provider.constructor.name);\n    }\n};\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */\nRequestManager.prototype.removeSubscription = function (id, callback) {\n    if (this.subscriptions.has(id)) {\n        var type = this.subscriptions.get(id).subscription.options.type;\n        // remove subscription first to avoid reentry\n        this.subscriptions.delete(id);\n        // then, try to actually unsubscribe\n        this.send({\n            method: type + '_unsubscribe',\n            params: [id]\n        }, callback);\n        return;\n    }\n    if (typeof callback === 'function') {\n        // call the callback if the subscription was already removed\n        callback(null);\n    }\n};\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n *\n * @returns {boolean}\n */\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n    try {\n        var _this = this;\n        // uninstall all subscriptions\n        if (this.subscriptions.size > 0) {\n            this.subscriptions.forEach(function (value, id) {\n                if (!keepIsSyncing || value.name !== 'syncing')\n                    _this.removeSubscription(id);\n            });\n        }\n        //  reset notification callbacks etc.\n        if (this.provider.reset)\n            this.provider.reset();\n        return true;\n    }\n    catch (e) {\n        throw new Error(`Error while clearing subscriptions: ${e}`);\n    }\n};\n/**\n * Evaluates WS close event\n *\n * @method _isCleanClose\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isCleanCloseEvent = function (event) {\n    return typeof event === 'object' && ([1000].includes(event.code) || event.wasClean === true);\n};\n/**\n * Detects Ipc close error. The node.net module emits ('close', isException)\n *\n * @method _isIpcCloseError\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isIpcCloseError = function (event) {\n    return typeof event === 'boolean' && event;\n};\n/**\n * The jsonrpc result callback for RequestManager.send\n *\n * @method _jsonrpcResultCallback\n *\n * @param {Function} callback the callback to use\n * @param {Object} payload the jsonrpc payload\n *\n * @returns {Function} return callback of form (err, result)\n *\n */\nRequestManager.prototype._jsonrpcResultCallback = function (callback, payload) {\n    return function (err, result) {\n        if (result && result.id && payload.id !== result.id) {\n            return callback(new Error(`Wrong response id ${result.id} (expected: ${payload.id}) in ${JSON.stringify(payload)}`));\n        }\n        if (err) {\n            return callback(err);\n        }\n        if (result && result.error) {\n            return callback(errors.ErrorResponse(result));\n        }\n        if (!Jsonrpc.isValidResponse(result)) {\n            return callback(errors.InvalidResponse(result));\n        }\n        callback(null, result.result);\n    };\n};\nmodule.exports = {\n    Manager: RequestManager,\n    BatchManager: BatchManager\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}