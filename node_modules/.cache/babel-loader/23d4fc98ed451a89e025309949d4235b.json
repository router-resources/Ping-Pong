{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Address = void 0;\nvar assert_1 = __importDefault(require(\"assert\"));\nvar externals_1 = require(\"./externals\");\nvar bytes_1 = require(\"./bytes\");\nvar account_1 = require(\"./account\");\nvar Address = /** @class */function () {\n  function Address(buf) {\n    (0, assert_1.default)(buf.length === 20, 'Invalid address length');\n    this.buf = buf;\n  }\n  /**\n   * Returns the zero address.\n   */\n  Address.zero = function () {\n    return new Address((0, bytes_1.zeros)(20));\n  };\n  /**\n   * Returns an Address object from a hex-encoded string.\n   * @param str - Hex-encoded address\n   */\n  Address.fromString = function (str) {\n    (0, assert_1.default)((0, account_1.isValidAddress)(str), 'Invalid address');\n    return new Address((0, bytes_1.toBuffer)(str));\n  };\n  /**\n   * Returns an address for a given public key.\n   * @param pubKey The two points of an uncompressed key\n   */\n  Address.fromPublicKey = function (pubKey) {\n    (0, assert_1.default)(Buffer.isBuffer(pubKey), 'Public key should be Buffer');\n    var buf = (0, account_1.pubToAddress)(pubKey);\n    return new Address(buf);\n  };\n  /**\n   * Returns an address for a given private key.\n   * @param privateKey A private key must be 256 bits wide\n   */\n  Address.fromPrivateKey = function (privateKey) {\n    (0, assert_1.default)(Buffer.isBuffer(privateKey), 'Private key should be Buffer');\n    var buf = (0, account_1.privateToAddress)(privateKey);\n    return new Address(buf);\n  };\n  /**\n   * Generates an address for a newly created contract.\n   * @param from The address which is creating this new address\n   * @param nonce The nonce of the from account\n   */\n  Address.generate = function (from, nonce) {\n    (0, assert_1.default)(externals_1.BN.isBN(nonce));\n    return new Address((0, account_1.generateAddress)(from.buf, nonce.toArrayLike(Buffer)));\n  };\n  /**\n   * Generates an address for a contract created using CREATE2.\n   * @param from The address which is creating this new address\n   * @param salt A salt\n   * @param initCode The init code of the contract being created\n   */\n  Address.generate2 = function (from, salt, initCode) {\n    (0, assert_1.default)(Buffer.isBuffer(salt));\n    (0, assert_1.default)(Buffer.isBuffer(initCode));\n    return new Address((0, account_1.generateAddress2)(from.buf, salt, initCode));\n  };\n  /**\n   * Is address equal to another.\n   */\n  Address.prototype.equals = function (address) {\n    return this.buf.equals(address.buf);\n  };\n  /**\n   * Is address zero.\n   */\n  Address.prototype.isZero = function () {\n    return this.equals(Address.zero());\n  };\n  /**\n   * True if address is in the address range defined\n   * by EIP-1352\n   */\n  Address.prototype.isPrecompileOrSystemAddress = function () {\n    var addressBN = new externals_1.BN(this.buf);\n    var rangeMin = new externals_1.BN(0);\n    var rangeMax = new externals_1.BN('ffff', 'hex');\n    return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);\n  };\n  /**\n   * Returns hex encoding of address.\n   */\n  Address.prototype.toString = function () {\n    return '0x' + this.buf.toString('hex');\n  };\n  /**\n   * Returns Buffer representation of address.\n   */\n  Address.prototype.toBuffer = function () {\n    return Buffer.from(this.buf);\n  };\n  return Address;\n}();\nexports.Address = Address;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AAQA;EAGE,iBAAYA,GAAW;IACrB,oBAAM,EAACA,GAAG,CAACC,MAAM,KAAK,EAAE,EAAE,wBAAwB,CAAC;IACnD,IAAI,CAACD,GAAG,GAAGA,GAAG;EAChB;EAEA;;;EAGOE,YAAI,GAAX;IACE,OAAO,IAAIA,OAAO,CAAC,iBAAK,EAAC,EAAE,CAAC,CAAC;EAC/B,CAAC;EAED;;;;EAIOA,kBAAU,GAAjB,UAAkBC,GAAW;IAC3B,oBAAM,EAAC,4BAAc,EAACA,GAAG,CAAC,EAAE,iBAAiB,CAAC;IAC9C,OAAO,IAAID,OAAO,CAAC,oBAAQ,EAACC,GAAG,CAAC,CAAC;EACnC,CAAC;EAED;;;;EAIOD,qBAAa,GAApB,UAAqBE,MAAc;IACjC,oBAAM,EAACC,MAAM,CAACC,QAAQ,CAACF,MAAM,CAAC,EAAE,6BAA6B,CAAC;IAC9D,IAAMJ,GAAG,GAAG,0BAAY,EAACI,MAAM,CAAC;IAChC,OAAO,IAAIF,OAAO,CAACF,GAAG,CAAC;EACzB,CAAC;EAED;;;;EAIOE,sBAAc,GAArB,UAAsBK,UAAkB;IACtC,oBAAM,EAACF,MAAM,CAACC,QAAQ,CAACC,UAAU,CAAC,EAAE,8BAA8B,CAAC;IACnE,IAAMP,GAAG,GAAG,8BAAgB,EAACO,UAAU,CAAC;IACxC,OAAO,IAAIL,OAAO,CAACF,GAAG,CAAC;EACzB,CAAC;EAED;;;;;EAKOE,gBAAQ,GAAf,UAAgBM,IAAa,EAAEC,KAAS;IACtC,oBAAM,EAACC,cAAE,CAACC,IAAI,CAACF,KAAK,CAAC,CAAC;IACtB,OAAO,IAAIP,OAAO,CAAC,6BAAe,EAACM,IAAI,CAACR,GAAG,EAAES,KAAK,CAACG,WAAW,CAACP,MAAM,CAAC,CAAC,CAAC;EAC1E,CAAC;EAED;;;;;;EAMOH,iBAAS,GAAhB,UAAiBM,IAAa,EAAEK,IAAY,EAAEC,QAAgB;IAC5D,oBAAM,EAACT,MAAM,CAACC,QAAQ,CAACO,IAAI,CAAC,CAAC;IAC7B,oBAAM,EAACR,MAAM,CAACC,QAAQ,CAACQ,QAAQ,CAAC,CAAC;IACjC,OAAO,IAAIZ,OAAO,CAAC,8BAAgB,EAACM,IAAI,CAACR,GAAG,EAAEa,IAAI,EAAEC,QAAQ,CAAC,CAAC;EAChE,CAAC;EAED;;;EAGAZ,wBAAM,GAAN,UAAOa,OAAgB;IACrB,OAAO,IAAI,CAACf,GAAG,CAACgB,MAAM,CAACD,OAAO,CAACf,GAAG,CAAC;EACrC,CAAC;EAED;;;EAGAE,wBAAM,GAAN;IACE,OAAO,IAAI,CAACc,MAAM,CAACd,OAAO,CAACe,IAAI,EAAE,CAAC;EACpC,CAAC;EAED;;;;EAIAf,6CAA2B,GAA3B;IACE,IAAMgB,SAAS,GAAG,IAAIR,cAAE,CAAC,IAAI,CAACV,GAAG,CAAC;IAClC,IAAMmB,QAAQ,GAAG,IAAIT,cAAE,CAAC,CAAC,CAAC;IAC1B,IAAMU,QAAQ,GAAG,IAAIV,cAAE,CAAC,MAAM,EAAE,KAAK,CAAC;IAEtC,OAAOQ,SAAS,CAACG,GAAG,CAACF,QAAQ,CAAC,IAAID,SAAS,CAACI,GAAG,CAACF,QAAQ,CAAC;EAC3D,CAAC;EAED;;;EAGAlB,0BAAQ,GAAR;IACE,OAAO,IAAI,GAAG,IAAI,CAACF,GAAG,CAACuB,QAAQ,CAAC,KAAK,CAAC;EACxC,CAAC;EAED;;;EAGArB,0BAAQ,GAAR;IACE,OAAOG,MAAM,CAACG,IAAI,CAAC,IAAI,CAACR,GAAG,CAAC;EAC9B,CAAC;EACH,cAAC;AAAD,CAAC,EAzGD;AAAawB","names":["buf","length","Address","str","pubKey","Buffer","isBuffer","privateKey","from","nonce","externals_1","isBN","toArrayLike","salt","initCode","address","equals","zero","addressBN","rangeMin","rangeMax","gte","lte","toString","exports"],"sourceRoot":"","sources":["../src/address.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}