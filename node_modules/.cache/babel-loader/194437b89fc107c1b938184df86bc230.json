{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalize = exports.recoverPublicKey = exports.concatSig = exports.legacyToBuffer = exports.isNullish = exports.padWithZeroes = void 0;\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst ethjs_util_1 = require(\"ethjs-util\");\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\nfunction padWithZeroes(hexString, targetLength) {\n  if (hexString !== '' && !/^[a-f0-9]+$/iu.test(hexString)) {\n    throw new Error(`Expected an unprefixed hex string. Received: ${hexString}`);\n  }\n  if (targetLength < 0) {\n    throw new Error(`Expected a non-negative integer target length. Received: ${targetLength}`);\n  }\n  return String.prototype.padStart.call(hexString, targetLength, '0');\n}\nexports.padWithZeroes = padWithZeroes;\n/**\n * Returns `true` if the given value is nullish.\n *\n * @param value - The value being checked.\n * @returns Whether the value is nullish.\n */\nfunction isNullish(value) {\n  return value === null || value === undefined;\n}\nexports.isNullish = isNullish;\n/**\n * Convert a value to a Buffer. This function should be equivalent to the `toBuffer` function in\n * `ethereumjs-util@5.2.1`.\n *\n * @param value - The value to convert to a Buffer.\n * @returns The given value as a Buffer.\n */\nfunction legacyToBuffer(value) {\n  return typeof value === 'string' && !ethjs_util_1.isHexString(value) ? Buffer.from(value) : ethereumjs_util_1.toBuffer(value);\n}\nexports.legacyToBuffer = legacyToBuffer;\n/**\n * Concatenate an extended ECDSA signature into a single '0x'-prefixed hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature as a '0x'-prefixed string.\n */\nfunction concatSig(v, r, s) {\n  const rSig = ethereumjs_util_1.fromSigned(r);\n  const sSig = ethereumjs_util_1.fromSigned(s);\n  const vSig = ethereumjs_util_1.bufferToInt(v);\n  const rStr = padWithZeroes(ethereumjs_util_1.toUnsigned(rSig).toString('hex'), 64);\n  const sStr = padWithZeroes(ethereumjs_util_1.toUnsigned(sSig).toString('hex'), 64);\n  const vStr = ethjs_util_1.stripHexPrefix(ethjs_util_1.intToHex(vSig));\n  return ethereumjs_util_1.addHexPrefix(rStr.concat(sStr, vStr));\n}\nexports.concatSig = concatSig;\n/**\n * Recover the public key from the given signature and message hash.\n *\n * @param messageHash - The hash of the signed message.\n * @param signature - The signature.\n * @returns The public key of the signer.\n */\nfunction recoverPublicKey(messageHash, signature) {\n  const sigParams = ethereumjs_util_1.fromRpcSig(signature);\n  return ethereumjs_util_1.ecrecover(messageHash, sigParams.v, sigParams.r, sigParams.s);\n}\nexports.recoverPublicKey = recoverPublicKey;\n/**\n * Normalize the input to a lower-cased '0x'-prefixed hex string.\n *\n * @param input - The value to normalize.\n * @returns The normalized value.\n */\nfunction normalize(input) {\n  if (!input) {\n    return undefined;\n  }\n  if (typeof input === 'number') {\n    const buffer = ethereumjs_util_1.toBuffer(input);\n    input = ethereumjs_util_1.bufferToHex(buffer);\n  }\n  if (typeof input !== 'string') {\n    let msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n    msg += ` received ${typeof input}: ${input}`;\n    throw new Error(msg);\n  }\n  return ethereumjs_util_1.addHexPrefix(input.toLowerCase());\n}\nexports.normalize = normalize;","map":{"version":3,"mappings":";;;;;;AAAA;AAUA;AAEA;;;;;;;;;;;;;AAaA,SAAgBA,aAAa,CAACC,SAAiB,EAAEC,YAAoB;EACnE,IAAID,SAAS,KAAK,EAAE,IAAI,CAAC,eAAe,CAACE,IAAI,CAACF,SAAS,CAAC,EAAE;IACxD,MAAM,IAAIG,KAAK,CACb,gDAAgDH,SAAS,EAAE,CAC5D;;EAGH,IAAIC,YAAY,GAAG,CAAC,EAAE;IACpB,MAAM,IAAIE,KAAK,CACb,4DAA4DF,YAAY,EAAE,CAC3E;;EAGH,OAAOG,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACP,SAAS,EAAEC,YAAY,EAAE,GAAG,CAAC;AACrE;AAdAO;AAgBA;;;;;;AAMA,SAAgBC,SAAS,CAACC,KAAK;EAC7B,OAAOA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKC,SAAS;AAC9C;AAFAH;AAIA;;;;;;;AAOA,SAAgBI,cAAc,CAACF,KAAc;EAC3C,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACG,wBAAW,CAACH,KAAK,CAAC,GACnDI,MAAM,CAACC,IAAI,CAACL,KAAK,CAAC,GAClBM,0BAAQ,CAACN,KAAK,CAAC;AACrB;AAJAF;AAMA;;;;;;;;AAQA,SAAgBS,SAAS,CAACC,CAAS,EAAEC,CAAS,EAAEC,CAAS;EACvD,MAAMC,IAAI,GAAGL,4BAAU,CAACG,CAAC,CAAC;EAC1B,MAAMG,IAAI,GAAGN,4BAAU,CAACI,CAAC,CAAC;EAC1B,MAAMG,IAAI,GAAGP,6BAAW,CAACE,CAAC,CAAC;EAC3B,MAAMM,IAAI,GAAGzB,aAAa,CAACiB,4BAAU,CAACK,IAAI,CAAC,CAACI,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC;EAChE,MAAMC,IAAI,GAAG3B,aAAa,CAACiB,4BAAU,CAACM,IAAI,CAAC,CAACG,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC;EAChE,MAAME,IAAI,GAAGd,2BAAc,CAACA,qBAAQ,CAACU,IAAI,CAAC,CAAC;EAC3C,OAAOP,8BAAY,CAACQ,IAAI,CAACI,MAAM,CAACF,IAAI,EAAEC,IAAI,CAAC,CAAC;AAC9C;AARAnB;AAUA;;;;;;;AAOA,SAAgBqB,gBAAgB,CAC9BC,WAAmB,EACnBC,SAAiB;EAEjB,MAAMC,SAAS,GAAGhB,4BAAU,CAACe,SAAS,CAAC;EACvC,OAAOf,2BAAS,CAACc,WAAW,EAAEE,SAAS,CAACd,CAAC,EAAEc,SAAS,CAACb,CAAC,EAAEa,SAAS,CAACZ,CAAC,CAAC;AACtE;AANAZ;AAQA;;;;;;AAMA,SAAgByB,SAAS,CAACC,KAAsB;EAC9C,IAAI,CAACA,KAAK,EAAE;IACV,OAAOvB,SAAS;;EAGlB,IAAI,OAAOuB,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAMC,MAAM,GAAGnB,0BAAQ,CAACkB,KAAK,CAAC;IAC9BA,KAAK,GAAGlB,6BAAW,CAACmB,MAAM,CAAC;;EAG7B,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC7B,IAAIE,GAAG,GAAG,gEAAgE;IAC1EA,GAAG,IAAI,aAAa,OAAOF,KAAK,KAAKA,KAAK,EAAE;IAC5C,MAAM,IAAI/B,KAAK,CAACiC,GAAG,CAAC;;EAGtB,OAAOpB,8BAAY,CAACkB,KAAK,CAACG,WAAW,EAAE,CAAC;AAC1C;AAjBA7B","names":["padWithZeroes","hexString","targetLength","test","Error","String","prototype","padStart","call","exports","isNullish","value","undefined","legacyToBuffer","ethjs_util_1","Buffer","from","ethereumjs_util_1","concatSig","v","r","s","rSig","sSig","vSig","rStr","toString","sStr","vStr","concat","recoverPublicKey","messageHash","signature","sigParams","normalize","input","buffer","msg","toLowerCase"],"sourceRoot":"","sources":["../src/utils.ts"],"sourcesContent":["import {\n  addHexPrefix,\n  bufferToHex,\n  bufferToInt,\n  ecrecover,\n  fromRpcSig,\n  fromSigned,\n  toBuffer,\n  toUnsigned,\n} from 'ethereumjs-util';\nimport { intToHex, isHexString, stripHexPrefix } from 'ethjs-util';\n\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\nexport function padWithZeroes(hexString: string, targetLength: number): string {\n  if (hexString !== '' && !/^[a-f0-9]+$/iu.test(hexString)) {\n    throw new Error(\n      `Expected an unprefixed hex string. Received: ${hexString}`,\n    );\n  }\n\n  if (targetLength < 0) {\n    throw new Error(\n      `Expected a non-negative integer target length. Received: ${targetLength}`,\n    );\n  }\n\n  return String.prototype.padStart.call(hexString, targetLength, '0');\n}\n\n/**\n * Returns `true` if the given value is nullish.\n *\n * @param value - The value being checked.\n * @returns Whether the value is nullish.\n */\nexport function isNullish(value) {\n  return value === null || value === undefined;\n}\n\n/**\n * Convert a value to a Buffer. This function should be equivalent to the `toBuffer` function in\n * `ethereumjs-util@5.2.1`.\n *\n * @param value - The value to convert to a Buffer.\n * @returns The given value as a Buffer.\n */\nexport function legacyToBuffer(value: unknown) {\n  return typeof value === 'string' && !isHexString(value)\n    ? Buffer.from(value)\n    : toBuffer(value);\n}\n\n/**\n * Concatenate an extended ECDSA signature into a single '0x'-prefixed hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature as a '0x'-prefixed string.\n */\nexport function concatSig(v: Buffer, r: Buffer, s: Buffer): string {\n  const rSig = fromSigned(r);\n  const sSig = fromSigned(s);\n  const vSig = bufferToInt(v);\n  const rStr = padWithZeroes(toUnsigned(rSig).toString('hex'), 64);\n  const sStr = padWithZeroes(toUnsigned(sSig).toString('hex'), 64);\n  const vStr = stripHexPrefix(intToHex(vSig));\n  return addHexPrefix(rStr.concat(sStr, vStr));\n}\n\n/**\n * Recover the public key from the given signature and message hash.\n *\n * @param messageHash - The hash of the signed message.\n * @param signature - The signature.\n * @returns The public key of the signer.\n */\nexport function recoverPublicKey(\n  messageHash: Buffer,\n  signature: string,\n): Buffer {\n  const sigParams = fromRpcSig(signature);\n  return ecrecover(messageHash, sigParams.v, sigParams.r, sigParams.s);\n}\n\n/**\n * Normalize the input to a lower-cased '0x'-prefixed hex string.\n *\n * @param input - The value to normalize.\n * @returns The normalized value.\n */\nexport function normalize(input: number | string): string {\n  if (!input) {\n    return undefined;\n  }\n\n  if (typeof input === 'number') {\n    const buffer = toBuffer(input);\n    input = bufferToHex(buffer);\n  }\n\n  if (typeof input !== 'string') {\n    let msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n    msg += ` received ${typeof input}: ${input}`;\n    throw new Error(msg);\n  }\n\n  return addHexPrefix(input.toLowerCase());\n}\n"]},"metadata":{},"sourceType":"script"}