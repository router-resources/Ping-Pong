{"ast":null,"code":"var once = require('once');\nvar eos = require('end-of-stream');\nvar fs = require('fs'); // we only need fs to get the ReadStream and WriteStream prototypes\n\nvar noop = function () {};\nvar ancient = /^v?\\.0/.test(process.version);\nvar isFn = function (fn) {\n  return typeof fn === 'function';\n};\nvar isFS = function (stream) {\n  if (!ancient) return false; // newer node version do not need to care about fs is a special way\n  if (!fs) return false; // browser\n  return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close);\n};\nvar isRequest = function (stream) {\n  return stream.setHeader && isFn(stream.abort);\n};\nvar destroyer = function (stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true;\n    if (isFS(stream)) return stream.close(noop); // use close for fs streams to avoid fd leaks\n    if (isRequest(stream)) return stream.abort(); // request.destroy just do .end - .abort is what we want\n\n    if (isFn(stream.destroy)) return stream.destroy();\n    callback(err || new Error('stream was destroyed'));\n  };\n};\nvar call = function (fn) {\n  fn();\n};\nvar pipe = function (from, to) {\n  return from.pipe(to);\n};\nvar pump = function () {\n  var streams = Array.prototype.slice.call(arguments);\n  var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop;\n  if (Array.isArray(streams[0])) streams = streams[0];\n  if (streams.length < 2) throw new Error('pump requires two streams per minimum');\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n};\nmodule.exports = pump;","map":{"version":3,"names":["once","require","eos","fs","noop","ancient","test","process","version","isFn","fn","isFS","stream","ReadStream","WriteStream","close","isRequest","setHeader","abort","destroyer","reading","writing","callback","closed","on","readable","writable","err","destroyed","destroy","Error","call","pipe","from","to","pump","streams","Array","prototype","slice","arguments","length","pop","isArray","error","destroys","map","i","forEach","reduce","module","exports"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/pump/index.js"],"sourcesContent":["var once = require('once')\nvar eos = require('end-of-stream')\nvar fs = require('fs') // we only need fs to get the ReadStream and WriteStream prototypes\n\nvar noop = function () {}\nvar ancient = /^v?\\.0/.test(process.version)\n\nvar isFn = function (fn) {\n  return typeof fn === 'function'\n}\n\nvar isFS = function (stream) {\n  if (!ancient) return false // newer node version do not need to care about fs is a special way\n  if (!fs) return false // browser\n  return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close)\n}\n\nvar isRequest = function (stream) {\n  return stream.setHeader && isFn(stream.abort)\n}\n\nvar destroyer = function (stream, reading, writing, callback) {\n  callback = once(callback)\n\n  var closed = false\n  stream.on('close', function () {\n    closed = true\n  })\n\n  eos(stream, {readable: reading, writable: writing}, function (err) {\n    if (err) return callback(err)\n    closed = true\n    callback()\n  })\n\n  var destroyed = false\n  return function (err) {\n    if (closed) return\n    if (destroyed) return\n    destroyed = true\n\n    if (isFS(stream)) return stream.close(noop) // use close for fs streams to avoid fd leaks\n    if (isRequest(stream)) return stream.abort() // request.destroy just do .end - .abort is what we want\n\n    if (isFn(stream.destroy)) return stream.destroy()\n\n    callback(err || new Error('stream was destroyed'))\n  }\n}\n\nvar call = function (fn) {\n  fn()\n}\n\nvar pipe = function (from, to) {\n  return from.pipe(to)\n}\n\nvar pump = function () {\n  var streams = Array.prototype.slice.call(arguments)\n  var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop\n\n  if (Array.isArray(streams[0])) streams = streams[0]\n  if (streams.length < 2) throw new Error('pump requires two streams per minimum')\n\n  var error\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1\n    var writing = i > 0\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err\n      if (err) destroys.forEach(call)\n      if (reading) return\n      destroys.forEach(call)\n      callback(error)\n    })\n  })\n\n  return streams.reduce(pipe)\n}\n\nmodule.exports = pump\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}