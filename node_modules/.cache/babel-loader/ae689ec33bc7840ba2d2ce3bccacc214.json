{"ast":null,"code":"\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\nvar _AnonymousUtils = _interopRequireDefault(require(\"./AnonymousUtils\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\nvar _MoralisWeb = _interopRequireDefault(require(\"./MoralisWeb3\"));\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n *\n * @alias Parse.User\n * @augments Parse.Object\n */\n\nvar ParseUser = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n  var _super = _createSuper(ParseUser);\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/) {\n    var _this;\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = _super.call(this, '_User');\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Parse User\");\n      }\n    }\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n   *\n   * @param {object} options\n   * @returns {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options\n    /*: RequestOptions*/) /*: Promise<void>*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {object} saveOpts useMasterKey / sessionToken\n     * @returns {Promise} A promise that is fulfilled with the user is linked\n     */\n  }, {\n    key: \"linkWith\",\n    value: function (provider\n    /*: any*/, options\n    /*: { authData?: AuthData }*/) /*: Promise<ParseUser>*/\n    {\n      var _this2 = this;\n      var saveOpts\n      /*:: ?: FullOptions*/ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n      if (typeof provider === 'string') {\n        authType = provider;\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authProvider.getAuthType()] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n        authData[authType] = options.authData;\n        var controller = _CoreManager.default.getUserController();\n        return controller.linkWith(this, authData, saveOpts);\n      }\n      return new _promise.default(function (resolve, reject) {\n        provider.authenticate({\n          success: function (provider, result) {\n            var opts = {};\n            opts.authData = result;\n            _this2.linkWith(provider, opts, saveOpts).then(function () {\n              resolve(_this2);\n            }, function (error) {\n              reject(error);\n            });\n          },\n          error: function (provider, _error) {\n            reject(_error);\n          }\n        });\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @returns {Promise}\n     */\n  }, {\n    key: \"_linkWith\",\n    value: function (provider\n    /*: any*/, options\n    /*: { authData?: AuthData }*/) /*: Promise<ParseUser>*/\n    {\n      var saveOpts\n      /*:: ?: FullOptions*/ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     *\n     * @param provider\n     */\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider\n    /*: string*/) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n      var authType;\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n      var authData = this.get('authData');\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      var success = provider.restoreAuthentication(authData[authType]);\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n     */\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for unlinking)\n     */\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n      var authData = this.get('authData');\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options MasterKey / SessionToken\n     * @returns {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider\n    /*: any*/, options\n    /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/\n    {\n      var _this3 = this;\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n        return _promise.default.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n     *\n     * @param {object} provider service to link to\n     * @returns {boolean} true if link was successful\n     */\n  }, {\n    key: \"_isLinked\",\n    value: function (provider\n    /*: any*/) /*: boolean*/\n    {\n      var authType;\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n      var authData = this.get('authData') || {};\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n     */\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n     *\n     * @param {object} provider service to logout of\n     */\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider\n    /*: any*/) {\n      if (!this.isCurrent()) {\n        return;\n      }\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     *\n     * @returns {object} sessionToken\n     */\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function () /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {boolean} true if user is cached on disk\n     */\n  }, {\n    key: \"isCurrent\",\n    value: function () /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns get(\"username\").\n     *\n     * @returns {string}\n     */\n  }, {\n    key: \"getUsername\",\n    value: function () /*: ?string*/\n    {\n      var username = this.get('username');\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n     *\n     * @param {string} username\n     */\n  }, {\n    key: \"setUsername\",\n    value: function (username\n    /*: string*/) {\n      // Strip anonymity, even we do not support anonymous user in js SDK, we may\n      // encounter anonymous user created by android/iOS in cloud code.\n      var authData = this.get('authData');\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n     *\n     * @param {string} password User's Password\n     */\n  }, {\n    key: \"setPassword\",\n    value: function (password\n    /*: string*/) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n     *\n     * @returns {string} User's Email\n     */\n  }, {\n    key: \"getEmail\",\n    value: function () /*: ?string*/\n    {\n      var email = this.get('email');\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n     *\n     * @param {string} email\n     * @returns {boolean}\n     */\n  }, {\n    key: \"setEmail\",\n    value: function (email\n    /*: string*/) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n     *\n     * @returns {string} the session token, or undefined\n     */\n  }, {\n    key: \"getSessionToken\",\n    value: function () /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n     *\n     * @returns {boolean} whether this user is the current user and is logged in.\n     */\n  }, {\n    key: \"authenticated\",\n    value: function () /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * @param {object} attrs Extra fields to set on the new user, or null.\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n  }, {\n    key: \"signUp\",\n    value: function (attrs\n    /*: AttributeMap*/, options\n    /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var signupOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n  }, {\n    key: \"logIn\",\n    value: function (options\n    /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var loginOptions = {\n        usePost: true\n      };\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n      if (options.hasOwnProperty('usePost')) {\n        loginOptions.usePost = options.usePost;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Promise}\n     */\n  }, {\n    key: \"save\",\n    value: function () /*: Promise<ParseUser>*/\n    {\n      var _this4 = this;\n      for (var _len = arguments.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args).then(function () {\n        if (_this4.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this4);\n        }\n        return _this4;\n      });\n    }\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n  }, {\n    key: \"destroy\",\n    value: function () /*: Promise<ParseUser>*/\n    {\n      var _this5 = this;\n      for (var _len2 = arguments.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args).then(function () {\n        if (_this5.isCurrent()) {\n          return _CoreManager.default.getUserController().removeUserFromDisk();\n        }\n        return _this5;\n      });\n    }\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n  }, {\n    key: \"fetch\",\n    value: function () /*: Promise<ParseUser>*/\n    {\n      var _this6 = this;\n      for (var _len3 = arguments.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args).then(function () {\n        if (_this6.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this6);\n        }\n        return _this6;\n      });\n    }\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n  }, {\n    key: \"fetchWithInclude\",\n    value: function () /*: Promise<ParseUser>*/\n    {\n      var _this7 = this;\n      for (var _len4 = arguments.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args).then(function () {\n        if (_this7.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this7);\n        }\n        return _this7;\n      });\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n  }, {\n    key: \"verifyPassword\",\n    value: function (password\n    /*: string*/, options\n    /*:: ?: RequestOptions*/) /*: Promise<ParseUser>*/\n    {\n      var username = this.getUsername() || '';\n      return ParseUser.verifyPassword(username, password, options);\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class.\n     *\n     * @param {object} protoProps A set of properties to add to the prototype\n     * @param {object} classProps A set of static properties to add to the class\n     * @static\n     * @returns {Parse.User} The newly extended Parse.User class\n     */\n  }, {\n    key: \"extend\",\n    value: function (protoProps\n    /*: { [prop: string]: any }*/, classProps\n    /*: { [prop: string]: any }*/) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n     *\n     * @static\n     * @returns {Parse.Object} The currently logged in Parse.User.\n     */\n  }, {\n    key: \"current\",\n    value: function () /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n     *\n     * @static\n     * @returns {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n  }, {\n    key: \"currentAsync\",\n    value: function () /*: Promise<?ParseUser>*/\n    {\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * @param {string} username The username (or email) to sign up with.\n     * @param {string} password The password to sign up with.\n     * @param {object} attrs Extra fields to set on the new user.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n  }, {\n    key: \"signUp\",\n    value: function (username\n    /*: string*/, password\n    /*: string*/, attrs\n    /*: AttributeMap*/, options\n    /*:: ?: FullOptions*/) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * @param {string} username The username (or email) to log in with.\n     * @param {string} password The password to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n  }, {\n    key: \"logIn\",\n    value: function (username\n    /*: string*/, password\n    /*: string*/, options\n    /*:: ?: FullOptions*/) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n      var user = new this();\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n      return user.logIn(options);\n    }\n  }, {\n    key: \"loginOrSignup\",\n    value: function (username\n    /*: string*/, password\n    /*: string*/) {\n      var _this8 = this;\n      return this.logIn(username, password).catch(function (err) {\n        if (err.code === 101) {\n          var newUser = new _this8();\n          newUser.set('username', username);\n          newUser.set('password', password);\n          return newUser.signUp();\n        }\n        throw err;\n      });\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} sessionToken The sessionToken to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n  }, {\n    key: \"become\",\n    value: function (sessionToken\n    /*: string*/, options\n    /*:: ?: RequestOptions*/) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/ = {\n        sessionToken: sessionToken\n      };\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {string} sessionToken The sessionToken to get user with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user is fetched.\n     */\n  }, {\n    key: \"me\",\n    value: function (sessionToken\n    /*: string*/) {\n      var options\n      /*:: ?: RequestOptions*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var controller = _CoreManager.default.getUserController();\n      var meOptions\n      /*: RequestOptions*/ = {\n        sessionToken: sessionToken\n      };\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {object} userJSON The JSON map of the User's data\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON\n    /*: AttributeMap*/) {\n      var controller = _CoreManager.default.getUserController();\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     *\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"logInWith\",\n    value: function (provider\n    /*: any*/, options\n    /*: { authData?: AuthData }*/, saveOpts\n    /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/\n    {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options\n      /*: RequestOptions*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var controller = _CoreManager.default.getUserController();\n      return controller.logOut(options);\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email\n    /*: string*/, options\n    /*:: ?: RequestOptions*/) {\n      options = options || {};\n      var requestOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Request an email verification.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"requestEmailVerification\",\n    value: function (email\n    /*: string*/, options\n    /*:: ?: RequestOptions*/) {\n      options = options || {};\n      var requestOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.requestEmailVerification(email, requestOptions);\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} username  A username to be used for identificaiton\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n  }, {\n    key: \"verifyPassword\",\n    value: function (username\n    /*: string*/, password\n    /*: string*/, options\n    /*:: ?: RequestOptions*/) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n      options = options || {};\n      var verificationOption = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        verificationOption.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.verifyPassword(username, password, verificationOption);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n     * @param {boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed\n    /*: boolean*/) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options\n    /*:: ?: RequestOptions*/) {\n      options = options || {};\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n      return _promise.default.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @param provider\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider\n    /*: any*/) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"_logInWith\",\n    value: function (provider\n    /*: any*/, options\n    /*: { authData?: AuthData }*/, saveOpts\n    /*:: ?: FullOptions*/) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user\n    /*: ParseUser*/) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n_ParseObject2.default.registerSubclass('_User', ParseUser);\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    var _this9 = this;\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n      var currentUser;\n      return _regenerator.default.wrap(function (_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this9.currentUserAsync();\n            case 2:\n              currentUser = _context.sent;\n              if (!(currentUser && !user.equals(currentUser) && _AnonymousUtils.default.isLinked(currentUser))) {\n                _context.next = 6;\n                break;\n              }\n              _context.next = 6;\n              return currentUser.destroy({\n                sessionToken: currentUser.getSessionToken()\n              });\n            case 6:\n              currentUserCache = user;\n              user._cleanupAuthData();\n              user._synchronizeAllAuthData();\n              return _context.abrupt(\"return\", DefaultController.updateUserOnDisk(user));\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  currentUser: function () /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    var userData = _Storage.default.getItem(path);\n    currentUserCacheMatchesDisk = true;\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n    userData = JSON.parse(userData);\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n      delete userData._id;\n    }\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n    var current = _ParseObject2.default.fromJSON(userData);\n    currentUserCache = current;\n    current._synchronizeAllAuthData();\n    return current;\n  },\n  currentUserAsync: function () /*: Promise<?ParseUser>*/\n  {\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n      userData = JSON.parse(userData);\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n        delete userData._id;\n      }\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n      var current = _ParseObject2.default.fromJSON(userData);\n      currentUserCache = current;\n      current._synchronizeAllAuthData();\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user\n  /*: ParseUser*/, attrs\n  /*: AttributeMap*/, options\n  /*: RequestOptions*/) /*: Promise<ParseUser>*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty username.'));\n    }\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n      return user;\n    });\n  },\n  logIn: function (user\n  /*: ParseUser*/, options\n  /*: RequestOptions*/) /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n    var stateController = _CoreManager.default.getObjectStateController();\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request(options.usePost ? 'POST' : 'GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n      user._setExisted(true);\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n      user._finishFetch(response);\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user\n  /*: ParseUser*/, options\n  /*: RequestOptions*/) /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n      user._setExisted(true);\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user\n  /*: ParseUser*/, userJSON\n  /*: AttributeMap*/) /*: Promise<ParseUser>*/\n  {\n    user._finishFetch(userJSON);\n    user._setExisted(true);\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    }\n    return _promise.default.resolve(user);\n  },\n  me: function (user\n  /*: ParseUser*/, options\n  /*: RequestOptions*/) /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n      user._setExisted(true);\n      return user;\n    });\n  },\n  logOut: function (options\n  /*: RequestOptions*/) /*: Promise<ParseUser>*/\n  {\n    var Moralis = require('./Parse');\n    Moralis.cleanup();\n    var RESTController = _CoreManager.default.getRESTController();\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n      var promise = _Storage.default.removeItemAsync(path);\n      if (currentUser !== null) {\n        var isAnonymous = _AnonymousUtils.default.isLinked(currentUser);\n        var currentSession = currentUser.getSessionToken();\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            if (isAnonymous) {\n              return currentUser.destroy({\n                sessionToken: currentSession\n              });\n            }\n          }).then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n        currentUser._logOutWithAll();\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n        currentUser._clearServerData();\n      }\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email\n  /*: string*/, options\n  /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user\n  /*: ParseUser*/, options\n  /*: RequestOptions*/) {\n    var token = user.getSessionToken();\n    if (!token) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token'));\n    }\n    options.sessionToken = token;\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('POST', 'upgradeToRevocableSession', {}, options).then(function (result) {\n      var session = new _ParseSession.default();\n      session._finishFetch(result);\n      user._finishFetch({\n        sessionToken: session.getSessionToken()\n      });\n      if (user.isCurrent()) {\n        return DefaultController.setCurrentUser(user);\n      }\n      return _promise.default.resolve(user);\n    });\n  },\n  linkWith: function (user\n  /*: ParseUser*/, authData\n  /*: AuthData*/, options\n  /*: FullOptions*/) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n      return user;\n    });\n  },\n  verifyPassword: function (username\n  /*: string*/, password\n  /*: string*/, options\n  /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'verifyPassword', {\n      username: username,\n      password: password\n    }, options);\n  },\n  requestEmailVerification: function (email\n  /*: string*/, options\n  /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('POST', 'verificationEmailRequest', {\n      email: email\n    }, options);\n  }\n};\n_CoreManager.default.setUserController(DefaultController);\nvar _default = ParseUser;\nexports.default = _default;","map":{"version":3,"names":["_Reflect$construct","require","_Object$defineProperty2","_interopRequireDefault","exports","value","default","_regenerator","_promise","_defineProperty","_stringify","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_get2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_AnonymousUtils","_CoreManager","_isRevocableSession","_ParseError","_ParseObject2","_ParseSession","_MoralisWeb","_Storage","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","result","NewTarget","constructor","arguments","apply","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","CURRENT_USER_KEY","canUseCurrentUser","get","currentUserCacheMatchesDisk","currentUserCache","authProviders","ParseUser","_ParseObject","_super","attributes","_this","set","Error","key","options","upgradeOptions","hasOwnProperty","useMasterKey","controller","getUserController","upgradeToRevocableSession","provider","_this2","saveOpts","length","undefined","sessionToken","getSessionToken","authType","authProvider","restoreAuthentication","getAuthType","authData","linkWith","resolve","reject","authenticate","success","opts","then","error","_error","isCurrent","_unlinkFrom","_key","_synchronizeAuthData","_key2","_this3","_key3","_logOutWith","deauthenticate","current","id","username","anonymous","password","email","token","attrs","signupOptions","installationId","signUp","loginOptions","usePost","logIn","_this4","_len","args","Array","_key4","updateUserOnDisk","_this5","_len2","_key5","removeUserFromDisk","_this6","_len3","_key6","_this7","_len4","_key7","getUsername","verifyPassword","protoProps","classProps","_prop","enumerable","writable","configurable","_prop2","currentUser","currentUserAsync","user","OTHER_CAUSE","_finishFetch","_this8","catch","err","code","newUser","becomeOptions","become","meOptions","me","userJSON","hydrate","logOut","requestOptions","requestPasswordReset","requestEmailVerification","verificationOption","isAllowed","_upgradeToRevocableSession","currentAsync","registerSubclass","DefaultController","path","generatePath","json","toJSON","className","userData","crypto","getCryptoController","encrypt","setItemAsync","removeItemAsync","setCurrentUser","_this9","mark","_callee","wrap","_context","prev","next","sent","equals","isLinked","destroy","_cleanupAuthData","_synchronizeAllAuthData","abrupt","stop","async","getItem","decrypt","JSON","parse","_id","objectId","_sessionToken","fromJSON","getItemAsync","toString","save","RESTController","getRESTController","stateController","getObjectStateController","auth","request","response","_migrateId","_setExisted","setPendingOp","_getStateIdentifier","Moralis","cleanup","promise","isAnonymous","currentSession","_logOutWithAll","_clearServerData","SESSION_MISSING","session","setUserController","_default"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/moralis/lib/browser/ParseUser.js"],"sourcesContent":["\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _AnonymousUtils = _interopRequireDefault(require(\"./AnonymousUtils\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\n\nvar _MoralisWeb = _interopRequireDefault(require(\"./MoralisWeb3\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n *\n * @alias Parse.User\n * @augments Parse.Object\n */\n\nvar ParseUser = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n\n  var _super = _createSuper(ParseUser);\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = _super.call(this, '_User');\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Parse User\");\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n   *\n   * @param {object} options\n   * @returns {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {object} saveOpts useMasterKey / sessionToken\n     * @returns {Promise} A promise that is fulfilled with the user is linked\n     */\n\n  }, {\n    key: \"linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this2 = this;\n\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authProvider.getAuthType()] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n\n        authData[authType] = options.authData;\n\n        var controller = _CoreManager.default.getUserController();\n\n        return controller.linkWith(this, authData, saveOpts);\n      }\n\n      return new _promise.default(function (resolve, reject) {\n        provider.authenticate({\n          success: function (provider, result) {\n            var opts = {};\n            opts.authData = result;\n\n            _this2.linkWith(provider, opts, saveOpts).then(function () {\n              resolve(_this2);\n            }, function (error) {\n              reject(error);\n            });\n          },\n          error: function (provider, _error) {\n            reject(_error);\n          }\n        });\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     *\n     * @param provider\n     */\n\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider\n    /*: string*/\n    ) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData');\n\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      var success = provider.restoreAuthentication(authData[authType]);\n\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n     */\n\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for unlinking)\n     */\n\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options MasterKey / SessionToken\n     * @returns {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this3 = this;\n\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n\n        return _promise.default.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n     *\n     * @param {object} provider service to link to\n     * @returns {boolean} true if link was successful\n     */\n\n  }, {\n    key: \"_isLinked\",\n    value: function (provider\n    /*: any*/\n    )\n    /*: boolean*/\n    {\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData') || {};\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n     */\n\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n     *\n     * @param {object} provider service to logout of\n     */\n\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider\n    /*: any*/\n    ) {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     *\n     * @returns {object} sessionToken\n     */\n\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {boolean} true if user is cached on disk\n     */\n\n  }, {\n    key: \"isCurrent\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns get(\"username\").\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getUsername\",\n    value: function ()\n    /*: ?string*/\n    {\n      var username = this.get('username');\n\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n     *\n     * @param {string} username\n     */\n\n  }, {\n    key: \"setUsername\",\n    value: function (username\n    /*: string*/\n    ) {\n      // Strip anonymity, even we do not support anonymous user in js SDK, we may\n      // encounter anonymous user created by android/iOS in cloud code.\n      var authData = this.get('authData');\n\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n     *\n     * @param {string} password User's Password\n     */\n\n  }, {\n    key: \"setPassword\",\n    value: function (password\n    /*: string*/\n    ) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n     *\n     * @returns {string} User's Email\n     */\n\n  }, {\n    key: \"getEmail\",\n    value: function ()\n    /*: ?string*/\n    {\n      var email = this.get('email');\n\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n     *\n     * @param {string} email\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"setEmail\",\n    value: function (email\n    /*: string*/\n    ) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n     *\n     * @returns {string} the session token, or undefined\n     */\n\n  }, {\n    key: \"getSessionToken\",\n    value: function ()\n    /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n     *\n     * @returns {boolean} whether this user is the current user and is logged in.\n     */\n\n  }, {\n    key: \"authenticated\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * @param {object} attrs Extra fields to set on the new user, or null.\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var signupOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var loginOptions = {\n        usePost: true\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('usePost')) {\n        loginOptions.usePost = options.usePost;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"save\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this4 = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args).then(function () {\n        if (_this4.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this4);\n        }\n\n        return _this4;\n      });\n    }\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this5 = this;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args).then(function () {\n        if (_this5.isCurrent()) {\n          return _CoreManager.default.getUserController().removeUserFromDisk();\n        }\n\n        return _this5;\n      });\n    }\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this6 = this;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args).then(function () {\n        if (_this6.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this6);\n        }\n\n        return _this6;\n      });\n    }\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this7 = this;\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args).then(function () {\n        if (_this7.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this7);\n        }\n\n        return _this7;\n      });\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var username = this.getUsername() || '';\n      return ParseUser.verifyPassword(username, password, options);\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class.\n     *\n     * @param {object} protoProps A set of properties to add to the prototype\n     * @param {object} classProps A set of static properties to add to the class\n     * @static\n     * @returns {Parse.User} The newly extended Parse.User class\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (protoProps\n    /*: { [prop: string]: any }*/\n    , classProps\n    /*: { [prop: string]: any }*/\n    ) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n     *\n     * @static\n     * @returns {Parse.Object} The currently logged in Parse.User.\n     */\n\n  }, {\n    key: \"current\",\n    value: function ()\n    /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n     *\n     * @static\n     * @returns {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n\n  }, {\n    key: \"currentAsync\",\n    value: function ()\n    /*: Promise<?ParseUser>*/\n    {\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * @param {string} username The username (or email) to sign up with.\n     * @param {string} password The password to sign up with.\n     * @param {object} attrs Extra fields to set on the new user.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * @param {string} username The username (or email) to log in with.\n     * @param {string} password The password to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      var user = new this();\n\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n\n      return user.logIn(options);\n    }\n  }, {\n    key: \"loginOrSignup\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    ) {\n      var _this8 = this;\n\n      return this.logIn(username, password).catch(function (err) {\n        if (err.code === 101) {\n          var newUser = new _this8();\n          newUser.set('username', username);\n          newUser.set('password', password);\n          return newUser.signUp();\n        }\n\n        throw err;\n      });\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} sessionToken The sessionToken to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"become\",\n    value: function (sessionToken\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {string} sessionToken The sessionToken to get user with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user is fetched.\n     */\n\n  }, {\n    key: \"me\",\n    value: function (sessionToken\n    /*: string*/\n    ) {\n      var options\n      /*:: ?: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      var meOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {object} userJSON The JSON map of the User's data\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON\n    /*: AttributeMap*/\n    ) {\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     *\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logOut(options);\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Request an email verification.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestEmailVerification\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestEmailVerification(email, requestOptions);\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} username  A username to be used for identificaiton\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      options = options || {};\n      var verificationOption = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        verificationOption.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.verifyPassword(username, password, verificationOption);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n     * @param {boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed\n    /*: boolean*/\n    ) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n\n      return _promise.default.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @param provider\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider\n    /*: any*/\n    ) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user\n    /*: ParseUser*/\n    ) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_User', ParseUser);\n\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    var _this9 = this;\n\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n      var currentUser;\n      return _regenerator.default.wrap(function (_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this9.currentUserAsync();\n\n            case 2:\n              currentUser = _context.sent;\n\n              if (!(currentUser && !user.equals(currentUser) && _AnonymousUtils.default.isLinked(currentUser))) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 6;\n              return currentUser.destroy({\n                sessionToken: currentUser.getSessionToken()\n              });\n\n            case 6:\n              currentUserCache = user;\n\n              user._cleanupAuthData();\n\n              user._synchronizeAllAuthData();\n\n              return _context.abrupt(\"return\", DefaultController.updateUserOnDisk(user));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  currentUser: function ()\n  /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var userData = _Storage.default.getItem(path);\n\n    currentUserCacheMatchesDisk = true;\n\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    userData = JSON.parse(userData);\n\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n\n      delete userData._id;\n    }\n\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n\n    var current = _ParseObject2.default.fromJSON(userData);\n\n    currentUserCache = current;\n\n    current._synchronizeAllAuthData();\n\n    return current;\n  },\n  currentUserAsync: function ()\n  /*: Promise<?ParseUser>*/\n  {\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n\n      userData = JSON.parse(userData);\n\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n\n        delete userData._id;\n      }\n\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n\n      var current = _ParseObject2.default.fromJSON(userData);\n\n      currentUserCache = current;\n\n      current._synchronizeAllAuthData();\n\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user\n  /*: ParseUser*/\n  , attrs\n  /*: AttributeMap*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty username.'));\n    }\n\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  logIn: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request(options.usePost ? 'POST' : 'GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n\n      user._setExisted(true);\n\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n\n      user._finishFetch(response);\n\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user\n  /*: ParseUser*/\n  , userJSON\n  /*: AttributeMap*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    user._finishFetch(userJSON);\n\n    user._setExisted(true);\n\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    }\n\n    return _promise.default.resolve(user);\n  },\n  me: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return user;\n    });\n  },\n  logOut: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var Moralis = require('./Parse');\n\n    Moralis.cleanup();\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n      var promise = _Storage.default.removeItemAsync(path);\n\n      if (currentUser !== null) {\n        var isAnonymous = _AnonymousUtils.default.isLinked(currentUser);\n\n        var currentSession = currentUser.getSessionToken();\n\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            if (isAnonymous) {\n              return currentUser.destroy({\n                sessionToken: currentSession\n              });\n            }\n          }).then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n\n        currentUser._logOutWithAll();\n\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n\n        currentUser._clearServerData();\n      }\n\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var token = user.getSessionToken();\n\n    if (!token) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token'));\n    }\n\n    options.sessionToken = token;\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'upgradeToRevocableSession', {}, options).then(function (result) {\n      var session = new _ParseSession.default();\n\n      session._finishFetch(result);\n\n      user._finishFetch({\n        sessionToken: session.getSessionToken()\n      });\n\n      if (user.isCurrent()) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return _promise.default.resolve(user);\n    });\n  },\n  linkWith: function (user\n  /*: ParseUser*/\n  , authData\n  /*: AuthData*/\n  , options\n  /*: FullOptions*/\n  ) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  verifyPassword: function (username\n  /*: string*/\n  , password\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'verifyPassword', {\n      username: username,\n      password: password\n    }, options);\n  },\n  requestEmailVerification: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'verificationEmailRequest', {\n      email: email\n    }, options);\n  }\n};\n\n_CoreManager.default.setUserController(DefaultController);\n\nvar _default = ParseUser;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}