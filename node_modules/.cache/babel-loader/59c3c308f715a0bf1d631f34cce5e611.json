{"ast":null,"code":"const Subprovider = require('./subprovider.js');\n\n// wraps a json-rpc-engine middleware in a subprovider interface\n\nclass JsonRpcEngineMiddlewareSubprovider extends Subprovider {\n  // take a constructorFn to call once we have a reference to the engine\n  constructor(constructorFn) {\n    super();\n    if (!constructorFn) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified');\n    this._constructorFn = constructorFn;\n  }\n\n  // this is called once the subprovider has been added to the provider engine\n  setEngine(engine) {\n    if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice');\n    const blockTracker = engine._blockTracker;\n    const middleware = this._constructorFn({\n      engine,\n      provider: engine,\n      blockTracker\n    });\n    if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware');\n    if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function');\n    this.middleware = middleware;\n  }\n  handleRequest(req, provEngNext, provEngEnd) {\n    const res = {\n      id: req.id\n    };\n    this.middleware(req, res, middlewareNext, middlewareEnd);\n    function middlewareNext(handler) {\n      provEngNext((err, result, cb) => {\n        // update response object with result or error\n        if (err) {\n          delete res.result;\n          res.error = {\n            message: err.message || err\n          };\n        } else {\n          res.result = result;\n        }\n        // call middleware's next handler (even if error)\n        if (handler) {\n          handler(cb);\n        } else {\n          cb();\n        }\n      });\n    }\n    function middlewareEnd(err) {\n      if (err) return provEngEnd(err);\n      provEngEnd(null, res.result);\n    }\n  }\n}\nmodule.exports = JsonRpcEngineMiddlewareSubprovider;","map":{"version":3,"names":["Subprovider","require","JsonRpcEngineMiddlewareSubprovider","constructor","constructorFn","Error","_constructorFn","setEngine","engine","middleware","blockTracker","_blockTracker","provider","handleRequest","req","provEngNext","provEngEnd","res","id","middlewareNext","middlewareEnd","handler","err","result","cb","error","message","module","exports"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js"],"sourcesContent":["const Subprovider = require('./subprovider.js')\n\n// wraps a json-rpc-engine middleware in a subprovider interface\n\nclass JsonRpcEngineMiddlewareSubprovider extends Subprovider {\n\n  // take a constructorFn to call once we have a reference to the engine\n  constructor (constructorFn) {\n    super()\n    if (!constructorFn) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified')\n    this._constructorFn = constructorFn\n  }\n\n  // this is called once the subprovider has been added to the provider engine\n  setEngine (engine) {\n    if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice')\n    const blockTracker = engine._blockTracker\n    const middleware = this._constructorFn({ engine, provider: engine, blockTracker })\n    if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware')\n    if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function')\n    this.middleware = middleware\n  }\n\n  handleRequest (req, provEngNext, provEngEnd) {\n    const res = { id: req.id }\n    this.middleware(req, res, middlewareNext, middlewareEnd)\n\n    function middlewareNext (handler) {\n      provEngNext((err, result, cb) => {\n        // update response object with result or error\n        if (err) {\n          delete res.result\n          res.error = { message: err.message || err }\n        } else {\n          res.result = result\n        }\n        // call middleware's next handler (even if error)\n        if (handler) {\n          handler(cb)\n        } else {\n          cb()\n        }\n      })\n    }\n\n    function middlewareEnd (err) {\n      if (err) return provEngEnd(err)\n      provEngEnd(null, res.result)\n    }\n  }\n\n}\n\nmodule.exports = JsonRpcEngineMiddlewareSubprovider\n"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,kBAAkB,CAAC;;AAE/C;;AAEA,MAAMC,kCAAkC,SAASF,WAAW,CAAC;EAE3D;EACAG,WAAW,CAAEC,aAAa,EAAE;IAC1B,KAAK,EAAE;IACP,IAAI,CAACA,aAAa,EAAE,MAAM,IAAIC,KAAK,CAAC,iEAAiE,CAAC;IACtG,IAAI,CAACC,cAAc,GAAGF,aAAa;EACrC;;EAEA;EACAG,SAAS,CAAEC,MAAM,EAAE;IACjB,IAAI,IAAI,CAACC,UAAU,EAAE,MAAM,IAAIJ,KAAK,CAAC,wEAAwE,CAAC;IAC9G,MAAMK,YAAY,GAAGF,MAAM,CAACG,aAAa;IACzC,MAAMF,UAAU,GAAG,IAAI,CAACH,cAAc,CAAC;MAAEE,MAAM;MAAEI,QAAQ,EAAEJ,MAAM;MAAEE;IAAa,CAAC,CAAC;IAClF,IAAI,CAACD,UAAU,EAAE,MAAM,IAAIJ,KAAK,CAAC,+EAA+E,CAAC;IACjH,IAAI,OAAOI,UAAU,KAAK,UAAU,EAAE,MAAM,IAAIJ,KAAK,CAAC,6EAA6E,CAAC;IACpI,IAAI,CAACI,UAAU,GAAGA,UAAU;EAC9B;EAEAI,aAAa,CAAEC,GAAG,EAAEC,WAAW,EAAEC,UAAU,EAAE;IAC3C,MAAMC,GAAG,GAAG;MAAEC,EAAE,EAAEJ,GAAG,CAACI;IAAG,CAAC;IAC1B,IAAI,CAACT,UAAU,CAACK,GAAG,EAAEG,GAAG,EAAEE,cAAc,EAAEC,aAAa,CAAC;IAExD,SAASD,cAAc,CAAEE,OAAO,EAAE;MAChCN,WAAW,CAAC,CAACO,GAAG,EAAEC,MAAM,EAAEC,EAAE,KAAK;QAC/B;QACA,IAAIF,GAAG,EAAE;UACP,OAAOL,GAAG,CAACM,MAAM;UACjBN,GAAG,CAACQ,KAAK,GAAG;YAAEC,OAAO,EAAEJ,GAAG,CAACI,OAAO,IAAIJ;UAAI,CAAC;QAC7C,CAAC,MAAM;UACLL,GAAG,CAACM,MAAM,GAAGA,MAAM;QACrB;QACA;QACA,IAAIF,OAAO,EAAE;UACXA,OAAO,CAACG,EAAE,CAAC;QACb,CAAC,MAAM;UACLA,EAAE,EAAE;QACN;MACF,CAAC,CAAC;IACJ;IAEA,SAASJ,aAAa,CAAEE,GAAG,EAAE;MAC3B,IAAIA,GAAG,EAAE,OAAON,UAAU,CAACM,GAAG,CAAC;MAC/BN,UAAU,CAAC,IAAI,EAAEC,GAAG,CAACM,MAAM,CAAC;IAC9B;EACF;AAEF;AAEAI,MAAM,CAACC,OAAO,GAAG1B,kCAAkC"},"metadata":{},"sourceType":"script"}