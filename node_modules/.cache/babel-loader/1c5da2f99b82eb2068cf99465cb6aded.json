{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ethErrors = void 0;\nconst classes_1 = require(\"./classes\");\nconst utils_1 = require(\"./utils\");\nconst error_constants_1 = require(\"./error-constants\");\nexports.ethErrors = {\n  rpc: {\n    /**\n     * Get a JSON RPC 2.0 Parse (-32700) error.\n     */\n    parse: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg),\n    /**\n     * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n     */\n    invalidRequest: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg),\n    /**\n     * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n     */\n    invalidParams: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg),\n    /**\n     * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n     */\n    methodNotFound: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg),\n    /**\n     * Get a JSON RPC 2.0 Internal (-32603) error.\n     */\n    internal: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg),\n    /**\n     * Get a JSON RPC 2.0 Server error.\n     * Permits integer error codes in the [ -32099 <= -32005 ] range.\n     * Codes -32000 through -32004 are reserved by EIP-1474.\n     */\n    server: opts => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.');\n      }\n      const {\n        code\n      } = opts;\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n      }\n      return getEthJsonRpcError(code, opts);\n    },\n    /**\n     * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n     */\n    invalidInput: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg),\n    /**\n     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n     */\n    resourceNotFound: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg),\n    /**\n     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n     */\n    resourceUnavailable: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg),\n    /**\n     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n     */\n    transactionRejected: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg),\n    /**\n     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n     */\n    methodNotSupported: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg),\n    /**\n     * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n     */\n    limitExceeded: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg)\n  },\n  provider: {\n    /**\n     * Get an Ethereum Provider User Rejected Request (4001) error.\n     */\n    userRejectedRequest: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);\n    },\n    /**\n     * Get an Ethereum Provider Unauthorized (4100) error.\n     */\n    unauthorized: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);\n    },\n    /**\n     * Get an Ethereum Provider Unsupported Method (4200) error.\n     */\n    unsupportedMethod: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);\n    },\n    /**\n     * Get an Ethereum Provider Not Connected (4900) error.\n     */\n    disconnected: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);\n    },\n    /**\n     * Get an Ethereum Provider Chain Not Connected (4901) error.\n     */\n    chainDisconnected: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);\n    },\n    /**\n     * Get a custom Ethereum Provider error.\n     */\n    custom: opts => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.');\n      }\n      const {\n        code,\n        message,\n        data\n      } = opts;\n      if (!message || typeof message !== 'string') {\n        throw new Error('\"message\" must be a nonempty string');\n      }\n      return new classes_1.EthereumProviderError(code, message, data);\n    }\n  }\n};\n// Internal\nfunction getEthJsonRpcError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction getEthProviderError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction parseOpts(arg) {\n  if (arg) {\n    if (typeof arg === 'string') {\n      return [arg];\n    } else if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const {\n        message,\n        data\n      } = arg;\n      if (message && typeof message !== 'string') {\n        throw new Error('Must specify string message.');\n      }\n      return [message || undefined, data];\n    }\n  }\n  return [];\n}","map":{"version":3,"mappings":"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","names":["exports","rpc","parse","arg","getEthJsonRpcError","error_constants_1","invalidRequest","invalidParams","methodNotFound","internal","server","opts","Array","isArray","Error","code","Number","isInteger","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","provider","userRejectedRequest","getEthProviderError","unauthorized","unsupportedMethod","disconnected","chainDisconnected","custom","message","data","classes_1","parseOpts","utils_1","undefined"],"sourceRoot":"","sources":["../src/errors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}