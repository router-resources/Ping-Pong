{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ComposedStore = void 0;\nconst ObservableStore_1 = require(\"./ObservableStore\");\nclass ComposedStore extends ObservableStore_1.ObservableStore {\n  constructor(children) {\n    // Typecast: Preserve existing behavior\n    super({});\n    // subscribe to children\n    this._children = children || {};\n    Object.keys(this._children).forEach(childKey => {\n      const child = this._children[childKey];\n      this._addChild(childKey, child);\n    });\n  }\n  _addChild(childKey, child) {\n    const updateFromChild = childValue => {\n      const state = this.getState();\n      state[childKey] = childValue;\n      this.putState(state);\n    };\n    child.subscribe(updateFromChild);\n    updateFromChild(child.getState());\n  }\n}\nexports.ComposedStore = ComposedStore;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA,MAAaA,aAEX,SAAQC,iCAAkB;EAG1BC,YAAYC,QAAsD;IAChE;IACA,KAAK,CAAC,EAAkB,CAAC;IAEzB;IACA,IAAI,CAACC,SAAS,GAAGD,QAAQ,IAAI,EAAE;IAC/BE,MAAM,CAACC,IAAI,CAAC,IAAI,CAACF,SAAS,CAAC,CAACG,OAAO,CAAEC,QAAQ,IAAI;MAC/C,MAAMC,KAAK,GAAG,IAAI,CAACL,SAAS,CAACI,QAAQ,CAAC;MACtC,IAAI,CAACE,SAAS,CAACF,QAAQ,EAAEC,KAAK,CAAC;IACjC,CAAC,CAAC;EACJ;EAEAC,SAAS,CAACF,QAAiB,EAAEC,KAAkC;IAC7D,MAAME,eAAe,GAAIC,UAAsB,IAAI;MACjD,MAAMC,KAAK,GAAG,IAAI,CAACC,QAAQ,EAAE;MAC7BD,KAAK,CAACL,QAAQ,CAAC,GAAGI,UAAU;MAC5B,IAAI,CAACG,QAAQ,CAACF,KAAK,CAAC;IACtB,CAAC;IAEDJ,KAAK,CAACO,SAAS,CAACL,eAAe,CAAC;IAChCA,eAAe,CAACF,KAAK,CAACK,QAAQ,EAAE,CAAC;EACnC;;AA1BFG","names":["ComposedStore","ObservableStore_1","constructor","children","_children","Object","keys","forEach","childKey","child","_addChild","updateFromChild","childValue","state","getState","putState","subscribe","exports"],"sourceRoot":"","sources":["../src/ComposedStore.ts"],"sourcesContent":["import { ObservableStore } from './ObservableStore';\n\nexport class ComposedStore<\n  T extends Record<string, Record<string, unknown>>,\n> extends ObservableStore<T> {\n  private _children: Record<keyof T, ObservableStore<T[keyof T]>>;\n\n  constructor(children: Record<keyof T, ObservableStore<T[keyof T]>>) {\n    // Typecast: Preserve existing behavior\n    super({} as unknown as T);\n\n    // subscribe to children\n    this._children = children || {};\n    Object.keys(this._children).forEach((childKey) => {\n      const child = this._children[childKey];\n      this._addChild(childKey, child);\n    });\n  }\n\n  _addChild(childKey: keyof T, child: ObservableStore<T[keyof T]>) {\n    const updateFromChild = (childValue: T[keyof T]) => {\n      const state = this.getState();\n      state[childKey] = childValue;\n      this.putState(state);\n    };\n\n    child.subscribe(updateFromChild);\n    updateFromChild(child.getState());\n  }\n}\n"]},"metadata":{},"sourceType":"script"}