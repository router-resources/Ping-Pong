{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { providerFromEngine, createFetchMiddleware } from '@toruslabs/base-controllers';\nimport { mergeMiddleware, createAsyncMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport { Transaction, Keypair, Message } from '@solana/web3.js';\nimport bs58 from 'bs58';\nimport { ethErrors } from 'eth-rpc-errors';\nimport nacl from '@toruslabs/tweetnacl-js';\nfunction createGetAccountsMiddleware(_ref) {\n  let {\n    getAccounts\n  } = _ref;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"getAccounts\") return next();\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\"); // This calls from the prefs controller\n\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\nfunction createRequestAccountsMiddleware(_ref2) {\n  let {\n    requestAccounts\n  } = _ref2;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"requestAccounts\") return next();\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\"); // This calls the UI login function\n\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== targetMethod) return next();\n    if (!handler) throw new Error(\"WalletMiddleware - \".concat(targetMethod, \" not provided\"));\n    const result = await handler(request);\n    response.result = result;\n    return undefined;\n  });\n}\nfunction createSolanaMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    requestAccounts,\n    signTransaction,\n    signAndSendTransaction,\n    signAllTransactions,\n    signMessage,\n    getPrivateKey\n  } = providerHandlers;\n  return mergeMiddleware([createRequestAccountsMiddleware({\n    requestAccounts\n  }), createGetAccountsMiddleware({\n    getAccounts\n  }), createGenericJRPCMiddleware(\"signTransaction\", signTransaction), createGenericJRPCMiddleware(\"signAndSendTransaction\", signAndSendTransaction), createGenericJRPCMiddleware(\"signAllTransactions\", signAllTransactions), createGenericJRPCMiddleware(\"signMessage\", signMessage), createGenericJRPCMiddleware(\"solanaPrivateKey\", getPrivateKey)]);\n}\nfunction createChainSwitchMiddleware(_ref3) {\n  let {\n    addNewChainConfig,\n    switchSolanaChain\n  } = _ref3;\n  return mergeMiddleware([createGenericJRPCMiddleware(\"addSolanaChain\", addNewChainConfig), createGenericJRPCMiddleware(\"switchSolanaChain\", switchSolanaChain)]);\n}\nfunction createAccountMiddleware(_ref4) {\n  let {\n    updatePrivatekey\n  } = _ref4;\n  return mergeMiddleware([createGenericJRPCMiddleware(\"updateAccount\", updatePrivatekey)]);\n}\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction createInjectedProviderProxyMiddleware(provider) {\n  return createAsyncMiddleware(async (req, res, _next) => {\n    const result = await provider.request(_objectSpread$3({}, req));\n    res.result = result;\n  });\n}\nconst getPhantomHandlers = injectedProvider => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [],\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async req => {\n      const message = bs58.decode(req.params.message);\n      const txn = Transaction.from(message);\n      const transaction = await injectedProvider.signTransaction(txn);\n      return transaction;\n    },\n    signMessage: async req => {\n      var _req$params;\n      const message = await injectedProvider.request({\n        method: \"signMessage\",\n        params: {\n          message: (_req$params = req.params) === null || _req$params === void 0 ? void 0 : _req$params.message\n        }\n      });\n      return message;\n    },\n    signAndSendTransaction: async req => {\n      const message = bs58.decode(req.params.message);\n      const txn = Transaction.from(message);\n      const txRes = await injectedProvider.signAndSendTransaction(txn);\n      return {\n        signature: txRes.signature\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params2, _req$params3;\n      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message) || !((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txns = req.params.message.map(msg => {\n        const decodedMsg = bs58.decode(msg);\n        return Transaction.from(decodedMsg);\n      });\n      const transaction = await injectedProvider.signAllTransactions(txns);\n      return transaction;\n    }\n  };\n  return providerHandlers;\n};\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass PhantomInjectedProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$2(_objectSpread$2({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n  async switchChain(_) {\n    return Promise.resolve();\n  }\n  async setupProvider(injectedProvider) {\n    const providerHandlers = getPhantomHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork(injectedProvider);\n  }\n  async lookupNetwork(_) {\n    const {\n      chainConfig\n    } = this.config;\n    this.update({\n      chainId: chainConfig.chainId\n    });\n    return chainConfig.chainId || \"\"; // const genesisHash = await phantomProvider.request<string>({\n    //   method: \"getGenesisHash\",\n    //   params: [],\n    // });\n    // const { chainConfig } = this.config;\n    // if (!genesisHash) throw WalletInitializationError.rpcConnectionError(`Failed to connect with phantom wallet`);\n    // if (chainConfig.chainId !== genesisHash.substring(0, 32))\n    //   throw WalletInitializationError.invalidNetwork(\n    //     `Wallet is connected to wrong network,Please change your network to ${\n    //       SOLANA_NETWORKS[chainConfig.chainId] || chainConfig.displayName\n    //     } from phantom wallet extention.`\n    //   );\n    // return genesisHash.substring(0, 32);\n  }\n}\n\nconst getTorusHandlers = injectedProvider => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request({\n        method: \"solana_requestAccounts\",\n        params: {}\n      });\n      return accounts;\n    },\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request({\n        method: \"solana_accounts\",\n        params: {}\n      });\n      return accounts;\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async req => {\n      var _req$params;\n      const message = await injectedProvider.request({\n        method: \"sign_message\",\n        params: {\n          data: (_req$params = req.params) === null || _req$params === void 0 ? void 0 : _req$params.message\n        }\n      });\n      return message;\n    },\n    signTransaction: async req => {\n      var _req$params2;\n      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = bs58.decode(req.params.message).toString(\"hex\");\n      const response = await injectedProvider.request({\n        method: \"sign_transaction\",\n        params: {\n          message\n        }\n      });\n      const buf = Buffer.from(response, \"hex\");\n      const sendTx = Transaction.from(buf);\n      return sendTx;\n    },\n    signAndSendTransaction: async req => {\n      var _req$params3;\n      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = bs58.decode(req.params.message).toString(\"hex\");\n      const response = await injectedProvider.request({\n        method: \"send_transaction\",\n        params: {\n          message\n        }\n      });\n      return {\n        signature: response\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params4, _req$params5;\n      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const messages = [];\n      for (const transaction of req.params.message) {\n        const message = bs58.decode(transaction).toString(\"hex\");\n        messages.push(message);\n      }\n      const response = await injectedProvider.request({\n        method: \"sign_all_transactions\",\n        params: {\n          message: messages\n        }\n      });\n      return response;\n    }\n  };\n  return providerHandlers;\n};\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass TorusInjectedProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$1(_objectSpread$1({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n  async switchChain(_) {\n    return Promise.resolve();\n  }\n  async setupProvider(injectedProvider) {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n  async lookupNetwork() {\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Torus solana provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const connectedChainId = await this.provider.request({\n      method: \"solana_chainId\"\n    });\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : \"0x\".concat(parseInt(connectedChainId, 10).toString(16));\n    if (chainId !== connectedHexChainId) throw WalletInitializationError.rpcConnectionError(\"Invalid network, net_version is: \".concat(connectedHexChainId, \", expected: \").concat(chainId));\n    this.update({\n      chainId: connectedHexChainId\n    });\n    this.provider.emit(\"connect\", {\n      chainId: this.state.chainId\n    });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n  async setupEngine(injectedProvider) {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n  async handleInjectedProviderUpdate(injectedProvider) {\n    injectedProvider.on(\"accountsChanged\", async accounts => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async chainId => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : \"0x\".concat(parseInt(chainId, 10).toString(16)); // Check if chainId changed and trigger event\n\n      this.configure({\n        chainConfig: _objectSpread$1(_objectSpread$1({}, this.config.chainConfig), {}, {\n          chainId: connectedHexChainId\n        })\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    chainId,\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\nasync function getProviderHandlers(_ref) {\n  let {\n    privKey,\n    getProviderEngineProxy\n  } = _ref;\n  const transactionGenerator = serializedTx => {\n    const decodedTx = bs58.decode(serializedTx);\n    const tx = Transaction.populate(Message.from(decodedTx));\n    return tx;\n  };\n  const keyPairGenerator = () => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n    getPrivateKey: async () => privKey,\n    signTransaction: async req => {\n      var _req$params, _req$params2;\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = transactionGenerator((_req$params2 = req.params) === null || _req$params2 === void 0 ? void 0 : _req$params2.message);\n      transaction.partialSign(keyPair);\n      return transaction;\n    },\n    signMessage: async req => {\n      var _req$params3;\n      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n    signAndSendTransaction: async req => {\n      var _req$params4, _req$params5;\n      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const transaction = transactionGenerator((_req$params5 = req.params) === null || _req$params5 === void 0 ? void 0 : _req$params5.message);\n      transaction.sign(keyPair);\n      const sig = await _providerEngineProxy.request({\n        method: \"sendTransaction\",\n        params: [bs58.encode(transaction.serialize())]\n      });\n      return {\n        signature: sig\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params6, _req$params7;\n      if (!((_req$params6 = req.params) !== null && _req$params6 !== void 0 && _req$params6.message) || !((_req$params7 = req.params) !== null && _req$params7 !== void 0 && _req$params7.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedTransactions = [];\n      for (const tx of ((_req$params8 = req.params) === null || _req$params8 === void 0 ? void 0 : _req$params8.message) || []) {\n        var _req$params8;\n        const transaction = transactionGenerator(tx);\n        transaction.partialSign(keyPair);\n        signedTransactions.push(transaction);\n      }\n      return signedTransactions;\n    }\n  };\n  return providerHandlers;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass SolanaPrivateKeyProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n  async enable() {\n    if (!this.state.privateKey) throw ethErrors.provider.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n  async setupProvider(privKey) {\n    const providerHandlers = await getProviderHandlers({\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"solanaPrivateKey\"\n    });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request({\n          method: \"requestAccounts\"\n        })\n      });\n    }\n  }\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"solanaPrivateKey\"\n    });\n    await this.setupProvider(privKey);\n  }\n  async lookupNetwork() {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const health = await this._providerEngineProxy.request({\n      method: \"getHealth\",\n      params: []\n    });\n    const {\n      chainConfig\n    } = this.config;\n    if (health !== \"ok\") throw WalletInitializationError.rpcConnectionError(\"Failed to lookup network for following rpc target: \".concat(chainConfig.rpcTarget));\n    this.update({\n      chainId: chainConfig.chainId\n    });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", {\n        chainId: this.state.chainId\n      });\n    }\n    return this.state.chainId;\n  }\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addNewChainConfig: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = req.params;\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"SOL\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\"\n        });\n      },\n      switchSolanaChain: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const {\n          privateKey\n        } = req.params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n_defineProperty(SolanaPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new SolanaPrivateKeyProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\nclass SolanaWallet {\n  constructor(provider) {\n    _defineProperty(this, \"provider\", void 0);\n    this.provider = provider;\n  }\n  async requestAccounts() {\n    const accounts = await this.provider.request({\n      method: \"requestAccounts\",\n      params: {}\n    });\n    return accounts;\n  }\n  async signAndSendTransaction(transaction) {\n    const {\n      signature\n    } = await this.provider.request({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: bs58.encode(transaction.serialize({\n          requireAllSignatures: false\n        }))\n      }\n    });\n    return {\n      signature\n    };\n  }\n  async signTransaction(transaction) {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: bs58.encode(transaction.serialize({\n          requireAllSignatures: false\n        }))\n      }\n    });\n    return signedTransaction;\n  }\n  async signAllTransactions(transactions) {\n    const messages = transactions.map(transaction => {\n      return bs58.encode(transaction.serialize({\n        requireAllSignatures: false\n      }));\n    });\n    const signedTransaction = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: messages\n      }\n    });\n    return signedTransaction;\n  }\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"signMessage\",\n      params: {\n        message: data\n      }\n    });\n    return response;\n  }\n  async request(args) {\n    const result = await this.provider.request(args);\n    return result;\n  }\n}\nexport { PhantomInjectedProvider, SolanaPrivateKeyProvider, SolanaWallet, TorusInjectedProvider };","map":{"version":3,"mappings":";;;;;;;;;SAagBA;MAA4B;IAAEC;EAAF;EAC1C,OAAOC,qBAAqB,CAAC,OAAOC,OAAP,EAAgBC,QAAhB,EAA0BC,IAA1B;IAC3B,MAAM;MAAEC;IAAF,IAAaH,OAAnB;IACA,IAAIG,MAAM,KAAK,aAAf,EAA8B,OAAOD,IAAI,EAAX;IAE9B,IAAI,CAACJ,WAAL,EAAkB,MAAM,IAAIM,KAAJ,CAAU,kDAAV,CAAN;;IAElB,MAAMC,QAAQ,GAAG,MAAMP,WAAW,CAACE,OAAD,CAAlC;IACAC,QAAQ,CAACK,MAAT,GAAkBD,QAAlB;IACA,OAAOE,SAAP;EACD,CAT2B,CAA5B;AAUD;SAEeC;MAAgC;IAC9CC;EAD8C;EAK9C,OAAOV,qBAAqB,CAAC,OAAOC,OAAP,EAAgBC,QAAhB,EAA0BC,IAA1B;IAC3B,MAAM;MAAEC;IAAF,IAAaH,OAAnB;IACA,IAAIG,MAAM,KAAK,iBAAf,EAAkC,OAAOD,IAAI,EAAX;IAElC,IAAI,CAACO,eAAL,EAAsB,MAAM,IAAIL,KAAJ,CAAU,sDAAV,CAAN;;IAEtB,MAAMC,QAAQ,GAAG,MAAMI,eAAe,CAACT,OAAD,CAAtC;IACAC,QAAQ,CAACK,MAAT,GAAkBD,QAAlB;IACA,OAAOE,SAAP;EACD,CAT2B,CAA5B;AAUD;SAEeG,4BACdC,cACAC;EAEA,OAAOb,qBAAqB,CAAa,OAAOC,OAAP,EAAgBC,QAAhB,EAA0BC,IAA1B;IACvC,MAAM;MAAEC;IAAF,IAAaH,OAAnB;IACA,IAAIG,MAAM,KAAKQ,YAAf,EAA6B,OAAOT,IAAI,EAAX;IAE7B,IAAI,CAACU,OAAL,EAAc,MAAM,IAAIR,KAAJ,8BAAgCO,YAAhC,mBAAN;IAEd,MAAML,MAAM,GAAG,MAAMM,OAAO,CAACZ,OAAD,CAA5B;IAEAC,QAAQ,CAACK,MAAT,GAAkBA,MAAlB;IACA,OAAOC,SAAP;EACD,CAV2B,CAA5B;AAWD;SAEeM,uBAAuBC;EACrC,MAAM;IAAEhB,WAAF;IAAeW,eAAf;IAAgCM,eAAhC;IAAiDC,sBAAjD;IAAyEC,mBAAzE;IAA8FC,WAA9F;IAA2GC;EAA3G,IAA6HL,gBAAnI;EAEA,OAAOM,eAAe,CAAC,CACrBZ,+BAA+B,CAAC;IAAEC;EAAF,CAAD,CADV,EAErBZ,2BAA2B,CAAC;IAAEC;EAAF,CAAD,CAFN,EAGrBY,2BAA2B,CAAmC,iBAAnC,EAAsDK,eAAtD,CAHN,EAIrBL,2BAA2B,CAA6C,wBAA7C,EAAuEM,sBAAvE,CAJN,EAKrBN,2BAA2B,CAAuC,qBAAvC,EAA8DO,mBAA9D,CALN,EAMrBP,2BAA2B,CAAsC,aAAtC,EAAqDQ,WAArD,CANN,EAOrBR,2BAA2B,CAAe,kBAAf,EAAmCS,aAAnC,CAPN,CAAD,CAAtB;AASD;SAiBeE;MAA4B;IAAEC,iBAAF;IAAqBC;EAArB;EAC1C,OAAOH,eAAe,CAAC,CACrBV,2BAA2B,CAAgC,gBAAhC,EAAkDY,iBAAlD,CADN,EAErBZ,2BAA2B,CAA4B,mBAA5B,EAAiDa,iBAAjD,CAFN,CAAD,CAAtB;AAID;SAKeC;MAAwB;IAAEC;EAAF;EACtC,OAAOL,eAAe,CAAC,CAACV,2BAA2B,CAA+B,eAA/B,EAAgDe,gBAAhD,CAA5B,CAAD,CAAtB;AACD;;;;;;;;;;;;;;;;;;;;;;SCjGeC,sCAAsCC;EACpD,OAAO5B,qBAAqB,CAAC,OAAO6B,GAAP,EAAoCC,GAApC,EAAgEC,KAAhE;IAC3B,MAAMxB,MAAM,GAAG,MAAMqB,QAAQ,CAAC3B,OAAT,qBAChB4B,GADgB,EAArB;IAGAC,GAAG,CAACvB,MAAJ,GAAaA,MAAb;EACD,CAL2B,CAA5B;AAMD;ACHM,MAAMyB,kBAAkB,GAAIC,gBAAD;EAChC,MAAMlB,gBAAgB,GAAsB;IAC1CL,eAAe,EAAE;MACf,OAAOuB,gBAAgB,CAACC,SAAjB,GAA6B,CAACC,IAAI,CAACC,MAAL,CAAYH,gBAAgB,CAACC,SAAjB,CAA2BG,OAA3B,EAAZ,CAAD,CAA7B,GAAmF,EAA1F;IACD,CAHyC;IAI1CtC,WAAW,EAAE,YAAakC,gBAAgB,CAACC,SAAjB,GAA6B,CAACC,IAAI,CAACC,MAAL,CAAYH,gBAAgB,CAACC,SAAjB,CAA2BG,OAA3B,EAAZ,CAAD,CAA7B,GAAmF,EAJnE;IAK1CjB,aAAa,EAAE;MACb,MAAMkB,SAAS,CAACC,GAAV,CAAcC,kBAAd,EAAN;IACD,CAPyC;IAQ1CxB,eAAe,EAAE,MAAOa,GAAP;MACf,MAAMY,OAAO,GAAGN,IAAI,CAACO,MAAL,CAAYb,GAAG,CAACc,MAAJ,CAAWF,OAAvB,CAAhB;MACA,MAAMG,GAAG,GAAGC,WAAW,CAACC,IAAZ,CAAiBL,OAAjB,CAAZ;MACA,MAAMM,WAAW,GAAG,MAAMd,gBAAgB,CAACjB,eAAjB,CAAiC4B,GAAjC,CAA1B;MACA,OAAOG,WAAP;IACD,CAbyC;IAc1C5B,WAAW,EAAE,MAAOU,GAAP;;MACX,MAAMY,OAAO,GAAG,MAAMR,gBAAgB,CAAChC,OAAjB,CAAqC;QACzDG,MAAM,EAAE,aADiD;QAEzDuC,MAAM,EAAE;UACNF,OAAO,iBAAEZ,GAAG,CAACc,MAAN,gDAAEK,YAAYP;QADf;MAFiD,CAArC,CAAtB;MAMA,OAAOA,OAAP;IACD,CAtByC;IAuB1CxB,sBAAsB,EAAE,MAAOY,GAAP;MACtB,MAAMY,OAAO,GAAGN,IAAI,CAACO,MAAL,CAAYb,GAAG,CAACc,MAAJ,CAAWF,OAAvB,CAAhB;MACA,MAAMG,GAAG,GAAGC,WAAW,CAACC,IAAZ,CAAiBL,OAAjB,CAAZ;MACA,MAAMQ,KAAK,GAAG,MAAMhB,gBAAgB,CAAChB,sBAAjB,CAAwC2B,GAAxC,CAApB;MACA,OAAO;QAAEM,SAAS,EAAED,KAAK,CAACC;MAAnB,CAAP;IACD,CA5ByC;IA6B1ChC,mBAAmB,EAAE,MAAOW,GAAP;;MACnB,IAAI,kBAACA,GAAG,CAACc,MAAL,yCAACQ,aAAYV,OAAb,KAAwB,kBAACZ,GAAG,CAACc,MAAL,yCAACS,aAAYX,OAAZ,CAAoBY,MAArB,CAA5B,EAAyD;QACvD,MAAMf,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,SAA5B,CAAN;MACD;MACD,MAAMC,IAAI,GAAG1B,GAAG,CAACc,MAAJ,CAAWF,OAAX,CAAmBe,GAAnB,CAAwBC,GAAD;QAClC,MAAMC,UAAU,GAAGvB,IAAI,CAACO,MAAL,CAAYe,GAAZ,CAAnB;QACA,OAAOZ,WAAW,CAACC,IAAZ,CAAiBY,UAAjB,CAAP;MACD,CAHY,CAAb;MAIA,MAAMX,WAAW,GAAG,MAAMd,gBAAgB,CAACf,mBAAjB,CAAqCqC,IAArC,CAA1B;MACA,OAAOR,WAAP;IACD;EAvCyC,CAA5C;EAyCA,OAAOhC,gBAAP;AACD,CA3CM;;;;;;;;;;;;;;;;;;;;;;MCEM4C,gCAAgCC;EAC3CC;QAAY;MAAEC,MAAF;MAAUC;IAAV;IACV,MAAM;MAAED,MAAM,EAAE;QAAEE,WAAW,sCAAOF,MAAM,CAACE,WAAd;UAA2BC,cAAc,EAAEC,gBAAgB,CAACC;QAA5D;MAAb,CAAV;MAA+FJ;IAA/F,CAAN;EACD;EAEuB,MAAXK,WAAW,CAACC,CAAD;IACtB,OAAOC,OAAO,CAACC,OAAR,EAAP;EACD;EAEyB,MAAbC,aAAa,CAACvC,gBAAD;IACxB,MAAMlB,gBAAgB,GAAGiB,kBAAkB,CAACC,gBAAD,CAA3C;IACA,MAAMwC,gBAAgB,GAAG3D,sBAAsB,CAACC,gBAAD,CAA/C;IACA,MAAM2D,qBAAqB,GAAG/C,qCAAqC,CAACM,gBAAD,CAAnE;IACA,MAAM0C,MAAM,GAAG,IAAIC,UAAJ,EAAf;IACAD,MAAM,CAACE,IAAP,CAAYJ,gBAAZ;IACAE,MAAM,CAACE,IAAP,CAAYH,qBAAZ;IACA,MAAM9C,QAAQ,GAAGkD,kBAAkB,CAACH,MAAD,CAAnC;IAEA,KAAKI,yBAAL,CAA+BnD,QAA/B;IACA,MAAM,KAAKoD,aAAL,CAAmB/C,gBAAnB,CAAN;EACD;EAE4B,MAAb+C,aAAa,CAACX,CAAD;IAC3B,MAAM;MAAEL;IAAF,IAAkB,KAAKF,MAA7B;IACA,KAAKmB,MAAL,CAAY;MACVC,OAAO,EAAElB,WAAW,CAACkB;IADX,CAAZ;IAGA,OAAOlB,WAAW,CAACkB,OAAZ,IAAuB,EAA9B;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACD;;;AC3CI,MAAMC,gBAAgB,GAAIlD,gBAAD;EAC9B,MAAMlB,gBAAgB,GAAsB;IAC1CL,eAAe,EAAE;MACf,MAAMJ,QAAQ,GAAG,MAAM2B,gBAAgB,CAAChC,OAAjB,CAAmC;QACxDG,MAAM,EAAE,wBADgD;QAExDuC,MAAM,EAAE;MAFgD,CAAnC,CAAvB;MAIA,OAAOrC,QAAP;IACD,CAPyC;IAS1CP,WAAW,EAAE;MACX,MAAMO,QAAQ,GAAG,MAAM2B,gBAAgB,CAAChC,OAAjB,CAAmC;QACxDG,MAAM,EAAE,iBADgD;QAExDuC,MAAM,EAAE;MAFgD,CAAnC,CAAvB;MAIA,OAAOrC,QAAP;IACD,CAfyC;IAiB1Cc,aAAa,EAAE;MACb,MAAMkB,SAAS,CAACC,GAAV,CAAcC,kBAAd,EAAN;IACD,CAnByC;IAqB1CrB,WAAW,EAAE,MAAOU,GAAP;;MACX,MAAMY,OAAO,GAAG,MAAMR,gBAAgB,CAAChC,OAAjB,CAAqC;QACzDG,MAAM,EAAE,cADiD;QAEzDuC,MAAM,EAAE;UACNyC,IAAI,iBAAEvD,GAAG,CAACc,MAAN,gDAAEK,YAAYP;QADZ;MAFiD,CAArC,CAAtB;MAMA,OAAOA,OAAP;IACD,CA7ByC;IA+B1CzB,eAAe,EAAE,MAAOa,GAAP;;MACf,IAAI,kBAACA,GAAG,CAACc,MAAL,yCAACQ,aAAYV,OAAb,CAAJ,EAA0B;QACxB,MAAMH,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,SAA5B,CAAN;MACD;MACD,MAAMb,OAAO,GAAGN,IAAI,CAACO,MAAL,CAAYb,GAAG,CAACc,MAAJ,CAAWF,OAAvB,EAAgC4C,QAAhC,CAAyC,KAAzC,CAAhB;MACA,MAAMnF,QAAQ,GAAG,MAAM+B,gBAAgB,CAAChC,OAAjB,CAAiC;QACtDG,MAAM,EAAE,kBAD8C;QAEtDuC,MAAM,EAAE;UAAEF;QAAF;MAF8C,CAAjC,CAAvB;MAKA,MAAM6C,GAAG,GAAGC,MAAM,CAACzC,IAAP,CAAY5C,QAAZ,EAAsB,KAAtB,CAAZ;MACA,MAAMsF,MAAM,GAAG3C,WAAW,CAACC,IAAZ,CAAiBwC,GAAjB,CAAf;MACA,OAAOE,MAAP;IACD,CA5CyC;IA8C1CvE,sBAAsB,EAAE,MAAOY,GAAP;;MACtB,IAAI,kBAACA,GAAG,CAACc,MAAL,yCAACS,aAAYX,OAAb,CAAJ,EAA0B;QACxB,MAAMH,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,SAA5B,CAAN;MACD;MACD,MAAMb,OAAO,GAAGN,IAAI,CAACO,MAAL,CAAYb,GAAG,CAACc,MAAJ,CAAWF,OAAvB,EAAgC4C,QAAhC,CAAyC,KAAzC,CAAhB;MAEA,MAAMnF,QAAQ,GAAG,MAAM+B,gBAAgB,CAAChC,OAAjB,CAAiC;QACtDG,MAAM,EAAE,kBAD8C;QAEtDuC,MAAM,EAAE;UAAEF;QAAF;MAF8C,CAAjC,CAAvB;MAIA,OAAO;QAAES,SAAS,EAAEhD;MAAb,CAAP;IACD,CAzDyC;IA2D1CgB,mBAAmB,EAAE,MAAOW,GAAP;;MACnB,IAAI,kBAACA,GAAG,CAACc,MAAL,yCAAC8C,aAAYhD,OAAb,KAAwB,kBAACZ,GAAG,CAACc,MAAL,yCAAC+C,aAAYjD,OAAZ,CAAoBY,MAArB,CAA5B,EAAyD;QACvD,MAAMf,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,SAA5B,CAAN;MACD;MACD,MAAMqC,QAAQ,GAAa,EAA3B;MACA,KAAK,MAAM5C,WAAX,IAA0BlB,GAAG,CAACc,MAAJ,CAAWF,OAArC,EAA8C;QAC5C,MAAMA,OAAO,GAAGN,IAAI,CAACO,MAAL,CAAYK,WAAZ,EAAyBsC,QAAzB,CAAkC,KAAlC,CAAhB;QACAM,QAAQ,CAACd,IAAT,CAAcpC,OAAd;MACD;MACD,MAAMvC,QAAQ,GAAG,MAAM+B,gBAAgB,CAAChC,OAAjB,CAAwC;QAC7DG,MAAM,EAAE,uBADqD;QAE7DuC,MAAM,EAAE;UAAEF,OAAO,EAAEkD;QAAX;MAFqD,CAAxC,CAAvB;MAIA,OAAOzF,QAAP;IACD;EAzEyC,CAA5C;EA2EA,OAAOa,gBAAP;AACD,CA7EM;;;;;;;;;;;;;;;;;;;;;;MCGM6E,8BAA8BhC;EACzCC;QAAY;MAAEC,MAAF;MAAUC;IAAV;IACV,MAAM;MAAED,MAAM,EAAE;QAAEE,WAAW,sCAAOF,MAAM,CAACE,WAAd;UAA2BC,cAAc,EAAEC,gBAAgB,CAACC;QAA5D;MAAb,CAAV;MAA+FJ;IAA/F,CAAN;EACD;EAEuB,MAAXK,WAAW,CAACC,CAAD;IACtB,OAAOC,OAAO,CAACC,OAAR,EAAP;EACD;EAEyB,MAAbC,aAAa,CAACvC,gBAAD;IACxB,KAAK4D,4BAAL,CAAkC5D,gBAAlC;IACA,MAAM,KAAK6D,WAAL,CAAiB7D,gBAAjB,CAAN;EACD;EAE4B,MAAb+C,aAAa;IAC3B,IAAI,CAAC,KAAKpD,QAAV,EAAoB,MAAMU,SAAS,CAACV,QAAV,CAAmBmE,MAAnB,CAA0B;MAAEtD,OAAO,EAAE,0CAAX;MAAuDuD,IAAI,EAAE;IAA7D,CAA1B,CAAN;IACpB,MAAM;MAAEd;IAAF,IAAc,KAAKpB,MAAL,CAAYE,WAAhC;IAEA,MAAMiC,gBAAgB,GAAG,MAAM,KAAKrE,QAAL,CAAc3B,OAAd,CAAuC;MACpEG,MAAM,EAAE;IAD4D,CAAvC,CAA/B;IAIA,MAAM8F,mBAAmB,GAAGC,WAAW,CAACF,gBAAgB,CAACZ,QAAjB,EAAD,CAAX,GAA2CY,gBAA3C,eAAmEG,QAAQ,CAACH,gBAAD,EAAmB,EAAnB,CAAR,CAA+BZ,QAA/B,CAAwC,EAAxC,CAAnE,CAA5B;IACA,IAAIH,OAAO,KAAKgB,mBAAhB,EACE,MAAMG,yBAAyB,CAACC,kBAA1B,4CAAiFJ,mBAAjF,yBAAmHhB,OAAnH,EAAN;IAEF,KAAKD,MAAL,CAAY;MAAEC,OAAO,EAAEgB;IAAX,CAAZ;IACA,KAAKtE,QAAL,CAAc2E,IAAd,CAAmB,SAAnB,EAA8B;MAAErB,OAAO,EAAE,KAAKnB,KAAL,CAAWmB;IAAtB,CAA9B;IACA,KAAKtD,QAAL,CAAc2E,IAAd,CAAmB,cAAnB,EAAmC,KAAKxC,KAAL,CAAWmB,OAA9C;IACA,OAAO,KAAKnB,KAAL,CAAWmB,OAAlB;EACD;EAEwB,MAAXY,WAAW,CAAC7D,gBAAD;IACvB,MAAMlB,gBAAgB,GAAGoE,gBAAgB,CAAClD,gBAAD,CAAzC;IACA,MAAMwC,gBAAgB,GAAG3D,sBAAsB,CAACC,gBAAD,CAA/C;IACA,MAAM2D,qBAAqB,GAAG/C,qCAAqC,CAACM,gBAAD,CAAnE;IACA,MAAM0C,MAAM,GAAG,IAAIC,UAAJ,EAAf;IACAD,MAAM,CAACE,IAAP,CAAYJ,gBAAZ;IACAE,MAAM,CAACE,IAAP,CAAYH,qBAAZ;IACA,MAAM9C,QAAQ,GAAGkD,kBAAkB,CAACH,MAAD,CAAnC;IACA,KAAKI,yBAAL,CAA+BnD,QAA/B;IACA,MAAM,KAAKoD,aAAL,EAAN;EACD;EAEyC,MAA5Ba,4BAA4B,CAAC5D,gBAAD;IACxCA,gBAAgB,CAACuE,EAAjB,CAAoB,iBAApB,EAAuC,MAAOlG,QAAP;MACrC,KAAKsB,QAAL,CAAc2E,IAAd,CAAmB,iBAAnB,EAAsCjG,QAAtC;IACD,CAFD;IAGA2B,gBAAgB,CAACuE,EAAjB,CAAoB,cAApB,EAAoC,MAAOtB,OAAP;MAClC,MAAMgB,mBAAmB,GAAGC,WAAW,CAACjB,OAAD,CAAX,GAAuBA,OAAvB,eAAsCkB,QAAQ,CAAClB,OAAD,EAAU,EAAV,CAAR,CAAsBG,QAAtB,CAA+B,EAA/B,CAAtC,CAA5B;;MAEA,KAAKoB,SAAL,CAAe;QACbzC,WAAW,sCAAO,KAAKF,MAAL,CAAYE,WAAnB;UAAgCkB,OAAO,EAAEgB;QAAzC;MADE,CAAf;MAGA,MAAM,KAAK1B,aAAL,CAAmBvC,gBAAnB,CAAN;IACD,CAPD;EAQD;;SC/DayE,wBAAwBxB;EACtC,OAAO,CAACrD,GAAD,EAA4BC,GAA5B,EAAuD3B,IAAvD,EAAqFwG,GAArF;IACL,IAAI9E,GAAG,CAACzB,MAAJ,KAAe,gBAAnB,EAAqC;MACnC0B,GAAG,CAACvB,MAAJ,GAAa2E,OAAb;MACA,OAAOyB,GAAG,EAAV;IACD;IACD,OAAOxG,IAAI,EAAX;EACD,CAND;AAOD;SAEeyG,+BAA+BC;EAC7C,OAAO,CACLhF,GADK,EAELC,GAFK,EAGL3B,IAHK,EAILwG,GAJK;IAML,IAAI9E,GAAG,CAACzB,MAAJ,KAAe,wBAAnB,EAA6C;MAC3C0B,GAAG,CAACvB,MAAJ,GAAasG,cAAb;MACA,OAAOF,GAAG,EAAV;IACD;IACD,OAAOxG,IAAI,EAAX;EACD,CAXD;AAYD;SAEe2G,oBAAoBD;EAIlC,MAAM;IAAE3B,OAAF;IAAW6B;EAAX,IAAyBF,cAA/B;EACA,MAAMG,eAAe,GAAGC,qBAAqB,CAAC;IAAEF;EAAF,CAAD,CAA7C;EACA,MAAMG,iBAAiB,GAAG7F,eAAe,CAAC,CAACqF,uBAAuB,CAACxB,OAAD,CAAxB,EAAmC0B,8BAA8B,CAACC,cAAD,CAAjE,EAAmFG,eAAnF,CAAD,CAAzC;EACA,OAAO;IAAEE,iBAAF;IAAqBF;EAArB,CAAP;AACD;AC5BM,eAAeG,mBAAf;MAAmC;IACxCC,OADwC;IAExCC;EAFwC;EAOxC,MAAMC,oBAAoB,GAAIC,YAAD;IAC3B,MAAMC,SAAS,GAAGrF,IAAI,CAACO,MAAL,CAAY6E,YAAZ,CAAlB;IACA,MAAME,EAAE,GAAG5E,WAAW,CAAC6E,QAAZ,CAAqBC,OAAO,CAAC7E,IAAR,CAAa0E,SAAb,CAArB,CAAX;IACA,OAAOC,EAAP;EACD,CAJD;EAKA,MAAMG,gBAAgB,GAAG;IACvB,OAAOC,OAAO,CAACC,aAAR,CAAsBvC,MAAM,CAACzC,IAAP,CAAYsE,OAAZ,EAAqB,KAArB,CAAtB,CAAP;EACD,CAFD;EAGA,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC,MAAMf,yBAAyB,CAAC/C,aAA1B,CAAwC,0BAAxC,CAAN;EACjC,MAAMyE,OAAO,GAAGH,gBAAgB,EAAhC;EACA,MAAM7G,gBAAgB,GAAsB;IAC1CL,eAAe,EAAE;MACf,OAAO,CAACqH,OAAO,CAAC7F,SAAR,CAAkB8F,QAAlB,EAAD,CAAP;IACD,CAHyC;IAI1CjI,WAAW,EAAE,YAAY,CAACgI,OAAO,CAAC7F,SAAR,CAAkB8F,QAAlB,EAAD,CAJiB;IAM1C5G,aAAa,EAAE,YAAYgG,OANe;IAQ1CpG,eAAe,EAAE,MAAOa,GAAP;;MACf,IAAI,iBAACA,GAAG,CAACc,MAAL,wCAACK,YAAYP,OAAb,CAAJ,EAA0B;QACxB,MAAMH,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,SAA5B,CAAN;MACD;MACD,MAAMP,WAAW,GAAGuE,oBAAoB,iBAACzF,GAAG,CAACc,MAAL,iDAACQ,aAAYV,OAAb,CAAxC;MACAM,WAAW,CAACkF,WAAZ,CAAwBF,OAAxB;MACA,OAAOhF,WAAP;IACD,CAfyC;IAiB1C5B,WAAW,EAAE,MAAOU,GAAP;;MACX,IAAI,kBAACA,GAAG,CAACc,MAAL,yCAACS,aAAYX,OAAb,CAAJ,EAA0B;QACxB,MAAMH,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,SAA5B,CAAN;MACD;MACD,MAAM4E,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUC,QAAV,CAAmBxG,GAAG,CAACc,MAAJ,CAAWF,OAA9B,EAAuCsF,OAAO,CAACO,SAA/C,CAAlB;MACA,OAAOJ,SAAP;IACD,CAvByC;IAyB1CjH,sBAAsB,EAAE,MAAOY,GAAP;;MACtB,IAAI,kBAACA,GAAG,CAACc,MAAL,yCAAC8C,aAAYhD,OAAb,CAAJ,EAA0B;QACxB,MAAMH,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,SAA5B,CAAN;MACD;MACD,MAAMiF,oBAAoB,GAAGlB,sBAAsB,EAAnD;MACA,IAAI,CAACkB,oBAAL,EAA2B,MAAMjG,SAAS,CAACV,QAAV,CAAmBmE,MAAnB,CAA0B;QAAEtD,OAAO,EAAE,6BAAX;QAA0CuD,IAAI,EAAE;MAAhD,CAA1B,CAAN;MAE3B,MAAMjD,WAAW,GAAGuE,oBAAoB,iBAACzF,GAAG,CAACc,MAAL,iDAAC+C,aAAYjD,OAAb,CAAxC;MACAM,WAAW,CAACqF,IAAZ,CAAiBL,OAAjB;MAEA,MAAMS,GAAG,GAAG,MAAMD,oBAAoB,CAACtI,OAArB,CAAqC;QACrDG,MAAM,EAAE,iBAD6C;QAErDuC,MAAM,EAAE,CAACR,IAAI,CAACC,MAAL,CAAYW,WAAW,CAAC0F,SAAZ,EAAZ,CAAD;MAF6C,CAArC,CAAlB;MAIA,OAAO;QAAEvF,SAAS,EAAEsF;MAAb,CAAP;IACD,CAxCyC;IA0C1CtH,mBAAmB,EAAE,MAAOW,GAAP;;MACnB,IAAI,kBAACA,GAAG,CAACc,MAAL,yCAAC+F,aAAYjG,OAAb,KAAwB,kBAACZ,GAAG,CAACc,MAAL,yCAACgG,aAAYlG,OAAZ,CAAoBY,MAArB,CAA5B,EAAyD;QACvD,MAAMf,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,SAA5B,CAAN;MACD;MACD,MAAMsF,kBAAkB,GAAkB,EAA1C;MACA,KAAK,MAAMnB,EAAX,IAAiB,oBAAG,CAAC9E,MAAJ,8DAAYF,OAAZ,KAAuB,EAAxC,EAA4C;QAAA;QAC1C,MAAMM,WAAW,GAAGuE,oBAAoB,CAACG,EAAD,CAAxC;QACA1E,WAAW,CAACkF,WAAZ,CAAwBF,OAAxB;QACAa,kBAAkB,CAAC/D,IAAnB,CAAwB9B,WAAxB;MACD;MACD,OAAO6F,kBAAP;IACD;EArDyC,CAA5C;EAwDA,OAAO7H,gBAAP;AACD;;;;;;;;;;;;;;;;;;;;;;MC5DY8H,iCAAiCjF;EAC5CC;QAAY;MAAEC,MAAF;MAAUC;IAAV;IACV,MAAM;MAAED,MAAM,EAAE;QAAEE,WAAW,kCAAOF,MAAM,CAACE,WAAd;UAA2BC,cAAc,EAAEC,gBAAgB,CAACC;QAA5D;MAAb,CAAV;MAA+FJ;IAA/F,CAAN;EACD;EAWkB,MAAN+E,MAAM;IACjB,IAAI,CAAC,KAAK/E,KAAL,CAAWgF,UAAhB,EACE,MAAMzG,SAAS,CAACV,QAAV,CAAmBmE,MAAnB,CAA0B;MAAEtD,OAAO,EAAE,2EAAX;MAAwFuD,IAAI,EAAE;IAA9F,CAA1B,CAAN;IACF,MAAM,KAAKxB,aAAL,CAAmB,KAAKT,KAAL,CAAWgF,UAA9B,CAAN;IACA,OAAO,KAAKR,oBAAL,CAA0BtI,OAA1B,CAAqD;MAAEG,MAAM,EAAE;IAAV,CAArD,CAAP;EACD;EAEyB,MAAboE,aAAa,CAAC4C,OAAD;IACxB,MAAMrG,gBAAgB,GAAG,MAAMoG,mBAAmB,CAAC;MAAEC,OAAF;MAAWC,sBAAsB,EAAE,KAAKA,sBAAL,CAA4B2B,IAA5B,CAAiC,IAAjC;IAAnC,CAAD,CAAlD;IAEA,MAAMvE,gBAAgB,GAAG3D,sBAAsB,CAACC,gBAAD,CAA/C;IAEA,MAAM4D,MAAM,GAAG,IAAIC,UAAJ,EAAf;IACA,MAAM;MAAEsC;IAAF,IAAwBJ,mBAAmB,CAAC,KAAKhD,MAAL,CAAYE,WAAb,CAAjD;IACAW,MAAM,CAACE,IAAP,CAAY,KAAKoE,wBAAL,EAAZ;IACAtE,MAAM,CAACE,IAAP,CAAY,KAAKqE,oBAAL,EAAZ;IACAvE,MAAM,CAACE,IAAP,CAAYJ,gBAAZ;IACAE,MAAM,CAACE,IAAP,CAAYqC,iBAAZ;IAEA,MAAMtF,QAAQ,GAAGkD,kBAAkB,CAACH,MAAD,CAAnC;IAEA,KAAKI,yBAAL,CAA+BnD,QAA/B;IAEA,MAAM,KAAKoD,aAAL,EAAN;EACD;EAEyB,MAAbmE,aAAa,CAACxG,MAAD;IACxB,IAAI,CAAC,KAAK4F,oBAAV,EAAgC,MAAMjG,SAAS,CAACV,QAAV,CAAmBmE,MAAnB,CAA0B;MAAEtD,OAAO,EAAE,6BAAX;MAA0CuD,IAAI,EAAE;IAAhD,CAA1B,CAAN;IAChC,MAAMoD,WAAW,GAAG,MAAM,KAAKb,oBAAL,CAA0BtI,OAA1B,CAAmD;MAAEG,MAAM,EAAE;IAAV,CAAnD,CAA1B;IACA,IAAIgJ,WAAW,KAAKzG,MAAM,CAACoG,UAA3B,EAAuC;MACrC,MAAM,KAAKvE,aAAL,CAAmB7B,MAAM,CAACoG,UAA1B,CAAN;MACA,KAAKR,oBAAL,CAA0BhC,IAA1B,CAA+B,iBAA/B,EAAkD;QAChDjG,QAAQ,EAAE,MAAM,KAAKiI,oBAAL,CAA0BtI,OAA1B,CAAqD;UAAEG,MAAM,EAAE;QAAV,CAArD;MADgC,CAAlD;IAGD;EACF;EAEuB,MAAXgE,WAAW,CAACzB,MAAD;IACtB,IAAI,CAAC,KAAK4F,oBAAV,EAAgC,MAAMjG,SAAS,CAACV,QAAV,CAAmBmE,MAAnB,CAA0B;MAAEtD,OAAO,EAAE,6BAAX;MAA0CuD,IAAI,EAAE;IAAhD,CAA1B,CAAN;IAChC,MAAMhC,WAAW,GAAG,KAAKqF,cAAL,CAAoB1G,MAAM,CAACuC,OAA3B,CAApB;IACA,KAAKD,MAAL,CAAY;MACVC,OAAO,EAAE;IADC,CAAZ;IAGA,KAAKuB,SAAL,CAAe;MAAEzC;IAAF,CAAf;IACA,MAAMoD,OAAO,GAAG,MAAM,KAAKmB,oBAAL,CAA0BtI,OAA1B,CAAmD;MAAEG,MAAM,EAAE;IAAV,CAAnD,CAAtB;IACA,MAAM,KAAKoE,aAAL,CAAmB4C,OAAnB,CAAN;EACD;EAE4B,MAAbpC,aAAa;IAC3B,IAAI,CAAC,KAAKuD,oBAAV,EAAgC,MAAMjG,SAAS,CAACV,QAAV,CAAmBmE,MAAnB,CAA0B;MAAEtD,OAAO,EAAE,6BAAX;MAA0CuD,IAAI,EAAE;IAAhD,CAA1B,CAAN;IAChC,MAAMsD,MAAM,GAAG,MAAM,KAAKf,oBAAL,CAA0BtI,OAA1B,CAAmD;MACtEG,MAAM,EAAE,WAD8D;MAEtEuC,MAAM,EAAE;IAF8D,CAAnD,CAArB;IAIA,MAAM;MAAEqB;IAAF,IAAkB,KAAKF,MAA7B;IACA,IAAIwF,MAAM,KAAK,IAAf,EACE,MAAMjD,yBAAyB,CAACC,kBAA1B,8DAAmGtC,WAAW,CAAC+C,SAA/G,EAAN;IACF,KAAK9B,MAAL,CAAY;MAAEC,OAAO,EAAElB,WAAW,CAACkB;IAAvB,CAAZ;IACA,IAAI,KAAKnB,KAAL,CAAWmB,OAAX,KAAuBlB,WAAW,CAACkB,OAAvC,EAAgD;MAC9C,KAAKtD,QAAL,CAAc2E,IAAd,CAAmB,cAAnB,EAAmC,KAAKxC,KAAL,CAAWmB,OAA9C;MACA,KAAKtD,QAAL,CAAc2E,IAAd,CAAmB,SAAnB,EAA8B;QAAErB,OAAO,EAAE,KAAKnB,KAAL,CAAWmB;MAAtB,CAA9B;IACD;IACD,OAAO,KAAKnB,KAAL,CAAWmB,OAAlB;EACD;EAEO+D,wBAAwB;IAC9B,MAAMM,mBAAmB,GAAyB;MAChDhI,iBAAiB,EAAE,MAAOM,GAAP;QACjB,IAAI,CAACA,GAAG,CAACc,MAAT,EAAiB,MAAML,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,wBAA5B,CAAN;QACjB,MAAM;UAAE4B,OAAF;UAAWsE,SAAX;UAAsBC,OAAtB;UAA+BC,iBAA/B;UAAkDC;QAAlD,IAAqE9H,GAAG,CAACc,MAA/E;QAEA,IAAI,CAACuC,OAAL,EAAc,MAAM5C,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,gCAA5B,CAAN;QACd,IAAI,CAACmG,OAAD,IAAYA,OAAO,CAACpG,MAAR,KAAmB,CAAnC,EAAsC,MAAMf,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,gCAA5B,CAAN;QACtC,IAAI,CAACqG,cAAL,EAAqB,MAAMrH,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,uCAA5B,CAAN;QACrB,KAAKsG,QAAL,CAAc;UACZ3F,cAAc,EAAEC,gBAAgB,CAACC,MADrB;UAEZe,OAFY;UAGZ2E,MAAM,EAAE,eAAc,SAAd,kBAAc,WAAd,0BAAc,CAAEC,MAAhB,KAA0B,KAHtB;UAIZC,UAAU,EAAE,eAAc,SAAd,kBAAc,WAAd,0BAAc,CAAEC,IAAhB,KAAwB,QAJxB;UAKZC,WAAW,EAAET,SALD;UAMZzC,SAAS,EAAE0C,OAAO,CAAC,CAAD,CANN;UAOZS,aAAa,EAAE,kBAAiB,SAAjB,qBAAiB,WAAjB,6BAAiB,CAAG,CAAH,CAAjB,KAA0B;QAP7B,CAAd;MASD,CAjB+C;MAkBhD1I,iBAAiB,EAAE,MAAOK,GAAP;QACjB,IAAI,CAACA,GAAG,CAACc,MAAT,EAAiB,MAAML,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,wBAA5B,CAAN;QACjB,IAAI,CAACzB,GAAG,CAACc,MAAJ,CAAWuC,OAAhB,EAAyB,MAAM5C,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,iBAA5B,CAAN;QACzB,MAAM,KAAKc,WAAL,CAAiBvC,GAAG,CAACc,MAArB,CAAN;MACD;IAtB+C,CAAlD;IAwBA,MAAMwH,qBAAqB,GAAG7I,2BAA2B,CAACiI,mBAAD,CAAzD;IACA,OAAOY,qBAAP;EACD;EAEOjB,oBAAoB;IAC1B,MAAMkB,eAAe,GAAqB;MACxC1I,gBAAgB,EAAE,MAAOG,GAAP;QAChB,IAAI,CAACA,GAAG,CAACc,MAAT,EAAiB,MAAML,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,wBAA5B,CAAN;QACjB,IAAI,CAACzB,GAAG,CAACc,MAAJ,CAAWoG,UAAhB,EAA4B,MAAMzG,SAAS,CAACC,GAAV,CAAce,aAAd,CAA4B,oBAA5B,CAAN;QAC5B,MAAM;UAAEyF;QAAF,IAAiBlH,GAAG,CAACc,MAA3B;QACA,MAAM,KAAKwG,aAAL,CAAmB;UAAEJ;QAAF,CAAnB,CAAN;MACD;IANuC,CAA1C;IAQA,OAAOtH,uBAAuB,CAAC2I,eAAD,CAA9B;EACD;;gBAtHUvB,iDAKyB,MAAOlG,MAAP;EAIlC,MAAM0H,eAAe,GAAG,IAAIxB,wBAAJ,CAA6B;IAAE/E,MAAM,EAAE;MAAEE,WAAW,EAAErB,MAAM,CAACqB;IAAtB;EAAV,CAA7B,CAAxB;EACA,MAAMqG,eAAe,CAAC7F,aAAhB,CAA8B7B,MAAM,CAACyE,OAArC,CAAN;EACA,OAAOiD,eAAP;AACD;MC7BUC;EAGXzG,YAAYjC;;IACV,KAAKA,QAAL,GAAgBA,QAAhB;EACD;EAE2B,MAAflB,eAAe;IAC1B,MAAMJ,QAAQ,GAAG,MAAM,KAAKsB,QAAL,CAAc3B,OAAd,CAAgC;MACrDG,MAAM,EAAE,iBAD6C;MAErDuC,MAAM,EAAE;IAF6C,CAAhC,CAAvB;IAIA,OAAOrC,QAAP;EACD;EAEkC,MAAtBW,sBAAsB,CAAC8B,WAAD;IACjC,MAAM;MAAEG;IAAF,IAAgB,MAAM,KAAKtB,QAAL,CAAc3B,OAAd,CAA6C;MACvEG,MAAM,EAAE,wBAD+D;MAEvEuC,MAAM,EAAE;QACNF,OAAO,EAAEN,IAAI,CAACC,MAAL,CAAYW,WAAW,CAAC0F,SAAZ,CAAsB;UAAE8B,oBAAoB,EAAE;QAAxB,CAAtB,CAAZ;MADH;IAF+D,CAA7C,CAA5B;IAMA,OAAO;MAAErH;IAAF,CAAP;EACD;EAE2B,MAAflC,eAAe,CAAC+B,WAAD;IAC1B,MAAMyH,iBAAiB,GAAI,MAAM,KAAK5I,QAAL,CAAc3B,OAAd,CAAsB;MACrDG,MAAM,EAAE,iBAD6C;MAErDuC,MAAM,EAAE;QACNF,OAAO,EAAEN,IAAI,CAACC,MAAL,CAAYW,WAAW,CAAC0F,SAAZ,CAAsB;UAAE8B,oBAAoB,EAAE;QAAxB,CAAtB,CAAZ;MADH;IAF6C,CAAtB,CAAjC;IAMA,OAAOC,iBAAP;EACD;EAE+B,MAAnBtJ,mBAAmB,CAACuJ,YAAD;IAC9B,MAAM9E,QAAQ,GAAG8E,YAAY,CAACjH,GAAb,CAAkBT,WAAD;MAChC,OAAOZ,IAAI,CAACC,MAAL,CAAYW,WAAW,CAAC0F,SAAZ,CAAsB;QAAE8B,oBAAoB,EAAE;MAAxB,CAAtB,CAAZ,CAAP;IACD,CAFgB,CAAjB;IAGA,MAAMC,iBAAiB,GAAI,MAAM,KAAK5I,QAAL,CAAc3B,OAAd,CAAsB;MACrDG,MAAM,EAAE,qBAD6C;MAErDuC,MAAM,EAAE;QACNF,OAAO,EAAEkD;MADH;IAF6C,CAAtB,CAAjC;IAMA,OAAO6E,iBAAP;EACD;EAEuB,MAAXrJ,WAAW,CAACiE,IAAD;IACtB,MAAMlF,QAAQ,GAAG,MAAM,KAAK0B,QAAL,CAAc3B,OAAd,CAAkC;MACvDG,MAAM,EAAE,aAD+C;MAEvDuC,MAAM,EAAE;QACNF,OAAO,EAAE2C;MADH;IAF+C,CAAlC,CAAvB;IAMA,OAAOlF,QAAP;EACD;EAEmB,MAAPD,OAAO,CAAIyK,IAAJ;IAClB,MAAMnK,MAAM,GAAG,MAAM,KAAKqB,QAAL,CAAc3B,OAAd,CAAyByK,IAAzB,CAArB;IACA,OAAOnK,MAAP;EACD","names":["createGetAccountsMiddleware","getAccounts","createAsyncMiddleware","request","response","next","method","Error","accounts","result","undefined","createRequestAccountsMiddleware","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","mergeMiddleware","createChainSwitchMiddleware","addNewChainConfig","switchSolanaChain","createAccountMiddleware","updatePrivatekey","createInjectedProviderProxyMiddleware","provider","req","res","_next","getPhantomHandlers","injectedProvider","publicKey","bs58","encode","toBytes","ethErrors","rpc","methodNotSupported","message","decode","params","txn","Transaction","from","transaction","_req$params","txRes","signature","_req$params2","_req$params3","length","invalidParams","txns","map","msg","decodedMsg","PhantomInjectedProvider","BaseProvider","constructor","config","state","chainConfig","chainNamespace","CHAIN_NAMESPACES","SOLANA","switchChain","_","Promise","resolve","setupProvider","solanaMiddleware","injectedProviderProxy","engine","JRPCEngine","push","providerFromEngine","updateProviderEngineProxy","lookupNetwork","update","chainId","getTorusHandlers","data","toString","buf","Buffer","sendTx","_req$params4","_req$params5","messages","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","custom","code","connectedChainId","connectedHexChainId","isHexStrict","parseInt","WalletInitializationError","rpcConnectionError","emit","on","configure","createChainIdMiddleware","end","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","getProviderHandlers","privKey","getProviderEngineProxy","transactionGenerator","serializedTx","decodedTx","tx","populate","Message","keyPairGenerator","Keypair","fromSecretKey","keyPair","toBase58","partialSign","signedMsg","nacl","sign","detached","secretKey","_providerEngineProxy","sig","serialize","_req$params6","_req$params7","signedTransactions","SolanaPrivateKeyProvider","enable","privateKey","bind","getChainSwitchMiddleware","getAccountMiddleware","updateAccount","existingKey","getChainConfig","health","chainSwitchHandlers","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","name","displayName","blockExplorer","chainSwitchMiddleware","accountHandlers","providerFactory","SolanaWallet","requireAllSignatures","signedTransaction","transactions","args"],"sources":["../src/rpc/solanaRpcMiddlewares.ts","../src/providers/injectedProviders/injectedProviderProxy.ts","../src/providers/injectedProviders/phantom/providerHandlers.ts","../src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../src/providers/injectedProviders/torus/providerHandlers.ts","../src/providers/injectedProviders/torus/torusInjectedProvider.ts","../src/rpc/JrpcClient.ts","../src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../src/solanaWallet.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null]},"metadata":{},"sourceType":"module"}