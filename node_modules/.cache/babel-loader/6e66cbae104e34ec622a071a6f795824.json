{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableStore = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nclass ObservableStore extends safe_event_emitter_1.default {\n  constructor(initState) {\n    super();\n    if (initState) {\n      this._state = initState;\n    } else {\n      // Typecast/default state: Preserve existing behavior\n      this._state = {};\n    }\n  }\n  // wrapper around internal getState\n  getState() {\n    return this._getState();\n  }\n  // wrapper around internal putState\n  putState(newState) {\n    this._putState(newState);\n    this.emit('update', newState);\n  }\n  updateState(partialState) {\n    // if non-null object, merge\n    if (partialState && typeof partialState === 'object') {\n      const state = this.getState();\n      this.putState(Object.assign(Object.assign({}, state), partialState));\n      // if not object, use new value\n    } else {\n      this.putState(partialState);\n    }\n  }\n  // subscribe to changes\n  subscribe(handler) {\n    this.on('update', handler);\n  }\n  // unsubscribe to changes\n  unsubscribe(handler) {\n    this.removeListener('update', handler);\n  }\n  //\n  // private\n  //\n  // read from persistence\n  _getState() {\n    return this._state;\n  }\n  // write to persistence\n  _putState(newState) {\n    this._state = newState;\n  }\n}\nexports.ObservableStore = ObservableStore;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AAEA,MAAaA,eAAmB,SAAQC,4BAAgB;EAGtDC,YAAYC,SAAY;IACtB,KAAK,EAAE;IACP,IAAIA,SAAS,EAAE;MACb,IAAI,CAACC,MAAM,GAAGD,SAAS;KACxB,MAAM;MACL;MACA,IAAI,CAACC,MAAM,GAAG,EAAkB;;EAEpC;EAEA;EACAC,QAAQ;IACN,OAAO,IAAI,CAACC,SAAS,EAAE;EACzB;EAEA;EACAC,QAAQ,CAACC,QAAW;IAClB,IAAI,CAACC,SAAS,CAACD,QAAQ,CAAC;IACxB,IAAI,CAACE,IAAI,CAAC,QAAQ,EAAEF,QAAQ,CAAC;EAC/B;EAEAG,WAAW,CAACC,YAAwB;IAClC;IACA,IAAIA,YAAY,IAAI,OAAOA,YAAY,KAAK,QAAQ,EAAE;MACpD,MAAMC,KAAK,GAAG,IAAI,CAACR,QAAQ,EAAE;MAC7B,IAAI,CAACE,QAAQ,iCAAMM,KAAK,GAAKD,YAAY,EAAG;MAC5C;KACD,MAAM;MACL,IAAI,CAACL,QAAQ,CAACK,YAAY,CAAC;;EAE/B;EAEA;EACAE,SAAS,CAACC,OAA2B;IACnC,IAAI,CAACC,EAAE,CAAC,QAAQ,EAAED,OAAO,CAAC;EAC5B;EAEA;EACAE,WAAW,CAACF,OAA2B;IACrC,IAAI,CAACG,cAAc,CAAC,QAAQ,EAAEH,OAAO,CAAC;EACxC;EAEA;EACA;EACA;EAEA;EACUT,SAAS;IACjB,OAAO,IAAI,CAACF,MAAM;EACpB;EAEA;EACUK,SAAS,CAACD,QAAW;IAC7B,IAAI,CAACJ,MAAM,GAAGI,QAAQ;EACxB;;AAzDFW","names":["ObservableStore","safe_event_emitter_1","constructor","initState","_state","getState","_getState","putState","newState","_putState","emit","updateState","partialState","state","subscribe","handler","on","unsubscribe","removeListener","exports"],"sourceRoot":"","sources":["../src/ObservableStore.ts"],"sourcesContent":["import SafeEventEmitter from '@metamask/safe-event-emitter';\n\nexport class ObservableStore<T> extends SafeEventEmitter {\n  private _state: T;\n\n  constructor(initState: T) {\n    super();\n    if (initState) {\n      this._state = initState;\n    } else {\n      // Typecast/default state: Preserve existing behavior\n      this._state = {} as unknown as T;\n    }\n  }\n\n  // wrapper around internal getState\n  getState(): T {\n    return this._getState();\n  }\n\n  // wrapper around internal putState\n  putState(newState: T): void {\n    this._putState(newState);\n    this.emit('update', newState);\n  }\n\n  updateState(partialState: Partial<T>): void {\n    // if non-null object, merge\n    if (partialState && typeof partialState === 'object') {\n      const state = this.getState();\n      this.putState({ ...state, ...partialState });\n      // if not object, use new value\n    } else {\n      this.putState(partialState);\n    }\n  }\n\n  // subscribe to changes\n  subscribe(handler: (state: T) => void): void {\n    this.on('update', handler);\n  }\n\n  // unsubscribe to changes\n  unsubscribe(handler: (state: T) => void): void {\n    this.removeListener('update', handler);\n  }\n\n  //\n  // private\n  //\n\n  // read from persistence\n  protected _getState(): T {\n    return this._state;\n  }\n\n  // write to persistence\n  protected _putState(newState: T): void {\n    this._state = newState;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}