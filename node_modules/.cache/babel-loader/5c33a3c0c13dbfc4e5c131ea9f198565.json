{"ast":null,"code":"module.exports = getBlocksForRange;\nasync function getBlocksForRange(_ref) {\n  let {\n    provider,\n    fromBlock,\n    toBlock\n  } = _ref;\n  if (!fromBlock) fromBlock = toBlock;\n  const fromBlockNumber = hexToInt(fromBlock);\n  const toBlockNumber = hexToInt(toBlock);\n  const blockCountToQuery = toBlockNumber - fromBlockNumber + 1;\n  // load all blocks from old to new (inclusive)\n  const missingBlockNumbers = Array(blockCountToQuery).fill().map((_, index) => fromBlockNumber + index).map(intToHex);\n  const blockBodies = await Promise.all(missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false])));\n  return blockBodies;\n}\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  return Number.parseInt(hexString, 16);\n}\nfunction incrementHexInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  const value = hexToInt(hexString);\n  return intToHex(value + 1);\n}\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int;\n  const hexString = int.toString(16);\n  return '0x' + hexString;\n}\nfunction query(provider, method, params) {\n  return new Promise((resolve, reject) => {\n    provider.sendAsync({\n      id: 1,\n      jsonrpc: '2.0',\n      method,\n      params\n    }, (err, res) => {\n      if (err) return reject(err);\n      resolve(res.result);\n    });\n  });\n}","map":{"version":3,"names":["module","exports","getBlocksForRange","provider","fromBlock","toBlock","fromBlockNumber","hexToInt","toBlockNumber","blockCountToQuery","missingBlockNumbers","Array","fill","map","_","index","intToHex","blockBodies","Promise","all","blockNum","query","hexString","undefined","Number","parseInt","incrementHexInt","value","int","toString","method","params","resolve","reject","sendAsync","id","jsonrpc","err","res","result"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/eth-json-rpc-filters/getBlocksForRange.js"],"sourcesContent":["module.exports = getBlocksForRange\n\nasync function getBlocksForRange({ provider, fromBlock, toBlock }) {\n  if (!fromBlock) fromBlock = toBlock\n\n  const fromBlockNumber = hexToInt(fromBlock)\n  const toBlockNumber = hexToInt(toBlock)\n  const blockCountToQuery = toBlockNumber - fromBlockNumber + 1\n  // load all blocks from old to new (inclusive)\n  const missingBlockNumbers = Array(blockCountToQuery).fill()\n                              .map((_,index) => fromBlockNumber + index)\n                              .map(intToHex)\n  const blockBodies = await Promise.all(\n    missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false]))\n  )\n  return blockBodies\n}\n\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString\n  return Number.parseInt(hexString, 16)\n}\n\nfunction incrementHexInt(hexString){\n  if (hexString === undefined || hexString === null) return hexString\n  const value = hexToInt(hexString)\n  return intToHex(value + 1)\n}\n\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int\n  const hexString = int.toString(16)\n  return '0x' + hexString\n}\n\nfunction query(provider, method, params) {\n  return new Promise((resolve, reject) => {\n    provider.sendAsync({ id: 1, jsonrpc: '2.0', method, params }, (err, res) => {\n      if (err) return reject(err)\n      resolve(res.result)\n    })\n  })\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,iBAAiB;AAElC,eAAeA,iBAAiB,OAAmC;EAAA,IAAlC;IAAEC,QAAQ;IAAEC,SAAS;IAAEC;EAAQ,CAAC;EAC/D,IAAI,CAACD,SAAS,EAAEA,SAAS,GAAGC,OAAO;EAEnC,MAAMC,eAAe,GAAGC,QAAQ,CAACH,SAAS,CAAC;EAC3C,MAAMI,aAAa,GAAGD,QAAQ,CAACF,OAAO,CAAC;EACvC,MAAMI,iBAAiB,GAAGD,aAAa,GAAGF,eAAe,GAAG,CAAC;EAC7D;EACA,MAAMI,mBAAmB,GAAGC,KAAK,CAACF,iBAAiB,CAAC,CAACG,IAAI,EAAE,CAC9BC,GAAG,CAAC,CAACC,CAAC,EAACC,KAAK,KAAKT,eAAe,GAAGS,KAAK,CAAC,CACzCF,GAAG,CAACG,QAAQ,CAAC;EAC1C,MAAMC,WAAW,GAAG,MAAMC,OAAO,CAACC,GAAG,CACnCT,mBAAmB,CAACG,GAAG,CAACO,QAAQ,IAAIC,KAAK,CAAClB,QAAQ,EAAE,sBAAsB,EAAE,CAACiB,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,CAChG;EACD,OAAOH,WAAW;AACpB;AAEA,SAASV,QAAQ,CAACe,SAAS,EAAE;EAC3B,IAAIA,SAAS,KAAKC,SAAS,IAAID,SAAS,KAAK,IAAI,EAAE,OAAOA,SAAS;EACnE,OAAOE,MAAM,CAACC,QAAQ,CAACH,SAAS,EAAE,EAAE,CAAC;AACvC;AAEA,SAASI,eAAe,CAACJ,SAAS,EAAC;EACjC,IAAIA,SAAS,KAAKC,SAAS,IAAID,SAAS,KAAK,IAAI,EAAE,OAAOA,SAAS;EACnE,MAAMK,KAAK,GAAGpB,QAAQ,CAACe,SAAS,CAAC;EACjC,OAAON,QAAQ,CAACW,KAAK,GAAG,CAAC,CAAC;AAC5B;AAEA,SAASX,QAAQ,CAACY,GAAG,EAAE;EACrB,IAAIA,GAAG,KAAKL,SAAS,IAAIK,GAAG,KAAK,IAAI,EAAE,OAAOA,GAAG;EACjD,MAAMN,SAAS,GAAGM,GAAG,CAACC,QAAQ,CAAC,EAAE,CAAC;EAClC,OAAO,IAAI,GAAGP,SAAS;AACzB;AAEA,SAASD,KAAK,CAAClB,QAAQ,EAAE2B,MAAM,EAAEC,MAAM,EAAE;EACvC,OAAO,IAAIb,OAAO,CAAC,CAACc,OAAO,EAAEC,MAAM,KAAK;IACtC9B,QAAQ,CAAC+B,SAAS,CAAC;MAAEC,EAAE,EAAE,CAAC;MAAEC,OAAO,EAAE,KAAK;MAAEN,MAAM;MAAEC;IAAO,CAAC,EAAE,CAACM,GAAG,EAAEC,GAAG,KAAK;MAC1E,IAAID,GAAG,EAAE,OAAOJ,MAAM,CAACI,GAAG,CAAC;MAC3BL,OAAO,CAACM,GAAG,CAACC,MAAM,CAAC;IACrB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"script"}