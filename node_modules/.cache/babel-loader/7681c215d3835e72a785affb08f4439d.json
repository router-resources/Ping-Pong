{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.averageResponseTime = averageResponseTime;\nexports.canBeUsed = canBeUsed;\nexports.cleanOldMessages = cleanOldMessages;\nexports.close = close;\nexports.create = create;\nexports.createDatabase = createDatabase;\nexports[\"default\"] = void 0;\nexports.getAllMessages = getAllMessages;\nexports.getIdb = getIdb;\nexports.getMessagesHigherThan = getMessagesHigherThan;\nexports.getOldMessages = getOldMessages;\nexports.microSeconds = void 0;\nexports.onMessage = onMessage;\nexports.postMessage = postMessage;\nexports.removeMessageById = removeMessageById;\nexports.type = void 0;\nexports.writeMessage = writeMessage;\nvar _util = require(\"../util.js\");\nvar _obliviousSet = require(\"oblivious-set\");\nvar _options = require(\"../options\");\n\n/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n */\nvar microSeconds = _util.microSeconds;\nexports.microSeconds = microSeconds;\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\nvar type = 'idb';\nexports.type = type;\nfunction getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n  return false;\n}\nfunction createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  var openRequest = IndexedDB.open(dbName, 1);\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\nfunction writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var transaction = db.transaction([OBJECT_STORE_ID], 'readwrite');\n  return new Promise(function (res, rej) {\n    transaction.oncomplete = function () {\n      return res();\n    };\n    transaction.onerror = function (ev) {\n      return rej(ev);\n    };\n    var objectStore = transaction.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n  });\n}\nfunction getAllMessages(db) {\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nfunction getMessagesHigherThan(db, lastCursorId) {\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n  return new Promise(function (res) {\n    openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nfunction removeMessageById(db, id) {\n  var request = db.transaction([OBJECT_STORE_ID], 'readwrite').objectStore(OBJECT_STORE_ID)[\"delete\"](id);\n  return new Promise(function (res) {\n    request.onsuccess = function () {\n      return res();\n    };\n  });\n}\nfunction getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        var msgObk = cursor.value;\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nfunction cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return Promise.all(tooOld.map(function (msgObj) {\n      return removeMessageById(db, msgObj.id);\n    }));\n  });\n}\nfunction create(channelName, options) {\n  options = (0, _options.fillOptionsWithDefaults)(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: (0, _util.randomToken)(),\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new _obliviousSet.ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: _util.PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n    _readLoop(state);\n    return state;\n  });\n}\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return (0, _util.sleep)(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return _util.PROMISE_RESOLVED_VOID; // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return _util.PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */.filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return _util.PROMISE_RESOLVED_VOID;\n  });\n}\nfunction close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\nfunction postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if ((0, _util.randomInt)(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\nfunction onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\nfunction canBeUsed() {\n  if (_util.isNode) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\nfunction averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\nvar _default = {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};\nexports[\"default\"] = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","averageResponseTime","canBeUsed","cleanOldMessages","close","create","createDatabase","getAllMessages","getIdb","getMessagesHigherThan","getOldMessages","microSeconds","onMessage","postMessage","removeMessageById","type","writeMessage","_util","require","_obliviousSet","_options","DB_PREFIX","OBJECT_STORE_ID","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","channelName","IndexedDB","dbName","openRequest","open","onupgradeneeded","ev","db","target","result","createObjectStore","keyPath","autoIncrement","dbPromise","Promise","res","rej","onerror","onsuccess","readerUuid","messageJson","time","Date","getTime","writeObject","uuid","data","transaction","oncomplete","objectStore","add","ret","openCursor","cursor","push","lastCursorId","keyRangeValue","IDBKeyRange","bound","Infinity","e","id","request","ttl","olderThen","msgObk","then","tooOld","all","map","msgObj","options","fillOptionsWithDefaults","state","closed","randomToken","eMIs","ObliviousSet","idb","writeBlockPromise","PROMISE_RESOLVED_VOID","messagesCallback","readQueuePromises","onclose","_readLoop","readNewMessages","sleep","fallbackInterval","_filterMessage","has","messagesCallbackTime","newerMessages","useMessages","filter","sort","msgObjA","msgObjB","forEach","channelState","randomInt","fn","isNode","_default"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/broadcast-channel/dist/lib/methods/indexed-db.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.averageResponseTime = averageResponseTime;\nexports.canBeUsed = canBeUsed;\nexports.cleanOldMessages = cleanOldMessages;\nexports.close = close;\nexports.create = create;\nexports.createDatabase = createDatabase;\nexports[\"default\"] = void 0;\nexports.getAllMessages = getAllMessages;\nexports.getIdb = getIdb;\nexports.getMessagesHigherThan = getMessagesHigherThan;\nexports.getOldMessages = getOldMessages;\nexports.microSeconds = void 0;\nexports.onMessage = onMessage;\nexports.postMessage = postMessage;\nexports.removeMessageById = removeMessageById;\nexports.type = void 0;\nexports.writeMessage = writeMessage;\n\nvar _util = require(\"../util.js\");\n\nvar _obliviousSet = require(\"oblivious-set\");\n\nvar _options = require(\"../options\");\n\n/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n */\nvar microSeconds = _util.microSeconds;\nexports.microSeconds = microSeconds;\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\nvar type = 'idb';\nexports.type = type;\n\nfunction getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n\n  return false;\n}\n\nfunction createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  var openRequest = IndexedDB.open(dbName, 1);\n\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\n\nfunction writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var transaction = db.transaction([OBJECT_STORE_ID], 'readwrite');\n  return new Promise(function (res, rej) {\n    transaction.oncomplete = function () {\n      return res();\n    };\n\n    transaction.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    var objectStore = transaction.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n  });\n}\n\nfunction getAllMessages(db) {\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction getMessagesHigherThan(db, lastCursorId) {\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n\n  return new Promise(function (res) {\n    openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction removeMessageById(db, id) {\n  var request = db.transaction([OBJECT_STORE_ID], 'readwrite').objectStore(OBJECT_STORE_ID)[\"delete\"](id);\n  return new Promise(function (res) {\n    request.onsuccess = function () {\n      return res();\n    };\n  });\n}\n\nfunction getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        var msgObk = cursor.value;\n\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return Promise.all(tooOld.map(function (msgObj) {\n      return removeMessageById(db, msgObj.id);\n    }));\n  });\n}\n\nfunction create(channelName, options) {\n  options = (0, _options.fillOptionsWithDefaults)(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: (0, _util.randomToken)(),\n\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new _obliviousSet.ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: _util.PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n\n    _readLoop(state);\n\n    return state;\n  });\n}\n\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return (0, _util.sleep)(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\n\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return _util.PROMISE_RESOLVED_VOID; // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return _util.PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */\n    .filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return _util.PROMISE_RESOLVED_VOID;\n  });\n}\n\nfunction close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\n\nfunction postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if ((0, _util.randomInt)(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\n\nfunction onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\n\nfunction canBeUsed() {\n  if (_util.isNode) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\n\nfunction averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\n\nvar _default = {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};\nexports[\"default\"] = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}