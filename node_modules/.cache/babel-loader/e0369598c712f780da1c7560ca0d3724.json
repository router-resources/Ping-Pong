{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EthereumProviderError = exports.EthereumRpcError = void 0;\nconst fast_safe_stringify_1 = require(\"fast-safe-stringify\");\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n * Permits any integer error code.\n */\nclass EthereumRpcError extends Error {\n  constructor(code, message, data) {\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    super(message);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n  /**\n   * Returns a plain object with all public class properties.\n   */\n  serialize() {\n    const serialized = {\n      code: this.code,\n      message: this.message\n    };\n    if (this.data !== undefined) {\n      serialized.data = this.data;\n    }\n    if (this.stack) {\n      serialized.stack = this.stack;\n    }\n    return serialized;\n  }\n  /**\n   * Return a string representation of the serialized error, omitting\n   * any circular references.\n   */\n  toString() {\n    return fast_safe_stringify_1.default(this.serialize(), stringifyReplacer, 2);\n  }\n}\nexports.EthereumRpcError = EthereumRpcError;\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nclass EthereumProviderError extends EthereumRpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the 1000 <= 4999 range.\n   */\n  constructor(code, message, data) {\n    if (!isValidEthProviderCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(code, message, data);\n  }\n}\nexports.EthereumProviderError = EthereumProviderError;\n// Internal\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return undefined;\n  }\n  return value;\n}","map":{"version":3,"mappings":";;;;;;AAAA;AASA;;;;;AAKA,MAAaA,gBAAoB,SAAQC,KAAK;EAM5CC,YAAYC,IAAY,EAAEC,OAAe,EAAEC,IAAQ;IAEjD,IAAI,CAACC,MAAM,CAACC,SAAS,CAACJ,IAAI,CAAC,EAAE;MAC3B,MAAM,IAAIF,KAAK,CACb,4BAA4B,CAC7B;;IAEH,IAAI,CAACG,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC3C,MAAM,IAAIH,KAAK,CACb,sCAAsC,CACvC;;IAGH,KAAK,CAACG,OAAO,CAAC;IACd,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAIE,IAAI,KAAKG,SAAS,EAAE;MACtB,IAAI,CAACH,IAAI,GAAGA,IAAI;;EAEpB;EAEA;;;EAGAI,SAAS;IACP,MAAMC,UAAU,GAA+B;MAC7CP,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,OAAO,EAAE,IAAI,CAACA;KACf;IACD,IAAI,IAAI,CAACC,IAAI,KAAKG,SAAS,EAAE;MAC3BE,UAAU,CAACL,IAAI,GAAG,IAAI,CAACA,IAAI;;IAE7B,IAAI,IAAI,CAACM,KAAK,EAAE;MACdD,UAAU,CAACC,KAAK,GAAG,IAAI,CAACA,KAAK;;IAE/B,OAAOD,UAAU;EACnB;EAEA;;;;EAIAE,QAAQ;IACN,OAAOC,6BAAa,CAClB,IAAI,CAACJ,SAAS,EAAE,EAChBK,iBAAiB,EACjB,CAAC,CACF;EACH;;AArDFC;AAwDA;;;;AAIA,MAAaC,qBAAyB,SAAQhB,gBAAmB;EAE/D;;;;EAIAE,YAAYC,IAAY,EAAEC,OAAe,EAAEC,IAAQ;IAEjD,IAAI,CAACY,sBAAsB,CAACd,IAAI,CAAC,EAAE;MACjC,MAAM,IAAIF,KAAK,CACb,2DAA2D,CAC5D;;IAGH,KAAK,CAACE,IAAI,EAAEC,OAAO,EAAEC,IAAI,CAAC;EAC5B;;AAfFU;AAkBA;AAEA,SAASE,sBAAsB,CAACd,IAAY;EAC1C,OAAOG,MAAM,CAACC,SAAS,CAACJ,IAAI,CAAC,IAAIA,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAI;AAC/D;AAEA,SAASW,iBAAiB,CAACI,CAAU,EAAEC,KAAc;EACnD,IAAIA,KAAK,KAAK,YAAY,EAAE;IAC1B,OAAOX,SAAS;;EAElB,OAAOW,KAAK;AACd","names":["EthereumRpcError","Error","constructor","code","message","data","Number","isInteger","undefined","serialize","serialized","stack","toString","fast_safe_stringify_1","stringifyReplacer","exports","EthereumProviderError","isValidEthProviderCode","_","value"],"sourceRoot":"","sources":["../src/classes.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}