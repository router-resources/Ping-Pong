{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BaseAdapter, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, getChainConfig, WalletLoginError } from '@web3auth/base';\nclass MetamaskAdapter extends BaseAdapter {\n  constructor() {\n    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n    _defineProperty(this, \"rehydrated\", false);\n    _defineProperty(this, \"metamaskProvider\", null);\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n    return null;\n  }\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n  async init(options) {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n  setAdapterSettings(_) {}\n  async connect() {\n    super.checkConnectionRequirements(); // set default to mainnet\n\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n      if (chainId !== this.chainConfig.chainId) {\n        await this.switchChain(this.chainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n  async disconnect() {\n    var _this$provider;\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n  async switchChain(chainConfig) {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId\n        }]\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainConfig.chainId,\n            chainName: chainConfig.displayName,\n            rpcUrls: [chainConfig.rpcTarget]\n          }]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\nexport { MetamaskAdapter };","map":{"version":3,"mappings":"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","names":["MetamaskAdapter","BaseAdapter","constructor","adapterOptions","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","WALLET_ADAPTERS","METAMASK","ADAPTER_STATUS","NOT_READY","chainConfig","provider","status","CONNECTED","metamaskProvider","_","Error","init","options","checkInitializationRequirements","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","notInstalled","READY","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","error","ERRORED","setAdapterSettings","checkConnectionRequirements","getChainConfig","CONNECTING","adapter","WalletLoginError","notConnectedError","request","method","chainId","switchChain","once","disconnect","reconnected","connectionError","cleanup","disconnectionError","removeAllListeners","DISCONNECTED","getUserInfo","params","switchError","code","chainName","displayName","rpcUrls","rpcTarget"],"sources":["../src/metamaskAdapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}