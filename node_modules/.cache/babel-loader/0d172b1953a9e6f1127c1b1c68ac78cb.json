{"ast":null,"code":"var BufferUtil = require('../utils/buffer');\nvar GF = require('./galois-field');\n\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Buffer} p1 Polynomial\n * @param  {Buffer} p2 Polynomial\n * @return {Buffer}    Product of p1 and p2\n */\nexports.mul = function mul(p1, p2) {\n  var coeff = BufferUtil.alloc(p1.length + p2.length - 1);\n  for (var i = 0; i < p1.length; i++) {\n    for (var j = 0; j < p2.length; j++) {\n      coeff[i + j] ^= GF.mul(p1[i], p2[j]);\n    }\n  }\n  return coeff;\n};\n\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Buffer} divident Polynomial\n * @param  {Buffer} divisor  Polynomial\n * @return {Buffer}          Remainder\n */\nexports.mod = function mod(divident, divisor) {\n  var result = BufferUtil.from(divident);\n  while (result.length - divisor.length >= 0) {\n    var coeff = result[0];\n    for (var i = 0; i < divisor.length; i++) {\n      result[i] ^= GF.mul(divisor[i], coeff);\n    }\n\n    // remove all zeros from buffer head\n    var offset = 0;\n    while (offset < result.length && result[offset] === 0) offset++;\n    result = result.slice(offset);\n  }\n  return result;\n};\n\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Buffer}        Buffer containing polynomial coefficients\n */\nexports.generateECPolynomial = function generateECPolynomial(degree) {\n  var poly = BufferUtil.from([1]);\n  for (var i = 0; i < degree; i++) {\n    poly = exports.mul(poly, [1, GF.exp(i)]);\n  }\n  return poly;\n};","map":{"version":3,"names":["BufferUtil","require","GF","exports","mul","p1","p2","coeff","alloc","length","i","j","mod","divident","divisor","result","from","offset","slice","generateECPolynomial","degree","poly","exp"],"sources":["/Users/shivamsoni/Desktop/router/pingspong/Ping-Pong/node_modules/qrcode/lib/core/polynomial.js"],"sourcesContent":["var BufferUtil = require('../utils/buffer')\nvar GF = require('./galois-field')\n\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Buffer} p1 Polynomial\n * @param  {Buffer} p2 Polynomial\n * @return {Buffer}    Product of p1 and p2\n */\nexports.mul = function mul (p1, p2) {\n  var coeff = BufferUtil.alloc(p1.length + p2.length - 1)\n\n  for (var i = 0; i < p1.length; i++) {\n    for (var j = 0; j < p2.length; j++) {\n      coeff[i + j] ^= GF.mul(p1[i], p2[j])\n    }\n  }\n\n  return coeff\n}\n\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Buffer} divident Polynomial\n * @param  {Buffer} divisor  Polynomial\n * @return {Buffer}          Remainder\n */\nexports.mod = function mod (divident, divisor) {\n  var result = BufferUtil.from(divident)\n\n  while ((result.length - divisor.length) >= 0) {\n    var coeff = result[0]\n\n    for (var i = 0; i < divisor.length; i++) {\n      result[i] ^= GF.mul(divisor[i], coeff)\n    }\n\n    // remove all zeros from buffer head\n    var offset = 0\n    while (offset < result.length && result[offset] === 0) offset++\n    result = result.slice(offset)\n  }\n\n  return result\n}\n\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Buffer}        Buffer containing polynomial coefficients\n */\nexports.generateECPolynomial = function generateECPolynomial (degree) {\n  var poly = BufferUtil.from([1])\n  for (var i = 0; i < degree; i++) {\n    poly = exports.mul(poly, [1, GF.exp(i)])\n  }\n\n  return poly\n}\n"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC3C,IAAIC,EAAE,GAAGD,OAAO,CAAC,gBAAgB,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,OAAO,CAACC,GAAG,GAAG,SAASA,GAAG,CAAEC,EAAE,EAAEC,EAAE,EAAE;EAClC,IAAIC,KAAK,GAAGP,UAAU,CAACQ,KAAK,CAACH,EAAE,CAACI,MAAM,GAAGH,EAAE,CAACG,MAAM,GAAG,CAAC,CAAC;EAEvD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,EAAE,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;IAClC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,EAAE,CAACG,MAAM,EAAEE,CAAC,EAAE,EAAE;MAClCJ,KAAK,CAACG,CAAC,GAAGC,CAAC,CAAC,IAAIT,EAAE,CAACE,GAAG,CAACC,EAAE,CAACK,CAAC,CAAC,EAAEJ,EAAE,CAACK,CAAC,CAAC,CAAC;IACtC;EACF;EAEA,OAAOJ,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,OAAO,CAACS,GAAG,GAAG,SAASA,GAAG,CAAEC,QAAQ,EAAEC,OAAO,EAAE;EAC7C,IAAIC,MAAM,GAAGf,UAAU,CAACgB,IAAI,CAACH,QAAQ,CAAC;EAEtC,OAAQE,MAAM,CAACN,MAAM,GAAGK,OAAO,CAACL,MAAM,IAAK,CAAC,EAAE;IAC5C,IAAIF,KAAK,GAAGQ,MAAM,CAAC,CAAC,CAAC;IAErB,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,OAAO,CAACL,MAAM,EAAEC,CAAC,EAAE,EAAE;MACvCK,MAAM,CAACL,CAAC,CAAC,IAAIR,EAAE,CAACE,GAAG,CAACU,OAAO,CAACJ,CAAC,CAAC,EAAEH,KAAK,CAAC;IACxC;;IAEA;IACA,IAAIU,MAAM,GAAG,CAAC;IACd,OAAOA,MAAM,GAAGF,MAAM,CAACN,MAAM,IAAIM,MAAM,CAACE,MAAM,CAAC,KAAK,CAAC,EAAEA,MAAM,EAAE;IAC/DF,MAAM,GAAGA,MAAM,CAACG,KAAK,CAACD,MAAM,CAAC;EAC/B;EAEA,OAAOF,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,OAAO,CAACgB,oBAAoB,GAAG,SAASA,oBAAoB,CAAEC,MAAM,EAAE;EACpE,IAAIC,IAAI,GAAGrB,UAAU,CAACgB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/B,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,MAAM,EAAEV,CAAC,EAAE,EAAE;IAC/BW,IAAI,GAAGlB,OAAO,CAACC,GAAG,CAACiB,IAAI,EAAE,CAAC,CAAC,EAAEnB,EAAE,CAACoB,GAAG,CAACZ,CAAC,CAAC,CAAC,CAAC;EAC1C;EAEA,OAAOW,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"script"}