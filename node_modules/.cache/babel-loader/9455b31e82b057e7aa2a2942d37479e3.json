{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar types_1 = require(\"./types\");\nvar util_1 = require(\"./util\");\nvar TRANSACTION_TYPE = 2;\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\nvar FeeMarketEIP1559Transaction = /** @class */function (_super) {\n  __extends(FeeMarketEIP1559Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  function FeeMarketEIP1559Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _a, _b;\n    var _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    })) || this;\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n    _this.DEFAULT_HARDFORK = 'london';\n    var chainId = txData.chainId,\n      accessList = txData.accessList,\n      maxFeePerGas = txData.maxFeePerGas,\n      maxPriorityFeePerGas = txData.maxPriorityFeePerGas;\n    _this.common = _this._getCommon(opts.common, chainId);\n    _this.chainId = _this.common.chainIdBN();\n    if (!_this.common.isActivatedEIP(1559)) {\n      throw new Error('EIP-1559 not enabled on Common');\n    }\n    _this.activeCapabilities = _this.activeCapabilities.concat([1559, 2718, 2930]);\n    // Populate the access list fields\n    var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n    _this.accessList = accessListData.accessList;\n    _this.AccessListJSON = accessListData.AccessListJSON;\n    // Verify the access list format.\n    util_1.AccessLists.verifyAccessList(_this.accessList);\n    _this.maxFeePerGas = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n    _this.maxPriorityFeePerGas = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n    _this._validateCannotExceedMaxInteger({\n      maxFeePerGas: _this.maxFeePerGas,\n      maxPriorityFeePerGas: _this.maxPriorityFeePerGas\n    });\n    if (_this.gasLimit.mul(_this.maxFeePerGas).gt(ethereumjs_util_1.MAX_INTEGER)) {\n      var msg = _this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n      throw new Error(msg);\n    }\n    if (_this.maxFeePerGas.lt(_this.maxPriorityFeePerGas)) {\n      var msg = _this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n      throw new Error(msg);\n    }\n    if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\n      var msg = _this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n      throw new Error(msg);\n    }\n    if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      var msg = _this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n      throw new Error(msg);\n    }\n    var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n    if (freeze) {\n      Object.freeze(_this);\n    }\n    return _this;\n  }\n  Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"senderR\", {\n    /**\n     * EIP-2930 alias for `r`\n     *\n     * @deprecated use `r` instead\n     */\n    get: function () {\n      return this.r;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"senderS\", {\n    /**\n     * EIP-2930 alias for `s`\n     *\n     * @deprecated use `s` instead\n     */\n    get: function () {\n      return this.s;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"yParity\", {\n    /**\n     * EIP-2930 alias for `v`\n     *\n     * @deprecated use `v` instead\n     */\n    get: function () {\n      return this.v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  FeeMarketEIP1559Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return new FeeMarketEIP1559Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   */\n  FeeMarketEIP1559Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\"Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: \".concat(TRANSACTION_TYPE, \", received: \").concat(serialized.slice(0, 1).toString('hex')));\n    }\n    var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    }\n    return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link FeeMarketEIP1559Transaction.fromSerializedTx})\n   *\n   * Note: This means that the Buffer should start with 0x01.\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link FeeMarketEIP1559Transaction.fromSerializedTx} constructor\n   */\n  FeeMarketEIP1559Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return FeeMarketEIP1559Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   */\n  FeeMarketEIP1559Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    if (values.length !== 9 && values.length !== 12) {\n      throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n    }\n    var _a = __read(values, 12),\n      chainId = _a[0],\n      nonce = _a[1],\n      maxPriorityFeePerGas = _a[2],\n      maxFeePerGas = _a[3],\n      gasLimit = _a[4],\n      to = _a[5],\n      value = _a[6],\n      data = _a[7],\n      accessList = _a[8],\n      v = _a[9],\n      r = _a[10],\n      s = _a[11];\n    (0, ethereumjs_util_1.validateNoLeadingZeroes)({\n      nonce: nonce,\n      maxPriorityFeePerGas: maxPriorityFeePerGas,\n      maxFeePerGas: maxFeePerGas,\n      gasLimit: gasLimit,\n      value: value,\n      v: v,\n      r: r,\n      s: s\n    });\n    return new FeeMarketEIP1559Transaction({\n      chainId: new ethereumjs_util_1.BN(chainId),\n      nonce: nonce,\n      maxPriorityFeePerGas: maxPriorityFeePerGas,\n      maxFeePerGas: maxFeePerGas,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      accessList: accessList !== null && accessList !== void 0 ? accessList : [],\n      v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  FeeMarketEIP1559Transaction.prototype.getDataFee = function () {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n    var cost = _super.prototype.getDataFee.call(this);\n    cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork()\n      };\n    }\n    return cost;\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   * @param baseFee The base fee of the block (will be set to 0 if not provided)\n   */\n  FeeMarketEIP1559Transaction.prototype.getUpfrontCost = function (baseFee) {\n    if (baseFee === void 0) {\n      baseFee = new ethereumjs_util_1.BN(0);\n    }\n    var inclusionFeePerGas = ethereumjs_util_1.BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(baseFee));\n    var gasPrice = inclusionFeePerGas.add(baseFee);\n    return this.gasLimit.mul(gasPrice).add(this.value);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   *\n   * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n   */\n  FeeMarketEIP1559Transaction.prototype.raw = function () {\n    return [(0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.chainId), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.maxPriorityFeePerGas), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.maxFeePerGas), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value), this.data, this.accessList, this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]), this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]), this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the EIP-1559 transaction.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n  FeeMarketEIP1559Transaction.prototype.serialize = function () {\n    var base = this.raw();\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n  };\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  FeeMarketEIP1559Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n    var base = this.raw().slice(0, 9);\n    var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n    if (hashMessage) {\n      return (0, ethereumjs_util_1.keccak256)(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  FeeMarketEIP1559Transaction.prototype.hash = function () {\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n      throw new Error(msg);\n    }\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = (0, ethereumjs_util_1.keccak256)(this.serialize());\n      }\n      return this.cache.hash;\n    }\n    return (0, ethereumjs_util_1.keccak256)(this.serialize());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  FeeMarketEIP1559Transaction.prototype.getMessageToVerifySignature = function () {\n    return this.getMessageToSign();\n  };\n  /**\n   * Returns the public key of the sender\n   */\n  FeeMarketEIP1559Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('Cannot call this method if transaction is not signed');\n      throw new Error(msg);\n    }\n    var msgHash = this.getMessageToVerifySignature();\n    // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n      throw new Error(msg);\n    }\n    var _b = this,\n      v = _b.v,\n      r = _b.r,\n      s = _b.s;\n    try {\n      return (0, ethereumjs_util_1.ecrecover)(msgHash, v.addn(27),\n      // Recover the 27 which was stripped from ecsign\n      (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s));\n    } catch (e) {\n      var msg = this._errorMsg('Invalid Signature');\n      throw new Error(msg);\n    }\n  };\n  FeeMarketEIP1559Transaction.prototype._processSignature = function (v, r, s) {\n    var opts = {\n      common: this.common\n    };\n    return FeeMarketEIP1559Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n      maxFeePerGas: this.maxFeePerGas,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: new ethereumjs_util_1.BN(v - 27),\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  FeeMarketEIP1559Transaction.prototype.toJSON = function () {\n    var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\n    return {\n      chainId: (0, ethereumjs_util_1.bnToHex)(this.chainId),\n      nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n      maxPriorityFeePerGas: (0, ethereumjs_util_1.bnToHex)(this.maxPriorityFeePerGas),\n      maxFeePerGas: (0, ethereumjs_util_1.bnToHex)(this.maxFeePerGas),\n      gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, ethereumjs_util_1.bnToHex)(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined\n    };\n  };\n  /**\n   * Return a compact error string representation of the object\n   */\n  FeeMarketEIP1559Transaction.prototype.errorStr = function () {\n    var errorStr = this._getSharedErrorPostfix();\n    errorStr += \" maxFeePerGas=\".concat(this.maxFeePerGas, \" maxPriorityFeePerGas=\").concat(this.maxPriorityFeePerGas);\n    return errorStr;\n  };\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  FeeMarketEIP1559Transaction.prototype._errorMsg = function (msg) {\n    return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n  };\n  return FeeMarketEIP1559Transaction;\n}(baseTransaction_1.BaseTransaction);\nexports.default = FeeMarketEIP1559Transaction;","map":{"version":3,"mappings":"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","names":["TRANSACTION_TYPE","TRANSACTION_TYPE_BUFFER","Buffer","from","toString","padStart","__extends","txData","opts","_super","type","_this","accessList","maxFeePerGas","maxPriorityFeePerGas","common","_getCommon","chainId","chainIdBN","isActivatedEIP","Error","activeCapabilities","concat","accessListData","util_1","getAccessListData","AccessListJSON","verifyAccessList","ethereumjs_util_1","_validateCannotExceedMaxInteger","gasLimit","mul","gt","msg","_errorMsg","lt","v","eqn","gteHardfork","s","types_1","freeze","Object","FeeMarketEIP1559Transaction","r","serialized","slice","equals","values","decode","Array","isArray","fromValuesArray","fromSerializedTx","length","nonce","to","value","data","undefined","cache","dataFee","hardfork","cost","getDataFee","iaddn","getDataFeeEIP2930","isFrozen","baseFee","inclusionFeePerGas","min","sub","gasPrice","add","buf","base","raw","encode","hashMessage","message","isSigned","hash","serialize","getMessageToSign","msgHash","getMessageToVerifySignature","addn","e","fromTxData","accessListJSON","getAccessListJSON","errorStr","_getSharedErrorPostfix","baseTransaction_1"],"sourceRoot":"","sources":["../src/eip1559Transaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}