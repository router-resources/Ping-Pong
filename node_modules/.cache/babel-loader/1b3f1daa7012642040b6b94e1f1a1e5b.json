{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.storeAsStream = void 0;\nconst stream_1 = require(\"stream\");\nclass ObservableStoreStream extends stream_1.Duplex {\n  constructor(obsStore) {\n    super({\n      // pass values, not serializations\n      objectMode: true\n    });\n    // dont buffer outgoing updates\n    this.resume();\n    // save handler so we can unsubscribe later\n    this.handler = state => this.push(state);\n    // subscribe to obsStore changes\n    this.obsStore = obsStore;\n    this.obsStore.subscribe(this.handler);\n  }\n  // emit current state on new destination\n  pipe(dest, options) {\n    const result = super.pipe(dest, options);\n    dest.write(this.obsStore.getState());\n    return result;\n  }\n  // write from incoming stream to state\n  _write(chunk, _encoding, callback) {\n    this.obsStore.putState(chunk);\n    callback();\n  }\n  // noop - outgoing stream is asking us if we have data we arent giving it\n  _read(_size) {\n    return undefined;\n  }\n  // unsubscribe from event emitter\n  _destroy(err, callback) {\n    this.obsStore.unsubscribe(this.handler);\n    super._destroy(err, callback);\n  }\n}\nfunction storeAsStream(obsStore) {\n  return new ObservableStoreStream(obsStore);\n}\nexports.storeAsStream = storeAsStream;","map":{"version":3,"mappings":";;;;;;AAAA;AAIA,MAAMA,qBAAyB,SAAQC,eAAY;EAKjDC,YAAYC,QAA4B;IACtC,KAAK,CAAC;MACJ;MACAC,UAAU,EAAE;KACb,CAAC;IACF;IACA,IAAI,CAACC,MAAM,EAAE;IACb;IACA,IAAI,CAACC,OAAO,GAAIC,KAAQ,IAAK,IAAI,CAACC,IAAI,CAACD,KAAK,CAAC;IAC7C;IACA,IAAI,CAACJ,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACA,QAAQ,CAACM,SAAS,CAAC,IAAI,CAACH,OAAO,CAAC;EACvC;EAEA;EACAI,IAAI,CACFC,IAAO,EACPC,OAA2B;IAE3B,MAAMC,MAAM,GAAG,KAAK,CAACH,IAAI,CAACC,IAAI,EAAEC,OAAO,CAAC;IACxCD,IAAI,CAACG,KAAK,CAAC,IAAI,CAACX,QAAQ,CAACY,QAAQ,EAAS,CAAC;IAC3C,OAAOF,MAAM;EACf;EAEA;EACAG,MAAM,CACJC,KAAU,EACVC,SAAiB,EACjBC,QAAwC;IAExC,IAAI,CAAChB,QAAQ,CAACiB,QAAQ,CAACH,KAAK,CAAC;IAC7BE,QAAQ,EAAE;EACZ;EAEA;EACAE,KAAK,CAACC,KAAa;IACjB,OAAOC,SAAS;EAClB;EAEA;EACAC,QAAQ,CAACC,GAAiB,EAAEN,QAAuC;IACjE,IAAI,CAAChB,QAAQ,CAACuB,WAAW,CAAC,IAAI,CAACpB,OAAO,CAAC;IACvC,KAAK,CAACkB,QAAQ,CAACC,GAAG,EAAEN,QAAQ,CAAC;EAC/B;;AAGF,SAAgBQ,aAAa,CAC3BxB,QAA4B;EAE5B,OAAO,IAAIH,qBAAqB,CAACG,QAAQ,CAAC;AAC5C;AAJAyB","names":["ObservableStoreStream","stream_1","constructor","obsStore","objectMode","resume","handler","state","push","subscribe","pipe","dest","options","result","write","getState","_write","chunk","_encoding","callback","putState","_read","_size","undefined","_destroy","err","unsubscribe","storeAsStream","exports"],"sourceRoot":"","sources":["../src/asStream.ts"],"sourcesContent":["import { Duplex as DuplexStream } from 'stream';\n\nimport { ObservableStore } from './ObservableStore';\n\nclass ObservableStoreStream<T> extends DuplexStream {\n  handler: (state: T) => void;\n\n  obsStore: ObservableStore<T>;\n\n  constructor(obsStore: ObservableStore<T>) {\n    super({\n      // pass values, not serializations\n      objectMode: true,\n    });\n    // dont buffer outgoing updates\n    this.resume();\n    // save handler so we can unsubscribe later\n    this.handler = (state: T) => this.push(state);\n    // subscribe to obsStore changes\n    this.obsStore = obsStore;\n    this.obsStore.subscribe(this.handler);\n  }\n\n  // emit current state on new destination\n  pipe<U extends NodeJS.WritableStream>(\n    dest: U,\n    options?: { end?: boolean },\n  ): U {\n    const result = super.pipe(dest, options);\n    dest.write(this.obsStore.getState() as any);\n    return result;\n  }\n\n  // write from incoming stream to state\n  _write(\n    chunk: any,\n    _encoding: string,\n    callback: (error?: Error | null) => void,\n  ): void {\n    this.obsStore.putState(chunk);\n    callback();\n  }\n\n  // noop - outgoing stream is asking us if we have data we arent giving it\n  _read(_size: number): void {\n    return undefined;\n  }\n\n  // unsubscribe from event emitter\n  _destroy(err: Error | null, callback: (error: Error | null) => void): void {\n    this.obsStore.unsubscribe(this.handler);\n    super._destroy(err, callback);\n  }\n}\n\nexport function storeAsStream<T>(\n  obsStore: ObservableStore<T>,\n): ObservableStoreStream<T> {\n  return new ObservableStoreStream(obsStore);\n}\n"]},"metadata":{},"sourceType":"script"}