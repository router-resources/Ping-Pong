{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {}\nexport class TransactionDescription extends Description {}\nexport class Indexed extends Description {\n  static isIndexed(value) {\n    return !!(value && value._isIndexed);\n  }\n}\nfunction wrapAccessError(property, error) {\n  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n  constructor(fragments) {\n    logger.checkNew(new.target, Interface);\n    let abi = [];\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n    defineReadOnly(this, \"fragments\", abi.map(fragment => {\n      return Fragment.from(fragment);\n    }).filter(fragment => fragment != null));\n    defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {});\n    // Add all fragments by their signature\n    this.fragments.forEach(fragment => {\n      let bucket = null;\n      switch (fragment.type) {\n        case \"constructor\":\n          if (this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          }\n          //checkNames(fragment, \"input\", fragment.inputs);\n          defineReadOnly(this, \"deploy\", fragment);\n          return;\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = this.functions;\n          break;\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = this.events;\n          break;\n        default:\n          return;\n      }\n      let signature = fragment.format();\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n      bucket[signature] = fragment;\n    });\n    // If we do not have a constructor add a default\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n  format(format) {\n    if (!format) {\n      format = FormatTypes.full;\n    }\n    if (format === FormatTypes.sighash) {\n      logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n    }\n    const abi = this.fragments.map(fragment => fragment.format(format));\n    // We need to re-bundle the JSON fragments a bit\n    if (format === FormatTypes.json) {\n      return JSON.stringify(abi.map(j => JSON.parse(j)));\n    }\n    return abi;\n  }\n  // Sub-classes can override these to handle other blockchains\n  static getAbiCoder() {\n    return defaultAbiCoder;\n  }\n  static getAddress(address) {\n    return getAddress(address);\n  }\n  static getSighash(functionFragment) {\n    return hexDataSlice(id(functionFragment.format()), 0, 4);\n  }\n  static getEventTopic(eventFragment) {\n    return id(eventFragment.format());\n  }\n  // Find a function definition by any means necessary (unless it is ambiguous)\n  getFunction(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      for (const name in this.functions) {\n        if (nameOrSignatureOrSighash === this.getSighash(name)) {\n          return this.functions[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.functions).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching function\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n      }\n      return this.functions[matching[0]];\n    }\n    // Normlize the signature and lookup the function\n    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n    }\n    return result;\n  }\n  // Find an event definition by any means necessary (unless it is ambiguous)\n  getEvent(nameOrSignatureOrTopic) {\n    if (isHexString(nameOrSignatureOrTopic)) {\n      const topichash = nameOrSignatureOrTopic.toLowerCase();\n      for (const name in this.events) {\n        if (topichash === this.getEventTopic(name)) {\n          return this.events[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrTopic.trim();\n      const matching = Object.keys(this.events).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching event\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n      }\n      return this.events[matching[0]];\n    }\n    // Normlize the signature and lookup the function\n    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n    }\n    return result;\n  }\n  // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n  getSighash(functionFragment) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return getStatic(this.constructor, \"getSighash\")(functionFragment);\n  }\n  // Get the topic (the bytes32 hash) used by Solidity to identify an event\n  getEventTopic(eventFragment) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n  }\n  _decodeParams(params, data) {\n    return this._abiCoder.decode(params, data);\n  }\n  _encodeParams(params, values) {\n    return this._abiCoder.encode(params, values);\n  }\n  encodeDeploy(values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  }\n  // Decode the data for a function call (e.g. tx.data)\n  decodeFunctionData(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    const bytes = arrayify(data);\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n      logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n    }\n    return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n  }\n  // Encode the data for a function call (e.g. tx.data)\n  encodeFunctionData(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n  }\n  // Decode the result from a function call (e.g. from eth_call)\n  decodeFunctionResult(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    let bytes = arrayify(data);\n    let reason = null;\n    let errorSignature = null;\n    switch (bytes.length % this._abiCoder._getWordSize()) {\n      case 0:\n        try {\n          return this._abiCoder.decode(functionFragment.outputs, bytes);\n        } catch (error) {}\n        break;\n      case 4:\n        if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n          errorSignature = \"Error(string)\";\n          reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n        }\n        break;\n    }\n    return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n      method: functionFragment.format(),\n      errorSignature: errorSignature,\n      errorArgs: [reason],\n      reason: reason\n    });\n  }\n  // Encode the result for a function call (e.g. for eth_call)\n  encodeFunctionResult(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n  }\n  // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n  encodeFilterTopics(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    if (values.length > eventFragment.inputs.length) {\n      logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n        argument: \"values\",\n        value: values\n      });\n    }\n    let topics = [];\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n    const encodeTopic = (param, value) => {\n      if (param.type === \"string\") {\n        return id(value);\n      } else if (param.type === \"bytes\") {\n        return keccak256(hexlify(value));\n      }\n      // Check addresses are valid\n      if (param.type === \"address\") {\n        this._abiCoder.encode([\"address\"], [value]);\n      }\n      return hexZeroPad(hexlify(value), 32);\n    };\n    values.forEach((value, index) => {\n      let param = eventFragment.inputs[index];\n      if (!param.indexed) {\n        if (value != null) {\n          logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        }\n        return;\n      }\n      if (value == null) {\n        topics.push(null);\n      } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n        logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else if (Array.isArray(value)) {\n        topics.push(value.map(value => encodeTopic(param, value)));\n      } else {\n        topics.push(encodeTopic(param, value));\n      }\n    });\n    // Trim off trailing nulls\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n    return topics;\n  }\n  encodeEventLog(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    const topics = [];\n    const dataTypes = [];\n    const dataValues = [];\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n    if (values.length !== eventFragment.inputs.length) {\n      logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n    }\n    eventFragment.inputs.forEach((param, index) => {\n      const value = values[index];\n      if (param.indexed) {\n        if (param.type === \"string\") {\n          topics.push(id(value));\n        } else if (param.type === \"bytes\") {\n          topics.push(keccak256(value));\n        } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n          // @TOOD\n          throw new Error(\"not implemented\");\n        } else {\n          topics.push(this._abiCoder.encode([param.type], [value]));\n        }\n      } else {\n        dataTypes.push(param);\n        dataValues.push(value);\n      }\n    });\n    return {\n      data: this._abiCoder.encode(dataTypes, dataValues),\n      topics: topics\n    };\n  }\n  // Decode a filter for the event and the search criteria\n  decodeEventLog(eventFragment, data, topics) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    if (topics != null && !eventFragment.anonymous) {\n      let topicHash = this.getEventTopic(eventFragment);\n      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n        logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"topics[0]\",\n          expected: topicHash,\n          value: topics[0]\n        });\n      }\n      topics = topics.slice(1);\n    }\n    let indexed = [];\n    let nonIndexed = [];\n    let dynamic = [];\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(ParamType.fromObject({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n    let result = [];\n    let nonIndexedIndex = 0,\n      indexedIndex = 0;\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: null\n          });\n        } else if (dynamic[index]) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: resultIndexed[indexedIndex++]\n          });\n        } else {\n          try {\n            result[index] = resultIndexed[indexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n      } else {\n        try {\n          result[index] = resultNonIndexed[nonIndexedIndex++];\n        } catch (error) {\n          result[index] = error;\n        }\n      }\n      // Add the keyword argument if named and safe\n      if (param.name && result[param.name] == null) {\n        const value = result[index];\n        // Make error named values throw on access\n        if (value instanceof Error) {\n          Object.defineProperty(result, param.name, {\n            get: () => {\n              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);\n            }\n          });\n        } else {\n          result[param.name] = value;\n        }\n      }\n    });\n    // Make all error indexed values throw on access\n    for (let i = 0; i < result.length; i++) {\n      const value = result[i];\n      if (value instanceof Error) {\n        Object.defineProperty(result, i, {\n          get: () => {\n            throw wrapAccessError(`index ${i}`, value);\n          }\n        });\n      }\n    }\n    return Object.freeze(result);\n  }\n  // Given a transaction, find the matching function fragment (if any) and\n  // determine all its properties and call parameters\n  parseTransaction(tx) {\n    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n    if (!fragment) {\n      return null;\n    }\n    return new TransactionDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n      functionFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment),\n      value: BigNumber.from(tx.value || \"0\")\n    });\n  }\n  // Given an event log, find the matching event fragment (if any) and\n  // determine all its properties and values\n  parseLog(log) {\n    let fragment = this.getEvent(log.topics[0]);\n    if (!fragment || fragment.anonymous) {\n      return null;\n    }\n    // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe jsut a fragment?\n    return new LogDescription({\n      eventFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      topic: this.getEventTopic(fragment),\n      args: this.decodeEventLog(fragment, log.data, log.topics)\n    });\n  }\n  /*\n  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n      if (Interface.isInterface(value)) {\n          return value;\n      }\n      if (typeof(value) === \"string\") {\n          return new Interface(JSON.parse(value));\n      }\n      return new Interface(value);\n  }\n  */\n  static isInterface(value) {\n    return !!(value && value._isInterface);\n  }\n}","map":{"version":3,"mappings":"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","names":["getAddress","BigNumber","arrayify","concat","hexDataSlice","hexlify","hexZeroPad","isHexString","id","keccak256","defineReadOnly","Description","getStatic","defaultAbiCoder","checkResultErrors","ConstructorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","ParamType","Logger","version","logger","LogDescription","TransactionDescription","Indexed","isIndexed","value","_isIndexed","wrapAccessError","property","error","wrap","Error","Interface","constructor","fragments","checkNew","new","target","abi","JSON","parse","map","fragment","from","filter","forEach","bucket","type","deploy","warn","functions","events","signature","format","payable","full","sighash","throwArgumentError","json","stringify","j","getAbiCoder","address","getSighash","functionFragment","getEventTopic","eventFragment","getFunction","nameOrSignatureOrSighash","name","indexOf","trim","matching","Object","keys","f","split","length","result","fromString","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","_decodeParams","params","data","_abiCoder","decode","_encodeParams","values","encode","encodeDeploy","inputs","decodeFunctionData","bytes","slice","encodeFunctionData","decodeFunctionResult","reason","errorSignature","_getWordSize","outputs","throwError","errors","CALL_EXCEPTION","method","errorArgs","encodeFunctionResult","encodeFilterTopics","UNEXPECTED_ARGUMENT","argument","topics","anonymous","push","encodeTopic","param","index","indexed","baseType","Array","isArray","pop","encodeEventLog","dataTypes","dataValues","decodeEventLog","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","defineProperty","get","i","freeze","parseTransaction","tx","substring","args","parseLog","log","topic","isInterface","_isInterface"],"sourceRoot":"","sources":["../src.ts/interface.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}